_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"
  
  templates:
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};

        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        {name} v8;
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection

    test_tu_without_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};

        la a1, {orign_data}
        li t1, VLEN/{ebits}*{lmul}
        vsetvli t0, t1, e{ebits},m{lmul},ta,mu
        vle{ebits}.v v8, (a1);

        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        {name} v8;
        la a3, test_{num}_data;
        
        vsetvli t0, t1, e{ebits},m{lmul},ta,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill VLEN/{ebits}*{lmul}, ({ebits}/8), 0;
        .popsection
    
    test_regression_without_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};

        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        {name} v8;
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection

    test_dst_eq_v0_without_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};

        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        {name} v0;
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vse{ebits}.v v0, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection

    test_vstart_without_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};

        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        li a1, {start};
        csrw vstart, a1;
        {name} v8;
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection

    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};

        la a4, {mask_data};
        li a5, ({vl} + 7) /8;
        vsetvli t0, a5, e8,m1,ta,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        {name} v8, v0.t;
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection

    test_tu_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};

        la a4, {mask_data};
        li a5, ({vl} + 7) /8;
        vsetvli t0, a5, e8,m1,ta,mu;
        vle8.v v0, (a4);

        la a1, {orign_data}
        li t1, VLEN/{ebits}*{lmul}
        vsetvli t0, t1, e{ebits},m{lmul},ta,mu
        vle{ebits}.v v8, (a1);

        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        {name} v8, v0.t;
        la a3, test_{num}_data;
        
        vsetvli t0, t1, e{ebits},m{lmul},ta,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill VLEN/{ebits}*{lmul}, ({ebits}/8), 0;
        .popsection

    test_regression_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};

        la a4, {mask_data};
        li a5, ({vl} + 7) /8;
        vsetvli t0, a5, e8,m1,ta,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        {name} v8, v0.t;
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection

    test_vstart_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};

        la a4, {mask_data};
        li a5, ({vl} + 7) /8;
        vsetvli t0, a5, e8,m1,ta,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        li a1, {start};
        csrw vstart, a1;
        {name} v8, v0.t;
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection


    test_exception: |
      test_{num}:
        li t0, 2;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        li a1, {start};
        csrw vstart, a1;
        {name} v3;
      test_{num}_end:

  cases:
    test_basic_without_mask @ vl, lmul, ebits:
      - '[1,    1, 8 ]'
      - '[4,    1, 8 ]'
      - '[7,    1, 8 ]'
      - '[8,    1, 8 ]'
      - '[9,    1, 8 ]'
      - '[15,   1, 8 ]'
      - '[16,   1, 8 ]'
      - '[17,   1, 8 ]'
      - '[31,   1, 8 ]'
      - '[32,   1, 8 ]'
      - '[33,   1, 8 ]'
      - '[64,   1, 8 ]'
      - '[65,   1, 8 ]'
      - '[127,  1, 8 ]'
      - '[128,  1, 8 ]'
      - '[129,  2, 8 ]'
      - '[255,  2, 8 ]'
      - '[256,  2, 8 ]'
      - '[257,  4, 8 ]'
      - '[511,  4, 8 ]'
      - '[512,  4, 8 ]'
      - '[513,  8, 8 ]'
      - '[1023, 8, 8 ]'
      - '[1024, 8, 8 ]'
      - '[1,    1, 16]'
      - '[4,    1, 16]'
      - '[7,    1, 16]'
      - '[8,    1, 16]'
      - '[9,    1, 16]'
      - '[15,   1, 16]'
      - '[16,   1, 16]'
      - '[17,   1, 16]'
      - '[31,   1, 16]'
      - '[32,   1, 16]'
      - '[33,   1, 16]'
      - '[64,   1, 16]'
      - '[65,   2, 16]'
      - '[127,  2, 16]'
      - '[128,  2, 16]'
      - '[129,  4, 16]'
      - '[255,  4, 16]'
      - '[256,  4, 16]'
      - '[257,  8, 16]'
      - '[511,  8, 16]'
      - '[512,  8, 16]'
      - '[1,    1, 32]'
      - '[3,    1, 32]'
      - '[4,    1, 32]'
      - '[5,    1, 32]'
      - '[7,    1, 32]'
      - '[8,    1, 32]'
      - '[9,    1, 32]'
      - '[15,   1, 32]'
      - '[16,   1, 32]'
      - '[17,   1, 32]'
      - '[31,   1, 32]'
      - '[32,   1, 32]'
      - '[33,   2, 32]'
      - '[64,   2, 32]'
      - '[65,   4, 32]'
      - '[127,  4, 32]'
      - '[128,  4, 32]'
      - '[129,  8, 32]'
      - '[255,  8, 32]'
      - '[256,  8, 32]'
      - '[1,    1, 64]'
      - '[3,    1, 64]'
      - '[4,    1, 64]'
      - '[5,    1, 64]'
      - '[7,    1, 64]'
      - '[8,    1, 64]'
      - '[9,    1, 64]'
      - '[15,   1, 64]'
      - '[16,   1, 64]'
      - '[17,   2, 64]'
      - '[31,   2, 64]'
      - '[32,   2, 64]'
      - '[33,   4, 64]'
      - '[64,   4, 64]'
      - '[65,   8, 64]'
      - '[127,  8, 64]'
      - '[128,  8, 64]'
    
    test_tu_without_mask @ orign, vl, lmul, ebits:
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  1,    1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  4,    1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  7,    1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  8,    1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  9,    1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  15,   1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  16,   1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  17,   1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  31,   1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  32,   1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  33,   1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  64,   1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  65,   1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  127,  1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  128,  1, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *2).astype(np.uint8 ),  129,  2, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *2).astype(np.uint8 ),  255,  2, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *2).astype(np.uint8 ),  256,  2, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *4).astype(np.uint8 ),  257,  4, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *4).astype(np.uint8 ),  511,  4, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *4).astype(np.uint8 ),  512,  4, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *8).astype(np.uint8 ),  513,  8, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *8).astype(np.uint8 ),  1023, 8, 8 ]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *8).astype(np.uint8 ),  1024, 8, 8 ]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  1,    1, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  4,    1, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  7,    1, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  8,    1, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  9,    1, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  15,   1, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  16,   1, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  17,   1, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  31,   1, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  32,   1, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  33,   1, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  64,   1, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*2).astype(np.uint16),  65,   2, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*2).astype(np.uint16),  127,  2, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*2).astype(np.uint16),  128,  2, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*4).astype(np.uint16),  129,  4, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*4).astype(np.uint16),  255,  4, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*4).astype(np.uint16),  256,  4, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*8).astype(np.uint16),  257,  8, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*8).astype(np.uint16),  511,  8, 16]'
      - '[np.random.uniform(0, 2**16, 1024//16*8).astype(np.uint16),  512,  8, 16]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  1,    1, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  3,    1, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  4,    1, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  5,    1, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  7,    1, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  8,    1, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  9,    1, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  15,   1, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  16,   1, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  17,   1, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  31,   1, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  32,   1, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*2).astype(np.uint32),  33,   2, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*2).astype(np.uint32),  64,   2, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*4).astype(np.uint32),  65,   4, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*4).astype(np.uint32),  127,  4, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*4).astype(np.uint32),  128,  4, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*8).astype(np.uint32),  129,  8, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*8).astype(np.uint32),  255,  8, 32]'
      - '[np.random.uniform(0, 2**32, 1024//32*8).astype(np.uint32),  256,  8, 32]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  1,    1, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  3,    1, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  4,    1, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  5,    1, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  7,    1, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  8,    1, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  9,    1, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  15,   1, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  16,   1, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*2).astype(np.uint64),  17,   2, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*2).astype(np.uint64),  31,   2, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*2).astype(np.uint64),  32,   2, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*4).astype(np.uint64),  33,   4, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*4).astype(np.uint64),  64,   4, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*8).astype(np.uint64),  65,   8, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*8).astype(np.uint64),  127,  8, 64]'
      - '[np.random.uniform(0, 2**64, 1024//64*8).astype(np.uint64),  128,  8, 64]'
     
    test_regression_without_mask @ vl, lmul, ebits:
      - '[np.random.randint(0, 1024//8 *1),    1, 8 ]'
      - '[np.random.randint(0, 1024//8 *2),    2, 8 ]'
      - '[np.random.randint(0, 1024//8 *4),    4, 8 ]'
      - '[np.random.randint(0, 1024//8 *8),    8, 8 ]'
      - '[np.random.randint(0, 1024//16*1),    1, 16]'
      - '[np.random.randint(0, 1024//16*2),    2, 16]'
      - '[np.random.randint(0, 1024//16*4),    4, 16]'
      - '[np.random.randint(0, 1024//16*8),    8, 16]'
      - '[np.random.randint(0, 1024//32*1),    1, 32]'
      - '[np.random.randint(0, 1024//32*2),    2, 32]'
      - '[np.random.randint(0, 1024//32*4),    4, 32]'
      - '[np.random.randint(0, 1024//32*8),    8, 32]'
      - '[np.random.randint(0, 1024//64*1),    1, 64]'
      - '[np.random.randint(0, 1024//64*2),    2, 64]'
      - '[np.random.randint(0, 1024//64*4),    4, 64]'
      - '[np.random.randint(0, 1024//64*8),    8, 64]'
 
    test_dst_eq_v0_without_mask @ vl, lmul, ebits:
      - '[1,    1, 8 ]'
      - '[4,    1, 8 ]'
      - '[7,    1, 8 ]'
      - '[8,    1, 8 ]'
      - '[9,    1, 8 ]'
      - '[15,   1, 8 ]'
      - '[16,   1, 8 ]'
      - '[17,   1, 8 ]'
      - '[31,   1, 8 ]'
      - '[32,   1, 8 ]'
      - '[33,   1, 8 ]'
      - '[64,   1, 8 ]'
      - '[65,   1, 8 ]'
      - '[127,  1, 8 ]'
      - '[128,  1, 8 ]'
      - '[1,    1, 16]'
      - '[4,    1, 16]'
      - '[7,    1, 16]'
      - '[8,    1, 16]'
      - '[9,    1, 16]'
      - '[15,   1, 16]'
      - '[16,   1, 16]'
      - '[17,   1, 16]'
      - '[31,   1, 16]'
      - '[32,   1, 16]'
      - '[33,   1, 16]'
      - '[64,   1, 16]'
      - '[1,    1, 32]'
      - '[3,    1, 32]'
      - '[4,    1, 32]'
      - '[5,    1, 32]'
      - '[7,    1, 32]'
      - '[8,    1, 32]'
      - '[9,    1, 32]'
      - '[15,   1, 32]'
      - '[16,   1, 32]'
      - '[17,   1, 32]'
      - '[31,   1, 32]'                
      - '[4,    1, 64]'
      - '[5,    1, 64]'
      - '[7,    1, 64]'
      - '[8,    1, 64]'
      - '[9,    1, 64]'
      - '[15,   1, 64]'
      - '[16,   1, 64]'

    test_vstart_without_mask @ vl, lmul, ebits, start:
      - '[1,    1, 8 , np.random.randint(0,    1)]'
      - '[4,    1, 8 , np.random.randint(0,    4)]'
      - '[7,    1, 8 , np.random.randint(0,    7)]'
      - '[8,    1, 8 , np.random.randint(0,    8)]'
      - '[9,    1, 8 , np.random.randint(0,    9)]'
      - '[15,   1, 8 , np.random.randint(0,   15)]'
      - '[16,   1, 8 , np.random.randint(0,   16)]'
      - '[17,   1, 8 , np.random.randint(0,   17)]'
      - '[31,   1, 8 , np.random.randint(0,   31)]'
      - '[32,   1, 8 , np.random.randint(0,   32)]'
      - '[33,   1, 8 , np.random.randint(0,   33)]'
      - '[64,   1, 8 , np.random.randint(0,   64)]'
      - '[65,   1, 8 , np.random.randint(0,   65)]'
      - '[127,  1, 8 , np.random.randint(0,  127)]'
      - '[128,  1, 8 , np.random.randint(0,  128)]'
      - '[129,  2, 8 , np.random.randint(0,  129)]'
      - '[255,  2, 8 , np.random.randint(0,  255)]'
      - '[256,  2, 8 , np.random.randint(0,  256)]'
      - '[257,  4, 8 , np.random.randint(0,  257)]'
      - '[511,  4, 8 , np.random.randint(0,  511)]'
      - '[512,  4, 8 , np.random.randint(0,  512)]'
      - '[513,  8, 8 , np.random.randint(0,  513)]'
      - '[1023, 8, 8 , np.random.randint(0, 1023)]'
      - '[1024, 8, 8 , np.random.randint(0, 1024)]'
      - '[1,    1, 16, np.random.randint(0,    1)]'
      - '[4,    1, 16, np.random.randint(0,    4)]'
      - '[7,    1, 16, np.random.randint(0,    7)]'
      - '[8,    1, 16, np.random.randint(0,    8)]'
      - '[9,    1, 16, np.random.randint(0,    9)]'
      - '[15,   1, 16, np.random.randint(0,   15)]'
      - '[16,   1, 16, np.random.randint(0,   16)]'
      - '[17,   1, 16, np.random.randint(0,   17)]'
      - '[31,   1, 16, np.random.randint(0,   31)]'
      - '[32,   1, 16, np.random.randint(0,   32)]'
      - '[33,   1, 16, np.random.randint(0,   33)]'
      - '[64,   1, 16, np.random.randint(0,   64)]'
      - '[65,   2, 16, np.random.randint(0,   65)]'
      - '[127,  2, 16, np.random.randint(0,  127)]'
      - '[128,  2, 16, np.random.randint(0,  128)]'
      - '[129,  4, 16, np.random.randint(0,  129)]'
      - '[255,  4, 16, np.random.randint(0,  255)]'
      - '[256,  4, 16, np.random.randint(0,  256)]'
      - '[257,  8, 16, np.random.randint(0,  257)]'
      - '[511,  8, 16, np.random.randint(0,  511)]'
      - '[512,  8, 16, np.random.randint(0,  512)]'
      - '[1,    1, 32, np.random.randint(0,    1)]'
      - '[3,    1, 32, np.random.randint(0,    3)]'
      - '[4,    1, 32, np.random.randint(0,    4)]'
      - '[5,    1, 32, np.random.randint(0,    5)]'
      - '[7,    1, 32, np.random.randint(0,    7)]'
      - '[8,    1, 32, np.random.randint(0,    8)]'
      - '[9,    1, 32, np.random.randint(0,    9)]'
      - '[15,   1, 32, np.random.randint(0,   15)]'
      - '[16,   1, 32, np.random.randint(0,   16)]'
      - '[17,   1, 32, np.random.randint(0,   17)]'
      - '[31,   1, 32, np.random.randint(0,   31)]'
      - '[32,   1, 32, np.random.randint(0,   32)]'
      - '[33,   2, 32, np.random.randint(0,   33)]'
      - '[64,   2, 32, np.random.randint(0,   64)]'
      - '[65,   4, 32, np.random.randint(0,   65)]'
      - '[127,  4, 32, np.random.randint(0,  127)]'
      - '[128,  4, 32, np.random.randint(0,  128)]'
      - '[129,  8, 32, np.random.randint(0,  129)]'
      - '[255,  8, 32, np.random.randint(0,  255)]'
      - '[256,  8, 32, np.random.randint(0,  256)]'
      - '[1,    1, 64, np.random.randint(0,    1)]'
      - '[3,    1, 64, np.random.randint(0,    3)]'
      - '[4,    1, 64, np.random.randint(0,    4)]'
      - '[5,    1, 64, np.random.randint(0,    5)]'
      - '[7,    1, 64, np.random.randint(0,    7)]'
      - '[8,    1, 64, np.random.randint(0,    8)]'
      - '[9,    1, 64, np.random.randint(0,    9)]'
      - '[15,   1, 64, np.random.randint(0,   15)]'
      - '[16,   1, 64, np.random.randint(0,   16)]'
      - '[17,   2, 64, np.random.randint(0,   17)]'
      - '[31,   2, 64, np.random.randint(0,   31)]'
      - '[32,   2, 64, np.random.randint(0,   32)]'
      - '[33,   4, 64, np.random.randint(0,   33)]'
      - '[64,   4, 64, np.random.randint(0,   64)]'
      - '[65,   8, 64, np.random.randint(0,   65)]'
      - '[127,  8, 64, np.random.randint(0,  127)]'
      - '[128,  8, 64, np.random.randint(0,  128)]'
 


    test_basic_with_mask @ vl, lmul, ebits, mask:
      - '[1,    1, 8 , vector_mask_array_random(1   )]'
      - '[4,    1, 8 , vector_mask_array_random(4   )]'
      - '[7,    1, 8 , vector_mask_array_random(7   )]'
      - '[8,    1, 8 , vector_mask_array_random(8   )]'
      - '[9,    1, 8 , vector_mask_array_random(9   )]'
      - '[15,   1, 8 , vector_mask_array_random(15  )]'
      - '[16,   1, 8 , vector_mask_array_random(16  )]'
      - '[17,   1, 8 , vector_mask_array_random(17  )]'
      - '[31,   1, 8 , vector_mask_array_random(31  )]'
      - '[32,   1, 8 , vector_mask_array_random(32  )]'
      - '[33,   1, 8 , vector_mask_array_random(33  )]'
      - '[64,   1, 8 , vector_mask_array_random(64  )]'
      - '[65,   1, 8 , vector_mask_array_random(65  )]'
      - '[127,  1, 8 , vector_mask_array_random(127 )]'
      - '[128,  1, 8 , vector_mask_array_random(128 )]'
      - '[129,  2, 8 , vector_mask_array_random(129 )]'
      - '[255,  2, 8 , vector_mask_array_random(255 )]'
      - '[256,  2, 8 , vector_mask_array_random(256 )]'
      - '[257,  4, 8 , vector_mask_array_random(257 )]'
      - '[511,  4, 8 , vector_mask_array_random(511 )]'
      - '[512,  4, 8 , vector_mask_array_random(512 )]'
      - '[513,  8, 8 , vector_mask_array_random(513 )]'
      - '[1023, 8, 8 , vector_mask_array_random(1023)]'
      - '[1024, 8, 8 , vector_mask_array_random(1024)]'
      - '[1,    1, 16, vector_mask_array_random(1   )]'
      - '[4,    1, 16, vector_mask_array_random(4   )]'
      - '[7,    1, 16, vector_mask_array_random(7   )]'
      - '[8,    1, 16, vector_mask_array_random(8   )]'
      - '[9,    1, 16, vector_mask_array_random(9   )]'
      - '[15,   1, 16, vector_mask_array_random(15  )]'
      - '[16,   1, 16, vector_mask_array_random(16  )]'
      - '[17,   1, 16, vector_mask_array_random(17  )]'
      - '[31,   1, 16, vector_mask_array_random(31  )]'
      - '[32,   1, 16, vector_mask_array_random(32  )]'
      - '[33,   1, 16, vector_mask_array_random(33  )]'
      - '[64,   1, 16, vector_mask_array_random(64  )]'
      - '[65,   2, 16, vector_mask_array_random(65  )]'
      - '[127,  2, 16, vector_mask_array_random(127 )]'
      - '[128,  2, 16, vector_mask_array_random(128 )]'
      - '[129,  4, 16, vector_mask_array_random(129 )]'
      - '[255,  4, 16, vector_mask_array_random(255 )]'
      - '[256,  4, 16, vector_mask_array_random(256 )]'
      - '[257,  8, 16, vector_mask_array_random(257 )]'
      - '[511,  8, 16, vector_mask_array_random(511 )]'
      - '[512,  8, 16, vector_mask_array_random(512 )]'
      - '[1,    1, 32, vector_mask_array_random(1   )]'
      - '[3,    1, 32, vector_mask_array_random(3   )]'
      - '[4,    1, 32, vector_mask_array_random(4   )]'
      - '[5,    1, 32, vector_mask_array_random(5   )]'
      - '[7,    1, 32, vector_mask_array_random(7   )]'
      - '[8,    1, 32, vector_mask_array_random(8   )]'
      - '[9,    1, 32, vector_mask_array_random(9   )]'
      - '[15,   1, 32, vector_mask_array_random(15  )]'
      - '[16,   1, 32, vector_mask_array_random(16  )]'
      - '[17,   1, 32, vector_mask_array_random(17  )]'
      - '[31,   1, 32, vector_mask_array_random(31  )]'
      - '[32,   1, 32, vector_mask_array_random(32  )]'
      - '[33,   2, 32, vector_mask_array_random(33  )]'
      - '[64,   2, 32, vector_mask_array_random(64  )]'
      - '[65,   4, 32, vector_mask_array_random(65  )]'
      - '[127,  4, 32, vector_mask_array_random(127 )]'
      - '[128,  4, 32, vector_mask_array_random(128 )]'
      - '[129,  8, 32, vector_mask_array_random(129 )]'
      - '[255,  8, 32, vector_mask_array_random(255 )]'
      - '[256,  8, 32, vector_mask_array_random(256 )]'
      - '[1,    1, 64, vector_mask_array_random(1   )]'
      - '[3,    1, 64, vector_mask_array_random(3   )]'
      - '[4,    1, 64, vector_mask_array_random(4   )]'
      - '[5,    1, 64, vector_mask_array_random(5   )]'
      - '[7,    1, 64, vector_mask_array_random(7   )]'
      - '[8,    1, 64, vector_mask_array_random(8   )]'
      - '[9,    1, 64, vector_mask_array_random(9   )]'
      - '[15,   1, 64, vector_mask_array_random(15  )]'
      - '[16,   1, 64, vector_mask_array_random(16  )]'
      - '[17,   2, 64, vector_mask_array_random(17  )]'
      - '[31,   2, 64, vector_mask_array_random(31  )]'
      - '[32,   2, 64, vector_mask_array_random(32  )]'
      - '[33,   4, 64, vector_mask_array_random(33  )]'
      - '[64,   4, 64, vector_mask_array_random(64  )]'
      - '[65,   8, 64, vector_mask_array_random(65  )]'
      - '[127,  8, 64, vector_mask_array_random(127 )]'
      - '[128,  8, 64, vector_mask_array_random(128 )]'

    test_tu_with_mask @ orign, vl, lmul, ebits, mask:
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  1,    1, 8 , vector_mask_array_random(1   )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  4,    1, 8 , vector_mask_array_random(4   )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  7,    1, 8 , vector_mask_array_random(7   )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  8,    1, 8 , vector_mask_array_random(8   )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  9,    1, 8 , vector_mask_array_random(9   )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  15,   1, 8 , vector_mask_array_random(15  )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  16,   1, 8 , vector_mask_array_random(16  )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  17,   1, 8 , vector_mask_array_random(17  )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  31,   1, 8 , vector_mask_array_random(31  )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  32,   1, 8 , vector_mask_array_random(32  )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  33,   1, 8 , vector_mask_array_random(33  )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  64,   1, 8 , vector_mask_array_random(64  )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  65,   1, 8 , vector_mask_array_random(65  )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  127,  1, 8 , vector_mask_array_random(127 )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *1).astype(np.uint8 ),  128,  1, 8 , vector_mask_array_random(128 )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *2).astype(np.uint8 ),  129,  2, 8 , vector_mask_array_random(129 )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *2).astype(np.uint8 ),  255,  2, 8 , vector_mask_array_random(255 )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *2).astype(np.uint8 ),  256,  2, 8 , vector_mask_array_random(256 )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *4).astype(np.uint8 ),  257,  4, 8 , vector_mask_array_random(257 )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *4).astype(np.uint8 ),  511,  4, 8 , vector_mask_array_random(511 )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *4).astype(np.uint8 ),  512,  4, 8 , vector_mask_array_random(512 )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *8).astype(np.uint8 ),  513,  8, 8 , vector_mask_array_random(513 )]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *8).astype(np.uint8 ),  1023, 8, 8 , vector_mask_array_random(1023)]'
      - '[np.random.uniform(0, 2**8 , 1024//8 *8).astype(np.uint8 ),  1024, 8, 8 , vector_mask_array_random(1024)]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  1,    1, 16, vector_mask_array_random(1   )]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  4,    1, 16, vector_mask_array_random(4   )]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  7,    1, 16, vector_mask_array_random(7   )]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  8,    1, 16, vector_mask_array_random(8   )]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  9,    1, 16, vector_mask_array_random(9   )]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  15,   1, 16, vector_mask_array_random(15  )]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  16,   1, 16, vector_mask_array_random(16  )]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  17,   1, 16, vector_mask_array_random(17  )]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  31,   1, 16, vector_mask_array_random(31  )]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  32,   1, 16, vector_mask_array_random(32  )]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  33,   1, 16, vector_mask_array_random(33  )]'
      - '[np.random.uniform(0, 2**16, 1024//16*1).astype(np.uint16),  64,   1, 16, vector_mask_array_random(64  )]'
      - '[np.random.uniform(0, 2**16, 1024//16*2).astype(np.uint16),  65,   2, 16, vector_mask_array_random(65  )]'
      - '[np.random.uniform(0, 2**16, 1024//16*2).astype(np.uint16),  127,  2, 16, vector_mask_array_random(127 )]'
      - '[np.random.uniform(0, 2**16, 1024//16*2).astype(np.uint16),  128,  2, 16, vector_mask_array_random(128 )]'
      - '[np.random.uniform(0, 2**16, 1024//16*4).astype(np.uint16),  129,  4, 16, vector_mask_array_random(129 )]'
      - '[np.random.uniform(0, 2**16, 1024//16*4).astype(np.uint16),  255,  4, 16, vector_mask_array_random(255 )]'
      - '[np.random.uniform(0, 2**16, 1024//16*4).astype(np.uint16),  256,  4, 16, vector_mask_array_random(256 )]'
      - '[np.random.uniform(0, 2**16, 1024//16*8).astype(np.uint16),  257,  8, 16, vector_mask_array_random(257 )]'
      - '[np.random.uniform(0, 2**16, 1024//16*8).astype(np.uint16),  511,  8, 16, vector_mask_array_random(511 )]'
      - '[np.random.uniform(0, 2**16, 1024//16*8).astype(np.uint16),  512,  8, 16, vector_mask_array_random(512 )]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  1,    1, 32, vector_mask_array_random(1   )]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  3,    1, 32, vector_mask_array_random(3   )]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  4,    1, 32, vector_mask_array_random(4   )]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  5,    1, 32, vector_mask_array_random(5   )]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  7,    1, 32, vector_mask_array_random(7   )]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  8,    1, 32, vector_mask_array_random(8   )]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  9,    1, 32, vector_mask_array_random(9   )]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  15,   1, 32, vector_mask_array_random(15  )]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  16,   1, 32, vector_mask_array_random(16  )]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  17,   1, 32, vector_mask_array_random(17  )]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  31,   1, 32, vector_mask_array_random(31  )]'
      - '[np.random.uniform(0, 2**32, 1024//32*1).astype(np.uint32),  32,   1, 32, vector_mask_array_random(32  )]'
      - '[np.random.uniform(0, 2**32, 1024//32*2).astype(np.uint32),  33,   2, 32, vector_mask_array_random(33  )]'
      - '[np.random.uniform(0, 2**32, 1024//32*2).astype(np.uint32),  64,   2, 32, vector_mask_array_random(64  )]'
      - '[np.random.uniform(0, 2**32, 1024//32*4).astype(np.uint32),  65,   4, 32, vector_mask_array_random(65  )]'
      - '[np.random.uniform(0, 2**32, 1024//32*4).astype(np.uint32),  127,  4, 32, vector_mask_array_random(127 )]'
      - '[np.random.uniform(0, 2**32, 1024//32*4).astype(np.uint32),  128,  4, 32, vector_mask_array_random(128 )]'
      - '[np.random.uniform(0, 2**32, 1024//32*8).astype(np.uint32),  129,  8, 32, vector_mask_array_random(129 )]'
      - '[np.random.uniform(0, 2**32, 1024//32*8).astype(np.uint32),  255,  8, 32, vector_mask_array_random(255 )]'
      - '[np.random.uniform(0, 2**32, 1024//32*8).astype(np.uint32),  256,  8, 32, vector_mask_array_random(256 )]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  1,    1, 64, vector_mask_array_random(1   )]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  3,    1, 64, vector_mask_array_random(3   )]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  4,    1, 64, vector_mask_array_random(4   )]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  5,    1, 64, vector_mask_array_random(5   )]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  7,    1, 64, vector_mask_array_random(7   )]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  8,    1, 64, vector_mask_array_random(8   )]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  9,    1, 64, vector_mask_array_random(9   )]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  15,   1, 64, vector_mask_array_random(15  )]'
      - '[np.random.uniform(0, 2**64, 1024//64*1).astype(np.uint64),  16,   1, 64, vector_mask_array_random(16  )]'
      - '[np.random.uniform(0, 2**64, 1024//64*2).astype(np.uint64),  17,   2, 64, vector_mask_array_random(17  )]'
      - '[np.random.uniform(0, 2**64, 1024//64*2).astype(np.uint64),  31,   2, 64, vector_mask_array_random(31  )]'
      - '[np.random.uniform(0, 2**64, 1024//64*2).astype(np.uint64),  32,   2, 64, vector_mask_array_random(32  )]'
      - '[np.random.uniform(0, 2**64, 1024//64*4).astype(np.uint64),  33,   4, 64, vector_mask_array_random(33  )]'
      - '[np.random.uniform(0, 2**64, 1024//64*4).astype(np.uint64),  64,   4, 64, vector_mask_array_random(64  )]'
      - '[np.random.uniform(0, 2**64, 1024//64*8).astype(np.uint64),  65,   8, 64, vector_mask_array_random(65  )]'
      - '[np.random.uniform(0, 2**64, 1024//64*8).astype(np.uint64),  127,  8, 64, vector_mask_array_random(127 )]'
      - '[np.random.uniform(0, 2**64, 1024//64*8).astype(np.uint64),  128,  8, 64, vector_mask_array_random(128 )]'

    test_regression_with_mask @ vl, lmul, ebits, mask:
      - '[np.random.randint(0, 1024//8 *1),    1, 8 ,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//8 *2),    2, 8 ,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//8 *4),    4, 8 ,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//8 *8),    8, 8 ,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//16*1),    1, 16,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//16*2),    2, 16,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//16*4),    4, 16,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//16*8),    8, 16,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//32*1),    1, 32,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//32*2),    2, 32,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//32*4),    4, 32,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//32*8),    8, 32,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//64*1),    1, 64,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//64*2),    2, 64,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//64*4),    4, 64,  np.random.uniform(0, 256, 128).astype(np.uint8)]'
      - '[np.random.randint(0, 1024//64*8),    8, 64,  np.random.uniform(0, 256, 128).astype(np.uint8)]'

    test_vstart_with_mask @ vl, lmul, ebits, mask, start:
      - '[1,    1, 8 , vector_mask_array_random(1   ), np.random.randint(0,    1)]'
      - '[4,    1, 8 , vector_mask_array_random(4   ), np.random.randint(0,    4)]'
      - '[7,    1, 8 , vector_mask_array_random(7   ), np.random.randint(0,    7)]'
      - '[8,    1, 8 , vector_mask_array_random(8   ), np.random.randint(0,    8)]'
      - '[9,    1, 8 , vector_mask_array_random(9   ), np.random.randint(0,    9)]'
      - '[15,   1, 8 , vector_mask_array_random(15  ), np.random.randint(0,   15)]'
      - '[16,   1, 8 , vector_mask_array_random(16  ), np.random.randint(0,   16)]'
      - '[17,   1, 8 , vector_mask_array_random(17  ), np.random.randint(0,   17)]'
      - '[31,   1, 8 , vector_mask_array_random(31  ), np.random.randint(0,   31)]'
      - '[32,   1, 8 , vector_mask_array_random(32  ), np.random.randint(0,   32)]'
      - '[33,   1, 8 , vector_mask_array_random(33  ), np.random.randint(0,   33)]'
      - '[64,   1, 8 , vector_mask_array_random(64  ), np.random.randint(0,   64)]'
      - '[65,   1, 8 , vector_mask_array_random(65  ), np.random.randint(0,   65)]'
      - '[127,  1, 8 , vector_mask_array_random(127 ), np.random.randint(0,  127)]'
      - '[128,  1, 8 , vector_mask_array_random(128 ), np.random.randint(0,  128)]'
      - '[129,  2, 8 , vector_mask_array_random(129 ), np.random.randint(0,  129)]'
      - '[255,  2, 8 , vector_mask_array_random(255 ), np.random.randint(0,  255)]'
      - '[256,  2, 8 , vector_mask_array_random(256 ), np.random.randint(0,  256)]'
      - '[257,  4, 8 , vector_mask_array_random(257 ), np.random.randint(0,  257)]'
      - '[511,  4, 8 , vector_mask_array_random(511 ), np.random.randint(0,  511)]'
      - '[512,  4, 8 , vector_mask_array_random(512 ), np.random.randint(0,  512)]'
      - '[513,  8, 8 , vector_mask_array_random(513 ), np.random.randint(0,  513)]'
      - '[1023, 8, 8 , vector_mask_array_random(1023), np.random.randint(0, 1023)]'
      - '[1024, 8, 8 , vector_mask_array_random(1024), np.random.randint(0, 1024)]'
      - '[1,    1, 16, vector_mask_array_random(1   ), np.random.randint(0,    1)]'
      - '[4,    1, 16, vector_mask_array_random(4   ), np.random.randint(0,    4)]'
      - '[7,    1, 16, vector_mask_array_random(7   ), np.random.randint(0,    7)]'
      - '[8,    1, 16, vector_mask_array_random(8   ), np.random.randint(0,    8)]'
      - '[9,    1, 16, vector_mask_array_random(9   ), np.random.randint(0,    9)]'
      - '[15,   1, 16, vector_mask_array_random(15  ), np.random.randint(0,   15)]'
      - '[16,   1, 16, vector_mask_array_random(16  ), np.random.randint(0,   16)]'
      - '[17,   1, 16, vector_mask_array_random(17  ), np.random.randint(0,   17)]'
      - '[31,   1, 16, vector_mask_array_random(31  ), np.random.randint(0,   31)]'
      - '[32,   1, 16, vector_mask_array_random(32  ), np.random.randint(0,   32)]'
      - '[33,   1, 16, vector_mask_array_random(33  ), np.random.randint(0,   33)]'
      - '[64,   1, 16, vector_mask_array_random(64  ), np.random.randint(0,   64)]'
      - '[65,   2, 16, vector_mask_array_random(65  ), np.random.randint(0,   65)]'
      - '[127,  2, 16, vector_mask_array_random(127 ), np.random.randint(0,  127)]'
      - '[128,  2, 16, vector_mask_array_random(128 ), np.random.randint(0,  128)]'
      - '[129,  4, 16, vector_mask_array_random(129 ), np.random.randint(0,  129)]'
      - '[255,  4, 16, vector_mask_array_random(255 ), np.random.randint(0,  255)]'
      - '[256,  4, 16, vector_mask_array_random(256 ), np.random.randint(0,  256)]'
      - '[257,  8, 16, vector_mask_array_random(257 ), np.random.randint(0,  257)]'
      - '[511,  8, 16, vector_mask_array_random(511 ), np.random.randint(0,  511)]'
      - '[512,  8, 16, vector_mask_array_random(512 ), np.random.randint(0,  512)]'
      - '[1,    1, 32, vector_mask_array_random(1   ), np.random.randint(0,    1)]'
      - '[3,    1, 32, vector_mask_array_random(3   ), np.random.randint(0,    3)]'
      - '[4,    1, 32, vector_mask_array_random(4   ), np.random.randint(0,    4)]'
      - '[5,    1, 32, vector_mask_array_random(5   ), np.random.randint(0,    5)]'
      - '[7,    1, 32, vector_mask_array_random(7   ), np.random.randint(0,    7)]'
      - '[8,    1, 32, vector_mask_array_random(8   ), np.random.randint(0,    8)]'
      - '[9,    1, 32, vector_mask_array_random(9   ), np.random.randint(0,    9)]'
      - '[15,   1, 32, vector_mask_array_random(15  ), np.random.randint(0,   15)]'
      - '[16,   1, 32, vector_mask_array_random(16  ), np.random.randint(0,   16)]'
      - '[17,   1, 32, vector_mask_array_random(17  ), np.random.randint(0,   17)]'
      - '[31,   1, 32, vector_mask_array_random(31  ), np.random.randint(0,   31)]'
      - '[32,   1, 32, vector_mask_array_random(32  ), np.random.randint(0,   32)]'
      - '[33,   2, 32, vector_mask_array_random(33  ), np.random.randint(0,   33)]'
      - '[64,   2, 32, vector_mask_array_random(64  ), np.random.randint(0,   64)]'
      - '[65,   4, 32, vector_mask_array_random(65  ), np.random.randint(0,   65)]'
      - '[127,  4, 32, vector_mask_array_random(127 ), np.random.randint(0,  127)]'
      - '[128,  4, 32, vector_mask_array_random(128 ), np.random.randint(0,  128)]'
      - '[129,  8, 32, vector_mask_array_random(129 ), np.random.randint(0,  129)]'
      - '[255,  8, 32, vector_mask_array_random(255 ), np.random.randint(0,  255)]'
      - '[256,  8, 32, vector_mask_array_random(256 ), np.random.randint(0,  256)]'
      - '[1,    1, 64, vector_mask_array_random(1   ), np.random.randint(0,    1)]'
      - '[3,    1, 64, vector_mask_array_random(3   ), np.random.randint(0,    3)]'
      - '[4,    1, 64, vector_mask_array_random(4   ), np.random.randint(0,    4)]'
      - '[5,    1, 64, vector_mask_array_random(5   ), np.random.randint(0,    5)]'
      - '[7,    1, 64, vector_mask_array_random(7   ), np.random.randint(0,    7)]'
      - '[8,    1, 64, vector_mask_array_random(8   ), np.random.randint(0,    8)]'
      - '[9,    1, 64, vector_mask_array_random(9   ), np.random.randint(0,    9)]'
      - '[15,   1, 64, vector_mask_array_random(15  ), np.random.randint(0,   15)]'
      - '[16,   1, 64, vector_mask_array_random(16  ), np.random.randint(0,   16)]'
      - '[17,   2, 64, vector_mask_array_random(17  ), np.random.randint(0,   17)]'
      - '[31,   2, 64, vector_mask_array_random(31  ), np.random.randint(0,   31)]'
      - '[32,   2, 64, vector_mask_array_random(32  ), np.random.randint(0,   32)]'
      - '[33,   4, 64, vector_mask_array_random(33  ), np.random.randint(0,   33)]'
      - '[64,   4, 64, vector_mask_array_random(64  ), np.random.randint(0,   64)]'
      - '[65,   8, 64, vector_mask_array_random(65  ), np.random.randint(0,   65)]'
      - '[127,  8, 64, vector_mask_array_random(127 ), np.random.randint(0,  127)]'
      - '[128,  8, 64, vector_mask_array_random(128 ), np.random.randint(0,  128)]'


    test_exception @ vl, lmul, ebits, start:
      - '[1,    1, 128, 0]'
      - '[1,    1,   8, 1]'
      - '[1,    2,   8, 0]'
      
  check:
    test_basic_without_mask: np.array_equal(result, golden)
    test_tu_without_mask: np.array_equal(result, golden)
    test_regression_without_mask: np.array_equal(result, golden)
    test_dst_eq_v0_without_mask: np.array_equal(result, golden)
    test_vstart_without_mask: np.array_equal(result, golden)
    test_basic_with_mask: np.array_equal(result, golden)
    test_tu_with_mask: np.array_equal(result, golden)
    test_regression_with_mask: np.array_equal(result, golden)
    test_vstart_with_mask: np.array_equal(result, golden)

vid_v:
  <<: *default
