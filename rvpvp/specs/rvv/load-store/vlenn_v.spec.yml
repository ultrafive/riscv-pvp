_: &default
  env: RVTEST_RV64UV
  head: |
    #undef EXTRA_INIT
    #define EXTRA_INIT                               \
      /* Set up a PMP to permit all accesses */      \
      li t0, 0xc0200000;                       \
      srli t0, t0, 2;                                \
      csrw pmpaddr0, t0;                             \
      li t0, PMP_TOR | PMP_R | PMP_W | PMP_X;        \
      csrw pmpcfg0, t0;                               
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vsub.vv v8, v8, v8;
        {name} v8, (a1);
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits} / 8)
      test_{num}_data:
        .fill ({vl}), ({ebits} / 8), 0;
        .popsection

    test_vlm_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vsub.vv v8, v8, v8;
        {name} v8, (a1);

        li a0, ({vl}+7)/8;
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits} / 8)
      test_{num}_data:
        .fill (({vl}+7)/8), ({ebits} / 8), 0;
        .popsection

    test_eew_gt_sew_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        {name} v8, (a1);
        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

    test_eew_lt_sew_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;

        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        {name} v8, (a1);
        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

    test_vlm_eew_lt_sew_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;

        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        {name} v8, (a1);

        li a0, ({vl}+7)/8;
        vsetvli t0, a0, e{eew},m{lmul},ta,mu;
        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill (({vl}+7)/8), ({eew} / 8), 0;
        .popsection
    
    test_vstart_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vsub.vv v8, v8, v8;
        li a2, {start};
        csrw vstart, a2;
        {name} v8, (a1);
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits} / 8)
      test_{num}_data:
        .fill ({vl}), ({ebits} / 8), 0;
        .popsection

    test_vlm_vstart_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vsub.vv v8, v8, v8;
        li a2, {start};
        csrw vstart, a2;
        {name} v8, (a1);

        li a0, ({vl}+7)/8;
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits} / 8)
      test_{num}_data:
        .fill (({vl}+7)/8), ({ebits} / 8), 0;
        .popsection
    
    test_tu_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a2, {origin_data};
        la a3, test_{num}_data;

        li a4, VLEN*8/{ebits};
        vsetvli t0, a4, e{ebits},m8,tu,mu;
        vle{ebits}.v v8, (a2)

        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        {name} v8, (a1);

        vsetvli t0, a4, e{ebits},m8,tu,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits} / 8)
      test_{num}_data:
        .fill (VLEN*8/{ebits}), ({ebits} / 8), 0;
        .popsection

    test_misalign_without_mask: |
      test_{num}:
        li t0, 4;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        addi a1, a1, {offset};
        la a3, test_{num}_data;
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        vsub.vv v8, v8, v8;
        {name} v8, (a1);
        li a4, {isExcept}
        beqz a4, 11f;
        j fail;
      11:
        vse{ebits}.v v8, (a3);
      test_{num}_end:
        .pushsection .data, 1;
        .balign ({ebits} / 8)
      test_{num}_data:
        .fill ({vl}), ({ebits} / 8), 0;
        .popsection
      

    test_regression_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;

        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        {name} v8, (a1);
        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

    test_vlm_regression_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;

        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        {name} v8, (a1);

        li a0, ({vl}+7)/8;
        vsetvli t0, a0, e{eew},m{lmul},ta,mu;
        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill (({vl}+7)/8), ({eew} / 8), 0;
        .popsection

    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        addi a1, a1, {offset};

        vsetvli t1, a0, e{ebits},m{lmul},ta,mu;
        vsub.vv v8, v8, v8;
        {name} v8, (a1), v0.t;

        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits} / 8)
      test_{num}_data:
        .fill ({vl}), ({ebits} / 8), 0;
        .popsection

    test_eew_gt_sew_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        {name} v8, (a1), v0.t;

        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection
    
    test_eew_lt_sew_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        {name} v8, (a1), v0.t;

        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

    test_vstart_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t1, a0, e{ebits},m{lmul},ta,mu;
        vsub.vv v8, v8, v8;
        li a2, {start};
        csrw vstart, a2;
        {name} v8, (a1), v0.t;

        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits} / 8)
      test_{num}_data:
        .fill ({vl}), ({ebits} / 8), 0;
        .popsection

    test_tu_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a2, {origin_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        li a4, VLEN*8/{ebits};
        vsetvli t0, a4, e{ebits},m8,tu,mu;
        vle{ebits}.v v8, (a2)

        vsetvli t1, a0, e{ebits},m{lmul},ta,mu;
        {name} v8, (a1), v0.t;

        vsetvli t0, a4, e{ebits},m8,tu,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits} / 8)
      test_{num}_data:
        .fill (VLEN*8/{ebits}), ({ebits} / 8), 0;
        .popsection

    test_misalign_with_mask: |
      test_{num}:
        li t0, 4;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        addi a1, a1, {offset};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t1, a0, e{ebits},m{lmul},ta,mu;
        vsub.vv v8, v8, v8;
        {name} v8, (a1), v0.t;
        li a4, {isExcept}
        beqz a4, 11f;
        j fail;
      11:
        vse{ebits}.v v8, (a3);
      test_{num}_end:
        .pushsection .data, 1;
        .balign ({ebits} / 8)
      test_{num}_data:
        .fill ({vl}), ({ebits} / 8), 0;
        .popsection
    
    test_regression_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        {name} v8, (a1), v0.t;

        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

    test_exception_misalign_lmul: |
      test_{num}:
        li t0, 2;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        la a1, {rs1_data}
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        {name} v3, (a1);
        j fail;
      test_{num}_end:

    test_exception_emul: |
      test_{num}:
        li t0, 2;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        la a1, {rs1_data}
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        {name} v8, (a1);
        j fail;
      test_{num}_end:

    test_exception_invalid_addr: |
      test_{num}:
        li t0, 5;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        li a1, {addr};
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        {name} v8, (a1);
        j fail;
      test_{num}_end:
      
  check:
    test_basic_without_mask: np.array_equal(result, golden)
    test_vlm_basic_without_mask: np.array_equal(result, golden)
    test_eew_gt_sew_without_mask: np.array_equal(result, golden)
    test_eew_lt_sew_without_mask: np.array_equal(result, golden)
    test_vlm_eew_lt_sew_without_mask: np.array_equal(result, golden)
    test_vstart_without_mask: np.array_equal(result, golden)
    test_vlm_vstart_without_mask: np.array_equal(result, golden)
    test_tu_without_mask: np.array_equal(result, golden)
    test_misalign_without_mask: np.array_equal(result, golden)
    test_regression_without_mask: np.array_equal(result, golden)
    test_vlm_regression_without_mask: np.array_equal(result, golden)
    test_basic_with_mask: np.array_equal(result, golden)
    test_eew_gt_sew_with_mask: np.array_equal(result, golden)
    test_eew_lt_sew_with_mask: np.array_equal(result, golden)
    test_vstart_with_mask: np.array_equal(result, golden)
    test_tu_with_mask: np.array_equal(result, golden)
    test_misalign_with_mask: np.array_equal(result, golden)
    test_regression_with_mask: np.array_equal(result, golden)

# vlm_v:
#   <<: *default
#   cases:
#     test_basic_without_mask :
#       matrix:
#         ebits: 8
#         lmul: 1
#         vl: vector_vl_list(lmul, ebits, vlen)
#         rs1: np.linspace(0, 0xFF, math.ceil(vl/8), dtype=np.uint8)


vle8_v:
  <<: *default

  cases:
    test_basic_without_mask @ rs1, vl, lmul @ ebits=8:
      - '[np.array([1],               dtype=np.int8), 1,      1 ]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,      1 ]'
      - '[np.linspace(0, 0xff, 15,    dtype=np.int8), 15,     1 ]'
      - '[np.linspace(0, 0xff, 16,    dtype=np.int8), 16,     1 ]'
      - '[np.linspace(0, 0xff, 17,    dtype=np.int8), 17,     1 ]'
      - '[np.linspace(0, 0xff, 31,    dtype=np.int8), 31,     1 ]'
      - '[np.linspace(0, 0xff, 32,    dtype=np.int8), 32,     1 ]'
      - '[np.linspace(0, 0xff, 33,    dtype=np.int8), 33,     1 ]'
      - '[np.linspace(0, 0xff, 63,    dtype=np.int8), 63,     1 ]'
      - '[np.linspace(0, 0xff, 64,    dtype=np.int8), 64,     1 ]'
      - '[np.linspace(0, 0xff, 65,    dtype=np.int8), 65,     1 ]'
      - '[np.linspace(0, 0xff, 127,   dtype=np.int8), 127,    1 ]'
      - '[np.linspace(0, 0xff, 128,   dtype=np.int8), 128,    1 ]'
      - '[np.linspace(0, 0xff, 33,    dtype=np.int8), 33,     2 ]'
      - '[np.linspace(0, 0xff, 129,   dtype=np.int8), 129,    2 ]'
      - '[np.linspace(0, 0xff, 255,   dtype=np.int8), 255,    2 ]'
      - '[np.linspace(0, 0xff, 256,   dtype=np.int8), 256,    2 ]'
      - '[np.linspace(0, 0xff, 4,     dtype=np.int8), 4,      4 ]'
      - '[np.linspace(0, 0xff, 127,   dtype=np.int8), 127,    4 ]'
      - '[np.linspace(0, 0xff, 257,   dtype=np.int8), 257,    4 ]'
      - '[np.linspace(0, 0xff, 511,   dtype=np.int8), 511,    4 ]'
      - '[np.linspace(0, 0xff, 512,   dtype=np.int8), 512,    4 ]'
      - '[np.linspace(0, 0xff, 513,   dtype=np.int8), 513,    8 ]'
      - '[np.linspace(0, 0xff, 1023,  dtype=np.int8), 1023,   8 ]'
      - '[np.linspace(0, 0xff, 1024,  dtype=np.int8), 1024,   8 ]'

      - '[np.array([1],               dtype=np.int8), 1,    "f2"]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,    "f2"]'
      - '[np.linspace(0, 0xff, 15,    dtype=np.int8), 15,   "f2"]'
      - '[np.linspace(0, 0xff, 16,    dtype=np.int8), 16,   "f2"]'
      - '[np.linspace(0, 0xff, 17,    dtype=np.int8), 17,   "f2"]'
      - '[np.linspace(0, 0xff, 31,    dtype=np.int8), 31,   "f2"]'
      - '[np.linspace(0, 0xff, 32,    dtype=np.int8), 32,   "f2"]'
      - '[np.linspace(0, 0xff, 33,    dtype=np.int8), 33,   "f2"]'
      - '[np.linspace(0, 0xff, 63,    dtype=np.int8), 63,   "f2"]'
      - '[np.linspace(0, 0xff, 64,    dtype=np.int8), 64,   "f2"]'

      - '[np.array([1],               dtype=np.int8), 1,    "f4"]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,    "f4"]'
      - '[np.linspace(0, 0xff, 15,    dtype=np.int8), 15,   "f4"]'
      - '[np.linspace(0, 0xff, 16,    dtype=np.int8), 16,   "f4"]'
      - '[np.linspace(0, 0xff, 17,    dtype=np.int8), 17,   "f4"]'
      - '[np.linspace(0, 0xff, 31,    dtype=np.int8), 31,   "f4"]'
      - '[np.linspace(0, 0xff, 32,    dtype=np.int8), 32,   "f4"]'

      - '[np.array([1],               dtype=np.int8), 1,    "f8"]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,    "f8"]'
      - '[np.linspace(0, 0xff, 15,    dtype=np.int8), 15,   "f8"]'
      - '[np.linspace(0, 0xff, 16,    dtype=np.int8), 16,   "f8"]'
    
    test_eew_lt_sew_without_mask @ rs1, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 8
        for i in range(4, 7):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, vl, dtype=bits_to_dtype_int(eew))
              params_yml.append([rs1, vl, lmul, sew, eew])
    
    test_tu_without_mask:
      matrix:
        ebits: 8
        lmul: [1, 2, 4, 8, 'f2', 'f4', 'f8']
        vl: vector_vl_list(lmul, ebits, vlen)
        origin: np.random.uniform(0, 0xFF, int(vlen*8/ebits)).astype(np.uint8)
        rs1: np.linspace(0, 0xFF, vl, dtype=np.uint8)
    
    test_regression_without_mask @ rs1, vl, lmul, sew, eew, start:
      setup: |
        params_yml = []
        eew = 8
        for i in np.random.uniform(3, 7, 2).astype(int):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls_random(lmul, sew, eew, vlen):
              for start in list(np.random.uniform(0, vl, int(vl/10)).astype(int)):
                rs1 = np.random.uniform(0, 0xFF, vl).astype(np.uint8)
                params_yml.append([rs1, vl, lmul, sew, eew, start])
    
    test_vstart_without_mask:
      matrix:
        ebits: 8
        lmul: [1, 2, 4, 8, 'f2', 'f4', 'f8']
        vl: vector_vl_list(lmul, ebits, vlen)
        start: vector_vstart_list_linspace(vl)
        rs1: np.linspace(0, 0xFF, vl, dtype=np.uint8)

    test_basic_with_mask @ rs1, vl, lmul, mask , offset @ ebits=8:
      - '[np.array([1],               dtype=np.int8), 1,      1 , np.array([0xa], dtype=np.uint8), 0]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,      1 , np.array([0x5], dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 15,    dtype=np.int8), 15,     1 , np.linspace(0x50, 0xff, 2,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 16,    dtype=np.int8), 16,     1 , np.linspace(0x50, 0xff, 2,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 17,    dtype=np.int8), 17,     1 , np.linspace(0x50, 0xff, 3,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 31,    dtype=np.int8), 31,     1 , np.linspace(0x50, 0xff, 4,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 32,    dtype=np.int8), 32,     1 , np.linspace(0x50, 0xff, 4,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 33,    dtype=np.int8), 33,     1 , np.linspace(0x50, 0xff, 5,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 63,    dtype=np.int8), 63,     1 , np.linspace(0x50, 0xff, 8,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 64,    dtype=np.int8), 64,     1 , np.linspace(0x50, 0xff, 8,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 65,    dtype=np.int8), 65,     1 , np.linspace(0x50, 0xff, 9,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 127,   dtype=np.int8), 127,    1 , np.linspace(0x50, 0xff, 16,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 128,   dtype=np.int8), 128,    1 , np.linspace(0x50, 0xff, 16,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 33,    dtype=np.int8), 33,     2 , np.linspace(0x50, 0xff, 5,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 129,   dtype=np.int8), 129,    2 , np.linspace(0x50, 0xff, 17,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 255,   dtype=np.int8), 255,    2 , np.linspace(0x50, 0xff, 32,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 256,   dtype=np.int8), 256,    2 , np.linspace(0x50, 0xff, 32,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 4,     dtype=np.int8), 4,      4 , np.linspace(0x50, 0xff, 1,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 257,   dtype=np.int8), 257,    4 , np.linspace(0x50, 0xff, 33,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 511,   dtype=np.int8), 511,    4 , np.linspace(0x50, 0xff, 64,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 512,   dtype=np.int8), 512,    4 , np.linspace(0x50, 0xff, 64,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 513,   dtype=np.int8), 513,    8 , np.linspace(0x50, 0xff, 65,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 1023,  dtype=np.int8), 1023,   8 , np.linspace(0x50, 0xff, 128, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 1024,  dtype=np.int8), 1024,   8 , np.linspace(0x50, 0xff, 128, dtype=np.uint8), 0]'

      - '[np.array([1],               dtype=np.int8), 1,    "f2", np.array([0xa], dtype=np.uint8), 0]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,    "f2", np.array([0x5], dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 15,    dtype=np.int8), 15,   "f2", np.linspace(0x50, 0xff, 2, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 16,    dtype=np.int8), 16,   "f2", np.linspace(0x50, 0xff, 2, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 17,    dtype=np.int8), 17,   "f2", np.linspace(0x50, 0xff, 3, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 31,    dtype=np.int8), 31,   "f2", np.linspace(0x50, 0xff, 4, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 32,    dtype=np.int8), 32,   "f2", np.linspace(0x50, 0xff, 4, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 33,    dtype=np.int8), 33,   "f2", np.linspace(0x50, 0xff, 5, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 63,    dtype=np.int8), 63,   "f2", np.linspace(0x50, 0xff, 8, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 64,    dtype=np.int8), 64,   "f2", np.linspace(0x50, 0xff, 8, dtype=np.uint8), 0]'

      - '[np.array([1],               dtype=np.int8), 1,    "f4", np.array([0xa], dtype=np.uint8), 0]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,    "f4", np.array([0x5], dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 15,    dtype=np.int8), 15,   "f4", np.linspace(0x50, 0xff, 2, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 16,    dtype=np.int8), 16,   "f4", np.linspace(0x50, 0xff, 2, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 17,    dtype=np.int8), 17,   "f4", np.linspace(0x50, 0xff, 3, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 31,    dtype=np.int8), 31,   "f4", np.linspace(0x50, 0xff, 4, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 32,    dtype=np.int8), 32,   "f4", np.linspace(0x50, 0xff, 4, dtype=np.uint8), 0]'

      - '[np.array([1],               dtype=np.int8), 1,    "f8", np.array([0xa], dtype=np.uint8), 0]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,    "f8", np.array([0x5], dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 15,    dtype=np.int8), 15,   "f8", np.linspace(0x50, 0xff, 2, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xff, 16,    dtype=np.int8), 16,   "f8", np.linspace(0x50, 0xff, 2, dtype=np.uint8), 0]'
    
    test_eew_lt_sew_with_mask @ rs1, mask, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 8
        for i in range(4, 7):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, vl, dtype=bits_to_dtype_int(eew))
              mask = vector_mask_array_random(vl)
              params_yml.append([rs1, mask, vl, lmul, sew, eew])

    test_vstart_with_mask:
      matrix:
        ebits: 8
        lmul: [1, 2, 4, 8, 'f2', 'f4', 'f8']
        vl: vector_vl_list(lmul, ebits, vlen)
        start: vector_vstart_list_linspace(vl)
        mask: vector_mask_array_random(vl)
        rs1: np.linspace(0, 0xFF, vl, dtype=np.uint8)
    
    test_tu_with_mask:
      matrix:
        ebits: 8
        lmul: [1, 2, 4, 8, 'f2', 'f4', 'f8']
        vl: vector_vl_list(lmul, ebits, vlen)
        mask: vector_mask_array_random(vl)
        origin: np.random.uniform(0, 0xFF, int(vlen*8/ebits)).astype(np.uint8)
        rs1: np.linspace(0, 0xFF, vl, dtype=np.uint8)

    test_regression_with_mask @ rs1, mask, vl, lmul, sew, eew, start:
      setup: |
        params_yml = []
        eew = 8
        for i in np.random.uniform(3, 7, 2).astype(int):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls_random(lmul, sew, eew, vlen):
              for start in list(np.unique(np.random.uniform(0, vl, int(vl/10)).astype(int))):
                rs1 = np.random.uniform(0, 0xFF, vl).astype(np.uint8)
                mask = vector_mask_array_random(vl)
                params_yml.append([rs1, mask, vl, lmul, sew, eew, start])

    test_exception_misalign_lmul @ rs1, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int8),    8,  8,    1,    4]'
      - '[np.array([1], dtype=np.int8),  128,  8,    1,    1]'
    
    test_exception_emul @ rs1, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int8),   32,  8,    1, "f4"]'

    test_exception_invalid_addr @ rs1, addr, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int8), 0xc0300000,   8,  8,    1,  1]'


vle16_v:
  <<: *default

  cases:
    test_basic_without_mask @ rs1, vl, lmul @ ebits=16 :
      - '[np.array([1],                 dtype=np.int16), 1,      1 ]'
      - '[np.array([1, 1, -1, 64],      dtype=np.int16), 4,      1 ]'
      - '[np.linspace(0, 0xffff, 15,    dtype=np.int16), 15,     1 ]'
      - '[np.linspace(0, 0xffff, 16,    dtype=np.int16), 16,     1 ]'
      - '[np.linspace(0, 0xffff, 17,    dtype=np.int16), 17,     1 ]'
      - '[np.linspace(0, 0xffff, 31,    dtype=np.int16), 31,     1 ]'
      - '[np.linspace(0, 0xffff, 32,    dtype=np.int16), 32,     1 ]'
      - '[np.linspace(0, 0xffff, 33,    dtype=np.int16), 33,     1 ]'
      - '[np.linspace(0, 0xffff, 63,    dtype=np.int16), 63,     1 ]'
      - '[np.linspace(0, 0xffff, 64,    dtype=np.int16), 64,     1 ]'
      - '[np.linspace(0, 0xffff, 33,    dtype=np.int16), 33,     2 ]'
      - '[np.linspace(0, 0xffff, 65,    dtype=np.int16), 65,     2 ]'
      - '[np.linspace(0, 0xffff, 127,   dtype=np.int16), 127,    2 ]'
      - '[np.linspace(0, 0xffff, 128,   dtype=np.int16), 128,    2 ]'
      - '[np.linspace(0, 0xffff, 4,     dtype=np.int16), 4,      4 ]'
      - '[np.linspace(0, 0xffff, 127,   dtype=np.int16), 127,    4 ]'
      - '[np.linspace(0, 0xffff, 129,   dtype=np.int16), 129,    4 ]'
      - '[np.linspace(0, 0xffff, 255,   dtype=np.int16), 255,    4 ]'
      - '[np.linspace(0, 0xffff, 256,   dtype=np.int16), 256,    4 ]'
      - '[np.linspace(0, 0xffff, 257,   dtype=np.int16), 257,    8 ]'
      - '[np.linspace(0, 0xffff, 511,   dtype=np.int16), 511,    8 ]'
      - '[np.linspace(0, 0xffff, 512,   dtype=np.int16), 512,    8 ]'
      

      - '[np.array([1],                 dtype=np.int16), 1,    "f2"]'
      - '[np.array([1, 1, -1, 64],      dtype=np.int16), 4,    "f2"]'
      - '[np.linspace(0, 0xffff, 15,    dtype=np.int16), 15,   "f2"]'
      - '[np.linspace(0, 0xffff, 16,    dtype=np.int16), 16,   "f2"]'
      - '[np.linspace(0, 0xffff, 17,    dtype=np.int16), 17,   "f2"]'
      - '[np.linspace(0, 0xffff, 31,    dtype=np.int16), 31,   "f2"]'
      - '[np.linspace(0, 0xffff, 32,    dtype=np.int16), 32,   "f2"]'

      - '[np.array([1],                 dtype=np.int16), 1,    "f4"]'
      - '[np.array([1, 1, -1, 64],      dtype=np.int16), 4,    "f4"]'
      - '[np.linspace(0, 0xffff, 15,    dtype=np.int16), 15,   "f4"]'
      - '[np.linspace(0, 0xffff, 16,    dtype=np.int16), 16,   "f4"]'
      # sew <= min(lmul, 1.0f) * ELEN, so no mf8 cases

    test_eew_gt_sew_without_mask @ rs1, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 16
        for i in range(3, 4):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, vl, dtype=bits_to_dtype_int(eew))
              params_yml.append([rs1, vl, lmul, sew, eew])
    
    test_eew_lt_sew_without_mask @ rs1, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 16
        for i in range(5, 7):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, vl, dtype=bits_to_dtype_int(eew))
              params_yml.append([rs1, vl, lmul, sew, eew])

    test_vstart_without_mask:
      matrix:
        ebits: 16
        lmul: [1, 2, 4, 8, 'f2', 'f4']
        vl: vector_vl_list(lmul, ebits, vlen)
        start: vector_vstart_list_linspace(vl)
        rs1: np.linspace(0, 0xFFFF, vl, dtype=np.uint16)
    
    test_tu_without_mask:
      matrix:
        ebits: 16
        lmul: [1, 2, 4, 8, 'f2', 'f4']
        vl: vector_vl_list(lmul, ebits, vlen)
        origin: np.random.uniform(0, 0xFFFF, int(vlen*8/ebits)).astype(np.uint16)
        rs1: np.linspace(0, 0xFFFF, vl, dtype=np.uint16)

    test_misalign_without_mask:
      matrix:
        isExcept: 1
        ebits: 16
        lmul: [1, 2, 4, 8, 'f2', 'f4']
        vl: vector_vl_list(lmul, ebits, vlen)
        offset: np.random.randint(1, int(ebits/8))
        rs1: np.linspace(0, 0xFFFF, vl, dtype=np.uint16)
    
    test_regression_without_mask @ rs1, vl, lmul, sew, eew, start:
      setup: |
        params_yml = []
        eew = 16
        for i in np.random.uniform(3, 7, 2).astype(int):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls_random(lmul, sew, eew, vlen):
              for start in list(np.random.uniform(0, vl, int(vl/10)).astype(int)):
                rs1 = np.random.uniform(0, 0xFFFF, vl).astype(np.uint16)
                params_yml.append([rs1, vl, lmul, sew, eew, start])

    test_basic_with_mask @ rs1, vl, lmul, mask, offset @ ebits=16 :
      - '[np.array([1],                 dtype=np.int16), 1,      1 , np.array([0x0], dtype=np.uint8), 1]'
      - '[np.array([1],                 dtype=np.int16), 1,      1 , np.array([0xa], dtype=np.uint8), 0]'
      - '[np.array([1, 1, -1, 64],      dtype=np.int16), 4,      1 , np.array([0x5], dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 15,    dtype=np.int16), 15,     1 , np.linspace(0x50, 0xff, 2,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 16,    dtype=np.int16), 16,     1 , np.linspace(0x50, 0xff, 2,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 17,    dtype=np.int16), 17,     1 , np.linspace(0x50, 0xff, 3,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 31,    dtype=np.int16), 31,     1 , np.linspace(0x50, 0xff, 4,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 32,    dtype=np.int16), 32,     1 , np.linspace(0x50, 0xff, 4,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 33,    dtype=np.int16), 33,     1 , np.linspace(0x50, 0xff, 5,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 63,    dtype=np.int16), 63,     1 , np.linspace(0x50, 0xff, 8,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 64,    dtype=np.int16), 64,     1 , np.linspace(0x50, 0xff, 8,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 33,    dtype=np.int16), 33,     2 , np.linspace(0x50, 0xff, 5,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 65,    dtype=np.int16), 65,     2 , np.linspace(0x50, 0xff, 9,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 127,   dtype=np.int16), 127,    2 , np.linspace(0x50, 0xff, 16,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 128,   dtype=np.int16), 128,    2 , np.linspace(0x50, 0xff, 16,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 127,   dtype=np.int16), 127,    4 , np.linspace(0x50, 0xff, 16,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 4,     dtype=np.int16), 4,      4 , np.linspace(0x50, 0xff, 1,   dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 129,   dtype=np.int16), 129,    4 , np.linspace(0x50, 0xff, 17,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 255,   dtype=np.int16), 255,    4 , np.linspace(0x50, 0xff, 32,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 256,   dtype=np.int16), 256,    4 , np.linspace(0x50, 0xff, 32,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 257,   dtype=np.int16), 257,    8 , np.linspace(0x50, 0xff, 33,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 511,   dtype=np.int16), 511,    8 , np.linspace(0x50, 0xff, 64,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 512,   dtype=np.int16), 512,    8 , np.linspace(0x50, 0xff, 64,  dtype=np.uint8), 0]'

      - '[np.array([1],                 dtype=np.int16), 1,    "f2", np.array([0xa], dtype=np.uint8), 0]'
      - '[np.array([1, 1, -1, 64],      dtype=np.int16), 4,    "f2", np.array([0x5], dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 15,    dtype=np.int16), 15,   "f2", np.linspace(0x50, 0xff, 2, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 16,    dtype=np.int16), 16,   "f2", np.linspace(0x50, 0xff, 2, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 17,    dtype=np.int16), 17,   "f2", np.linspace(0x50, 0xff, 3, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 31,    dtype=np.int16), 31,   "f2", np.linspace(0x50, 0xff, 8, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 32,    dtype=np.int16), 32,   "f2", np.linspace(0x50, 0xff, 8, dtype=np.uint8), 0]'

      - '[np.array([1],                 dtype=np.int16), 1,    "f4", np.array([0xa], dtype=np.uint8), 0]'
      - '[np.array([1, 1, -1, 64],      dtype=np.int16), 4,    "f4", np.array([0x5], dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 15,    dtype=np.int16), 15,   "f4", np.linspace(0x50, 0xff, 8, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffff, 16,    dtype=np.int16), 16,   "f4", np.linspace(0x50, 0xff, 8, dtype=np.uint8), 0]'
      # sew <= min(lmul, 1.0f) * ELEN, so no mf8 cases

    test_eew_gt_sew_with_mask @ rs1, mask, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 16
        for i in range(3, 4):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, vl, dtype=bits_to_dtype_int(eew))
              mask = vector_mask_array_random(vl)
              params_yml.append([rs1, mask, vl, lmul, sew, eew])
    
    test_eew_lt_sew_with_mask @ rs1, mask, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 16
        for i in range(5, 7):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, vl, dtype=bits_to_dtype_int(eew))
              mask = vector_mask_array_random(vl)
              params_yml.append([rs1, mask, vl, lmul, sew, eew])

    test_vstart_with_mask:
      matrix:
        ebits: 16
        lmul: [1, 2, 4, 8, 'f2', 'f4']
        vl: vector_vl_list(lmul, ebits, vlen)
        start: vector_vstart_list_linspace(vl)
        mask: vector_mask_array_random(vl)
        rs1: np.linspace(0, 0xFFFF, vl, dtype=np.uint16)
    
    test_tu_with_mask:
      matrix:
        ebits: 16
        lmul: [1, 2, 4, 8, 'f2', 'f4']
        vl: vector_vl_list(lmul, ebits, vlen)
        mask: vector_mask_array_random(vl)
        origin: np.random.uniform(0, 0xFFFF, int(vlen*8/ebits)).astype(np.uint16)
        rs1: np.linspace(0, 0xFFFF, vl, dtype=np.uint16)

    test_misalign_with_mask:
      matrix:
        isExcept: 1
        ebits: 16
        lmul: [1, 2, 4, 8, 'f2', 'f4']
        vl: vector_vl_list(lmul, ebits, vlen)
        mask: vector_mask_array_random(vl)*2+1
        offset: np.random.randint(1, int(ebits/8))
        rs1: np.linspace(0, 0xFFFF, vl, dtype=np.uint16)

    test_regression_with_mask @ rs1, mask, vl, lmul, sew, eew, start:
      setup: |
        params_yml = []
        eew = 16
        for i in np.random.uniform(3, 7, 2).astype(int):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls_random(lmul, sew, eew, vlen):
              for start in list(np.unique(np.random.uniform(0, vl, int(vl/10)).astype(int))):
                rs1 = np.random.uniform(0, 0xFFFF, vl).astype(np.uint16)
                mask = vector_mask_array_random(vl)
                params_yml.append([rs1, mask, vl, lmul, sew, eew, start])

    test_exception_misalign_lmul @ rs1, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int16),    8,  16,    1,    4]'
      - '[np.array([1], dtype=np.int16),  128,  16,    1,    1]'
    
    test_exception_emul @ rs1, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int16),    8,  16,    1,    8]'
      - '[np.array([1], dtype=np.int16),   32,  16,    1, "f8"]'

    test_exception_invalid_addr @ rs1, addr, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int16), 0xc0300000,   8,  16,    1,  1]'

vle32_v:

  <<: *default

  cases:
    test_basic_without_mask @ rs1, vl, lmul @ ebits=32:
      - '[np.array([1], dtype=np.int32),                     1,      1 ]'
      - '[np.array([1, 1, -1, 64], dtype=np.int32),          4,      1 ]'
      - '[np.linspace(0, 0xffffffff, 15,    dtype=np.int32), 15,     1 ]'
      - '[np.linspace(0, 0xffffffff, 16,    dtype=np.int32), 16,     1 ]'
      - '[np.linspace(0, 0xffffffff, 17,    dtype=np.int32), 17,     1 ]'
      - '[np.linspace(0, 0xffffffff, 31,    dtype=np.int32), 31,     1 ]'
      - '[np.linspace(0, 0xffffffff, 32,    dtype=np.int32), 32,     1 ]'
      - '[np.linspace(0, 0xffffffff, 33,    dtype=np.int32), 33,     2 ]'
      - '[np.linspace(0, 0xffffffff, 63,    dtype=np.int32), 63,     2 ]'
      - '[np.linspace(0, 0xffffffff, 64,    dtype=np.int32), 64,     2 ]'
      - '[np.linspace(0, 0xffffffff, 4,     dtype=np.int32), 4,      4 ]'
      - '[np.linspace(0, 0xffffffff, 65,    dtype=np.int32), 65,     4 ]'
      - '[np.linspace(0, 0xffffffff, 127,   dtype=np.int32), 127,    4 ]'
      - '[np.linspace(0, 0xffffffff, 128,   dtype=np.int32), 128,    4 ]'
      - '[np.linspace(0, 0xffffffff, 129,   dtype=np.int32), 129,    8 ]'
      - '[np.linspace(0, 0xffffffff, 255,   dtype=np.int32), 255,    8 ]'
      - '[np.linspace(0, 0xffffffff, 256,   dtype=np.int32), 256,    8 ]'

      - '[np.array([1], dtype=np.int32),                     1,    "f2"]'
      - '[np.array([1, 1, -1, 64], dtype=np.int32),          4,    "f2"]'
      - '[np.linspace(0, 0xffffffff, 15,    dtype=np.int32), 15,   "f2"]'
      - '[np.linspace(0, 0xffffffff, 16,    dtype=np.int32), 16,   "f2"]'
    
    test_eew_gt_sew_without_mask @ rs1, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 32
        for i in range(3, 5):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, vl, dtype=bits_to_dtype_int(eew))
              params_yml.append([rs1, vl, lmul, sew, eew])
    
    test_eew_lt_sew_without_mask @ rs1, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 32
        for i in range(6, 7):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, vl, dtype=bits_to_dtype_int(eew))
              params_yml.append([rs1, vl, lmul, sew, eew])

    test_vstart_without_mask:
      matrix:
        ebits: 32
        lmul: [1, 2, 4, 8, 'f2']
        vl: vector_vl_list(lmul, ebits, vlen)
        start: vector_vstart_list_linspace(vl)
        rs1: np.linspace(0, 0xFFFFFFFF, vl, dtype=np.uint32)

    test_tu_without_mask:
      matrix:
        ebits: 32
        lmul: [1, 2, 4, 8, 'f2']
        vl: vector_vl_list(lmul, ebits, vlen)
        origin: np.random.uniform(0, 0xFFFFFFFF, int(vlen*8/ebits)).astype(np.uint32)
        rs1: np.linspace(0, 0xFFFFFFFF, vl, dtype=np.uint32)

    test_misalign_without_mask:
      matrix:
        isExcept: 1
        ebits: 32
        lmul: [1, 2, 4, 8, 'f2']
        vl: vector_vl_list(lmul, ebits, vlen)
        offset: np.random.randint(1, int(ebits/8))
        rs1: np.linspace(0, 0xFFFFFFFF, vl, dtype=np.uint32)
    
    test_regression_without_mask @ rs1, vl, lmul, sew, eew, start:
      setup: |
        params_yml = []
        eew = 32
        for i in np.random.uniform(3, 7, 2).astype(int):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls_random(lmul, sew, eew, vlen):
              for start in list(np.random.uniform(0, vl, int(vl/10)).astype(int)):
                rs1 = np.random.uniform(0, 0xFFFFFFFF, vl).astype(np.uint32)
                params_yml.append([rs1, vl, lmul, sew, eew, start])
  

    test_basic_with_mask @ rs1, vl, lmul, mask, offset @ ebits=32 :
      - '[np.array([1],                     dtype=np.int32), 1,      1 , np.array([0x0], dtype=np.uint8), 1]'
      - '[np.array([1],                     dtype=np.int32), 1,      1 , np.array([0xa], dtype=np.uint8), 0]'
      - '[np.array([1, 1, -1, 64],          dtype=np.int32), 4,      1 , np.array([0x5], dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 15,    dtype=np.int32), 15,     1 , np.linspace(0x50, 0xff, 2,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 16,    dtype=np.int32), 16,     1 , np.linspace(0x50, 0xff, 2,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 17,    dtype=np.int32), 17,     1 , np.linspace(0x50, 0xff, 3,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 31,    dtype=np.int32), 31,     1 , np.linspace(0x50, 0xff, 4,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 32,    dtype=np.int32), 32,     1 , np.linspace(0x50, 0xff, 4,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 33,    dtype=np.int32), 33,     2 , np.linspace(0x50, 0xff, 5,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 63,    dtype=np.int32), 63,     2 , np.linspace(0x50, 0xff, 8,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 64,    dtype=np.int32), 64,     2 , np.linspace(0x50, 0xff, 8,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 4,     dtype=np.int32), 4,      4 , np.linspace(0x50, 0xff, 1,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 65,    dtype=np.int32), 65,     4 , np.linspace(0x50, 0xff, 9,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 127,   dtype=np.int32), 127,    4 , np.linspace(0x50, 0xff, 16, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 128,   dtype=np.int32), 128,    4 , np.linspace(0x50, 0xff, 16, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 129,   dtype=np.int32), 129,    8 , np.linspace(0x50, 0xff, 17, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 255,   dtype=np.int32), 255,    8 , np.linspace(0x50, 0xff, 32, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 256,   dtype=np.int32), 256,    8 , np.linspace(0x50, 0xff, 32, dtype=np.uint8), 0]'

      - '[np.array([1],                     dtype=np.int32), 1,    "f2", np.array([0xa], dtype=np.uint8), 0]'
      - '[np.array([1, 1, -1, 64],          dtype=np.int32), 4,    "f2", np.array([0x5], dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 15,    dtype=np.int32), 15,   "f2", np.linspace(0x50, 0xff, 2, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffff, 16,    dtype=np.int32), 16,   "f2", np.linspace(0x50, 0xff, 2, dtype=np.uint8), 0]'

    test_eew_gt_sew_with_mask @ rs1, mask, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 32
        for i in range(3, 5):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, vl, dtype=bits_to_dtype_int(eew))
              mask = vector_mask_array_random(vl)
              params_yml.append([rs1, mask, vl, lmul, sew, eew])
    
    test_eew_lt_sew_with_mask @ rs1, mask, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 32
        for i in range(6, 7):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, vl, dtype=bits_to_dtype_int(eew))
              mask = vector_mask_array_random(vl)
              params_yml.append([rs1, mask, vl, lmul, sew, eew])

    test_vstart_with_mask:
      matrix:
        ebits: 32
        lmul: [1, 2, 4, 8, 'f2']
        vl: vector_vl_list(lmul, ebits, vlen)
        start: vector_vstart_list_linspace(vl)
        mask: vector_mask_array_random(vl)
        rs1: np.linspace(0, 0xFFFFFFFF, vl, dtype=np.uint32)
    
    test_tu_with_mask:
      matrix:
        ebits: 32
        lmul: [1, 2, 4, 8, 'f2']
        vl: vector_vl_list(lmul, ebits, vlen)
        mask: vector_mask_array_random(vl)
        origin: np.random.uniform(0, 0xFFFFFFFF, int(vlen*8/ebits)).astype(np.uint32)
        rs1: np.linspace(0, 0xFFFFFFFF, vl, dtype=np.uint32)

    test_misalign_with_mask:
      matrix:
        isExcept: 1
        ebits: 32
        lmul: [1, 2, 4, 8, 'f2']
        vl: vector_vl_list(lmul, ebits, vlen)
        mask: vector_mask_array_random(vl)*2+1
        offset: np.random.randint(1, int(ebits/8))
        rs1: np.linspace(0, 0xFFFFFFFF, vl, dtype=np.uint32)

    test_regression_with_mask @ rs1, mask, vl, lmul, sew, eew, start:
      setup: |
        params_yml = []
        eew = 32
        for i in np.random.uniform(3, 7, 2).astype(int):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls_random(lmul, sew, eew, vlen):
              for start in list(np.unique(np.random.uniform(0, vl, int(vl/10)).astype(int))):
                rs1 = np.random.uniform(0, 0xFFFFFFFF, vl).astype(np.uint32)
                mask = vector_mask_array_random(vl)
                params_yml.append([rs1, mask, vl, lmul, sew, eew, start])

    test_exception_misalign_lmul @ rs1, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int32),    8,  32,    1,    4]'
      - '[np.array([1], dtype=np.int32),  128,  32,    1,    1]'
    
    test_exception_emul @ rs1, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int32),    8,  32,    1,    8]'
      - '[np.array([1], dtype=np.int32),   64,  32,    1, "f8"]'

    test_exception_invalid_addr @ rs1, addr, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int32), 0xc0300000,   8,  16,    1,  1]'

vle64_v:

  <<: *default

  cases:
    test_basic_without_mask@ rs1, vl, lmul @ ebits=64:
      - '[np.array([1], dtype=np.int64), 1, 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int64), 4, 1]'
      - '[np.linspace(0, 0xffffffffffffffff, 15,    dtype=np.int64), 15,     1 ]'
      - '[np.linspace(0, 0xffffffffffffffff, 16,    dtype=np.int64), 16,     1 ]'
      - '[np.linspace(0, 0xffffffffffffffff, 17,    dtype=np.int64), 17,     2 ]'
      - '[np.linspace(0, 0xffffffffffffffff, 31,    dtype=np.int64), 31,     2 ]'
      - '[np.linspace(0, 0xffffffffffffffff, 32,    dtype=np.int64), 32,     2 ]'
      - '[np.linspace(0, 0xffffffffffffffff, 4,     dtype=np.int64), 4,      4 ]'
      - '[np.linspace(0, 0xffffffffffffffff, 33,    dtype=np.int64), 33,     4 ]'
      - '[np.linspace(0, 0xffffffffffffffff, 63,    dtype=np.int64), 63,     4 ]'
      - '[np.linspace(0, 0xffffffffffffffff, 64,    dtype=np.int64), 64,     4 ]'
      - '[np.linspace(0, 0xffffffffffffffff, 65,    dtype=np.int64), 65,     8 ]'
      - '[np.linspace(0, 0xffffffffffffffff, 127,   dtype=np.int64), 127,    8 ]'
      - '[np.linspace(0, 0xffffffffffffffff, 128,   dtype=np.int64), 128,    8 ]'
    
    test_eew_gt_sew_without_mask @ rs1, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 64
        for i in range(3, 6):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, vl, dtype=bits_to_dtype_int(eew))
              params_yml.append([rs1, vl, lmul, sew, eew])

    test_vstart_without_mask:
      matrix:
        ebits: 64
        lmul: [1, 2, 4, 8]
        vl: vector_vl_list(lmul, ebits, vlen)
        start: vector_vstart_list_linspace(vl)
        rs1: np.linspace(0, 0xFFFFFFFFFFFF, vl, dtype=np.uint64)

    test_tu_without_mask:
      matrix:
        ebits: 64
        lmul: [1, 2, 4, 8]
        vl: vector_vl_list(lmul, ebits, vlen)
        origin: np.random.uniform(0, 0xFFFFFFFFFFFF, int(vlen*8/ebits)).astype(np.uint64)
        rs1: np.linspace(0, 0xFFFFFFFFFFFF, vl, dtype=np.uint64)

    test_misalign_without_mask:
      matrix:
        isExcept: 1
        ebits: 64
        lmul: [1, 2, 4, 8]
        vl: vector_vl_list(lmul, ebits, vlen)
        offset: np.random.randint(1, int(ebits/8))
        rs1: np.linspace(0, 0xFFFFFFFFFFFF, vl, dtype=np.uint64)
    
    test_regression_without_mask @ rs1, vl, lmul, sew, eew, start:
      setup: |
        params_yml = []
        eew = 64
        for i in np.random.uniform(3, 7, 2).astype(int):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls_random(lmul, sew, eew, vlen):
              for start in list(np.random.uniform(0, vl, int(vl/10)).astype(int)):
                rs1 = np.random.uniform(0, 0xFFFFFFFFFFFF, vl).astype(np.uint64)
                params_yml.append([rs1, vl, lmul, sew, eew, start])


    test_basic_with_mask @ rs1, vl, lmul, mask, offset @ ebits=64 :
      - '[np.array([1],                             dtype=np.int64), 1,      1, np.array([0x0], dtype=np.uint8), 1]'
      - '[np.array([1],                             dtype=np.int64), 1,      1, np.array([0xa], dtype=np.uint8), 0]'
      - '[np.array([1, 1, -1, 64],                  dtype=np.int64), 4,      1, np.array([0x5], dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffffffffffff, 15,    dtype=np.int64), 15,     1, np.array([0x5a, 0x55], dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffffffffffff, 16,    dtype=np.int64), 16,     1, np.array([0x55, 0xaa], dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffffffffffff, 17,    dtype=np.int64), 17,     2, np.linspace(0x50, 0xff, 3,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffffffffffff, 31,    dtype=np.int64), 31,     2, np.linspace(0x50, 0xff, 4,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffffffffffff, 32,    dtype=np.int64), 32,     2, np.linspace(0x50, 0xff, 4,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffffffffffff, 4,     dtype=np.int64), 4,      4, np.linspace(0x50, 0xff, 1,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffffffffffff, 33,    dtype=np.int64), 33,     4, np.linspace(0x50, 0xff, 5,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffffffffffff, 63,    dtype=np.int64), 63,     4, np.linspace(0x50, 0xff, 8,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffffffffffff, 64,    dtype=np.int64), 64,     4, np.linspace(0x50, 0xff, 8,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffffffffffff, 65,    dtype=np.int64), 65,     8, np.linspace(0x50, 0xff, 9,  dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffffffffffff, 127,   dtype=np.int64), 127,    8, np.linspace(0x50, 0xff, 16, dtype=np.uint8), 0]'
      - '[np.linspace(0, 0xffffffffffffffff, 128,   dtype=np.int64), 128,    8, np.linspace(0x50, 0xff, 16, dtype=np.uint8), 0]'

    test_eew_gt_sew_with_mask @ rs1, mask, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 64
        for i in range(3, 6):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, vl, dtype=bits_to_dtype_int(eew))
              mask = vector_mask_array_random(vl)
              params_yml.append([rs1, mask, vl, lmul, sew, eew])
  

    test_vstart_with_mask:
      matrix:
        ebits: 64
        lmul: [1, 2, 4, 8]
        vl: vector_vl_list(lmul, ebits, vlen)
        start: vector_vstart_list_linspace(vl)
        mask: vector_mask_array_random(vl)
        rs1: np.linspace(0, 0xFFFFFFFFFFFF, vl, dtype=np.uint64)
    
    test_tu_with_mask:
      matrix:
        ebits: 64
        lmul: [1, 2, 4, 8]
        vl: vector_vl_list(lmul, ebits, vlen)
        mask: vector_mask_array_random(vl)
        origin: np.random.uniform(0, 0xFFFFFFFFFFFF, int(vlen*8/ebits)).astype(np.uint64)
        rs1: np.linspace(0, 0xFFFFFFFFFFFF, vl, dtype=np.uint64)

    test_misalign_with_mask:
      matrix:
        isExcept: 1
        ebits: 64
        lmul: [1, 2, 4, 8]
        vl: vector_vl_list(lmul, ebits, vlen)
        mask: vector_mask_array_random(vl)*2+1
        offset: np.random.randint(1, int(ebits/8))
        rs1: np.linspace(0, 0xFFFFFFFFFFFF, vl, dtype=np.uint64)

    test_regression_with_mask @ rs1, mask, vl, lmul, sew, eew, start:
      setup: |
        params_yml = []
        eew = 64
        for i in np.random.uniform(3, 7, 2).astype(int):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls_random(lmul, sew, eew, vlen):
              for start in list(np.unique(np.random.uniform(0, vl, int(vl/10)).astype(int))):
                rs1 = np.random.uniform(0, 0xFFFFFFFFFFFF, vl).astype(np.uint64)
                mask = vector_mask_array_random(vl)
                params_yml.append([rs1, mask, vl, lmul, sew, eew, start])

    test_exception_misalign_lmul @ rs1, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int64),    8,  64,    1,    4]'
      - '[np.array([1], dtype=np.int64),  128,  64,    1,    1]'
    
    test_exception_emul @ rs1, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int64),    8,  64,    1,    8]'

    test_exception_invalid_addr @ rs1, addr, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int64), 0xc0300000,   8,  64,    1,  1]'



vle1_v:
  <<: *default

  cases:
    test_vlm_basic_without_mask @ rs1, vl, lmul @ ebits=8:
      - '[np.array([1],               dtype=np.uint8), 1,      1 ]'
      - '[np.array([0xC],             dtype=np.uint8), 4,      1 ]'
      - '[np.linspace(0, 0xff, 2,     dtype=np.uint8), 15,     1 ]'
      - '[np.linspace(0, 0xff, 2,     dtype=np.uint8), 16,     1 ]'
      - '[np.linspace(0, 0xff, 3,     dtype=np.uint8), 17,     1 ]'
      - '[np.linspace(0, 0xff, 4,     dtype=np.uint8), 31,     1 ]'
      - '[np.linspace(0, 0xff, 4,     dtype=np.uint8), 32,     1 ]'
      - '[np.linspace(0, 0xff, 5,     dtype=np.uint8), 33,     1 ]'
      - '[np.linspace(0, 0xff, 8,     dtype=np.uint8), 63,     1 ]'
      - '[np.linspace(0, 0xff, 8,     dtype=np.uint8), 64,     1 ]'
      - '[np.linspace(0, 0xff, 9,     dtype=np.uint8), 65,     1 ]'
      - '[np.linspace(0, 0xff, 16,    dtype=np.uint8), 127,    1 ]'
      - '[np.linspace(0, 0xff, 16,    dtype=np.uint8), 128,    1 ]'
      - '[np.linspace(0, 0xff, 17,    dtype=np.uint8), 129,    2 ]'
      - '[np.linspace(0, 0xff, 32,    dtype=np.uint8), 255,    2 ]'
      - '[np.linspace(0, 0xff, 32,    dtype=np.uint8), 256,    2 ]'
      - '[np.linspace(0, 0xff, 33,    dtype=np.uint8), 257,    4 ]'
      - '[np.linspace(0, 0xff, 64,    dtype=np.uint8), 511,    4 ]'
      - '[np.linspace(0, 0xff, 64,    dtype=np.uint8), 512,    4 ]'
      - '[np.linspace(0, 0xff, 65,    dtype=np.uint8), 513,    8 ]'
      - '[np.linspace(0, 0xff, 128,   dtype=np.uint8), 1023,   8 ]'
      - '[np.linspace(0, 0xff, 128,   dtype=np.uint8), 1024,   8 ]'

      - '[np.array([1],               dtype=np.uint8), 1,    "f2"]'
      - '[np.array([0xA],             dtype=np.uint8), 4,    "f2"]'
      - '[np.linspace(0, 0xff, 2,     dtype=np.uint8), 15,   "f2"]'
      - '[np.linspace(0, 0xff, 2,     dtype=np.uint8), 16,   "f2"]'
      - '[np.linspace(0, 0xff, 3,     dtype=np.uint8), 17,   "f2"]'
      - '[np.linspace(0, 0xff, 4,     dtype=np.uint8), 31,   "f2"]'
      - '[np.linspace(0, 0xff, 4,     dtype=np.uint8), 32,   "f2"]'
      - '[np.linspace(0, 0xff, 5,     dtype=np.uint8), 33,   "f2"]'
      - '[np.linspace(0, 0xff, 8,     dtype=np.uint8), 63,   "f2"]'
      - '[np.linspace(0, 0xff, 8,     dtype=np.uint8), 64,   "f2"]'

      - '[np.array([1],               dtype=np.uint8), 1,    "f4"]'
      - '[np.array([0xA],             dtype=np.uint8), 4,    "f4"]'
      - '[np.linspace(0, 0xff, 2,     dtype=np.uint8), 15,   "f4"]'
      - '[np.linspace(0, 0xff, 2,     dtype=np.uint8), 16,   "f4"]'
      - '[np.linspace(0, 0xff, 3,     dtype=np.uint8), 17,   "f4"]'
      - '[np.linspace(0, 0xff, 4,     dtype=np.uint8), 31,   "f4"]'
      - '[np.linspace(0, 0xff, 4,     dtype=np.uint8), 32,   "f4"]'

      - '[np.array([1],               dtype=np.uint8), 1,    "f8"]'
      - '[np.array([0xF],             dtype=np.uint8), 4,    "f8"]'
      - '[np.linspace(0, 0xff, 2,     dtype=np.uint8), 15,   "f8"]'
      - '[np.linspace(0, 0xff, 2,     dtype=np.uint8), 16,   "f8"]'

    test_vlm_vstart_without_mask:
      matrix:
        ebits: 8
        lmul: [1, 2, 4, 8, 'f2', 'f4', 'f8']
        vl: vector_vl_list(lmul, ebits, vlen)
        start: vector_vstart_list_linspace(math.ceil(vl/8))
        rs1: np.linspace(0, 0xFF, math.ceil(vl/8), dtype=np.uint8)
    
    test_vlm_eew_lt_sew_without_mask @ rs1, vl, lmul, sew, eew:
      setup: |
        params_yml=[]
        eew = 8
        for i in range(4, 7):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls(lmul, sew, eew, vlen):
              rs1 = np.linspace(-10000, 10000, math.ceil(vl/8), dtype=bits_to_dtype_int(eew))
              params_yml.append([rs1, vl, lmul, sew, eew])

    test_vlm_regression_without_mask @ rs1, vl, lmul, sew, eew, start:
      setup: |
        params_yml = []
        eew = 8
        for i in np.random.uniform(3, 7, 2).astype(int):
          sew = 2**i
          for lmul in vector_lmul_list((sew, eew)):
            for vl in vector_vl_list_ls_random(lmul, sew, eew, vlen):
              for start in list(np.random.uniform(0, vl, int(math.ceil(vl/8)/10)).astype(int)):
                rs1 = np.random.uniform(0, 0xFF, math.ceil(vl/8)).astype(np.uint8)
                params_yml.append([rs1, vl, lmul, sew, eew, start])

    test_exception_misalign_lmul @ rs1, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int8),  128,  8,    1,    1]'
    
    test_exception_emul @ rs1, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int8),   32,  8,    1, "f4"]'

    test_exception_invalid_addr @ rs1, addr, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int8), 0xc0300000,   8,  8,    1,  1]'
