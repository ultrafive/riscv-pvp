_: &default
  env: RVTEST_RV64UV
  head: |
    #define TOP_ADDR 0xc0200000
    #undef EXTRA_INIT
    #define EXTRA_INIT                               \
      /* Set up a PMP to permit all accesses */      \
      li t0, TOP_ADDR;                       \
      srli t0, t0, 2;                                \
      csrw pmpaddr0, t0;                             \
      li t0, PMP_TOR | PMP_R | PMP_W | PMP_X;        \
      csrw pmpcfg0, t0;                               
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{eew}ff.v v8, (a1);
        vse{eew}.v v8, (a3);

        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

    test_eew_neq_sew_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{eew}ff.v v8, (a1);
        vse{eew}.v v8, (a3);

        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

    test_vstart_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{eew}ff.v v8, (a1);
        li a2, {start};
        csrw vstart, a2;
        vse{eew}.v v8, (a3);

        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection
    
    test_tu_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a2, {origin_data};
        la a3, test_{num}_data;

        li a4, VLEN*8/{eew};
        vsetvli t0, a4, e{eew},m8,tu,mu;
        vle{eew}.v v8, (a2)

        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        vle{eew}ff.v v8, (a1);

        vsetvli t0, a4, e{eew},m8,tu,mu;
        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_misalign_without_mask: |
      test_{num}:
        li t0, 4;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        addi a1, a1, {offset};
        la a3, test_{num}_data;
        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vsub.vv v8, v8, v8;
        vle{eew}ff.v v8, (a1);
        li a4, {isExcept}
        beqz a4, 11f;
        j fail;
      11:
        vse{eew}.v v8, (a3);
      test_{num}_end:
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection
      

    test_regression_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;

        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        vle{eew}ff.v v8, (a1);
        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        vle{eew}ff.v v8, (a1), v0.t;

        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

    test_eew_neq_sew_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        vle{eew}ff.v v8, (a1), v0.t;

        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

    test_vstart_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        vle{eew}ff.v v8, (a1), v0.t;

        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

    test_tu_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a2, {origin_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        li a4, VLEN*8/{eew};
        vsetvli t0, a4, e{eew},m8,tu,mu;
        vle{eew}.v v8, (a2)

        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        vle{eew}ff.v v8, (a1), v0.t;

        vsetvli t0, a4, e{eew},m8,tu,mu;
        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_misalign_with_mask: |
      test_{num}:
        li t0, 4;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        addi a1, a1, {offset};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        vsub.vv v8, v8, v8;
        vle{eew}ff.v v8, (a1), v0.t;
        li a4, {isExcept}
        beqz a4, 11f;
        j fail;
      11:
        vse{eew}.v v8, (a3);
      test_{num}_end:
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection
    
    test_regression_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        vle{eew}ff.v v8, (a1), v0.t;

        vse{eew}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

    test_exception_misalign_lmul: |
      test_{num}:
        li t0, 2;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        la a1, {rs1_data}
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        vle{eew}ff.v v3, (a1);
        j fail;
      test_{num}_end:

    test_exception_emul: |
      test_{num}:
        li t0, 2;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        la a1, {rs1_data}
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        vle{eew}ff.v v8, (a1);
        j fail;
      test_{num}_end:

    test_exception_Fault_First: |
      test_{num}:
        li t0, 5;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        li a1, {addr};
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        vle{eew}ff.v v8, (a1);
        j fail;
      test_{num}_end:
      
    test_exception_Fault_Not_First: |
      test_{num}:
        li TESTNUM, {num};

        la a0, {rs1_data}
        li a1, TOP_ADDR - {nvl}*{eew}/8
        li a2, {nvl}*{eew}/8
      11:
        lb a3, (a0)
        sb a3, (a1)
        addi a0, a0, 1
        addi a1, a1, 1
        addi a2, a2, -1
        bnez a2, 11b;

        li a0, {vl};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, TOP_ADDR - {nvl}*{eew}/8
        vle{eew}ff.v v8, (a1);
        csrr a2, vl;
        li a3, {nvl};
        bne a2, a3, fail;

        la a1, test_{num}_data;
        li a2, {vl};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vse{eew}.v v8, (a1);

        .pushsection .data, 1;
        .balign ({eew} / 8)
      test_{num}_data:
        .fill ({vl}), ({eew} / 8), 0;
        .popsection

  check:
    test_basic_without_mask: np.array_equal(result, golden)
    test_eew_neq_sew_without_mask: np.array_equal(result, golden)
    test_vstart_without_mask: np.array_equal(result, golden)
    test_tu_without_mask: np.array_equal(result, golden)
    test_misalign_without_mask: np.array_equal(result, golden)
    test_regression_without_mask: np.array_equal(result, golden)
    test_basic_with_mask: np.array_equal(result, golden)
    test_eew_neq_sew_with_mask: np.array_equal(result, golden)
    test_vstart_with_mask: np.array_equal(result, golden)
    test_tu_with_mask: np.array_equal(result, golden)
    test_misalign_with_mask: np.array_equal(result, golden)
    test_regression_with_mask: np.array_equal(result, golden)
    test_exception_Fault_Not_First: np.array_equal(result, golden)

vlexff_v:
  <<: *default
  cases:
    test_basic_without_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls(lmul, sew, eew, vlen)
        rs1: np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_eew_neq_sew_without_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: vector_sew_list_neq_eew(eew)
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls(lmul, sew, eew, vlen)
        rs1: np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_vstart_without_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls(lmul, sew, eew, vlen)
        start: vector_vstart_list_linspace(vl)
        rs1: np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_tu_without_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls(lmul, sew, eew, vlen)
        origin: np.random.uniform(0, 2**eew, int(VLEN*8/eew)).astype(bits_to_dtype_uint(eew))
        rs1: np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_misalign_without_mask:
      matrix:
        isExcept: 1
        eew: [16, 32, 64]
        sew: eew
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls(lmul, sew, eew, vlen)
        offset: np.random.randint(1, int(eew/8))
        rs1: np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_regression_without_mask:
      matrix:
        matrix:
        eew: [8, 16, 32, 64]
        sew: list(2**np.random.uniform(3, 7, 2).astype(int))
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls_random(lmul, sew, eew, vlen)
        start: vector_vstart_list_random(vl)
        rs1: np.random.uniform(0, 2**eew, vl).astype(bits_to_dtype_uint(eew))

    test_basic_with_mask:
      matrix:
        eew: 8
        sew: 8
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls(lmul, sew, eew, vlen)
        mask: vector_mask_array_random(vl)
        rs1: np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_eew_neq_sew_with_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: vector_sew_list_neq_eew(eew)
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls(lmul, sew, eew, vlen)
        mask: vector_mask_array_random(vl)
        rs1: np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_vstart_with_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls(lmul, sew, eew, vlen)
        start: vector_vstart_list_linspace(vl)
        mask: vector_mask_array_random(vl)
        rs1: np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_tu_with_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls(lmul, sew, eew, vlen)
        origin: np.random.uniform(0, 2**eew, int(VLEN*8/eew)).astype(bits_to_dtype_uint(eew))
        mask: vector_mask_array_random(vl)
        rs1: np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_misalign_with_mask:
      matrix:
        isExcept: 1
        eew: [16, 32, 64]
        sew: eew
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls(lmul, sew, eew, vlen)
        offset: np.random.randint(1, int(eew/8))
        mask: vector_mask_array_random(vl)*2+1
        rs1: np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_regression_with_mask:
      matrix:
        matrix:
        eew: [8, 16, 32, 64]
        sew: list(2**np.random.uniform(3, 7, 2).astype(int))
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls_random(lmul, sew, eew, vlen)
        start: vector_vstart_list_random(vl)
        mask: vector_mask_array_random(vl)
        rs1: np.random.uniform(0, 2**eew, vl).astype(bits_to_dtype_uint(eew))



    test_exception_misalign_lmul @ rs1, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int8),    8,  8,    1,    4]'
      - '[np.array([1], dtype=np.int8),  128,  8,    1,    1]'
    
    test_exception_emul @ rs1, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int8),   32,  8,    1, "f4"]'
      - '[np.array([1], dtype=np.int32),   8, 32,    1,    4]'

    test_exception_Fault_First @ rs1, addr, sew, eew, vl, lmul:
      - '[np.array([1], dtype=np.int8), 0xc0300000,   8,  8,    1,  1]'

    test_exception_Fault_Not_First:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        lmul: vector_lmul_list((sew, eew))
        vl : vector_vl_list_ls(lmul, sew, eew, vlen)
        nvl: list(np.unique(np.random.uniform(1, vl, 5).astype(int)))
        rs1: np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))