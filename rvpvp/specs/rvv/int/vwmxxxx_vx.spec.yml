_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_base_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        li a1, {rs1};
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew}.v  v16, (a2);
        vle{sew2}.v v24, (a3);
        {name} v24, a1, v16;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew2}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew2}/8)
      test_{num}_data:
        .fill ({vl}), ({sew2}/8), 0;
        .popsection

    test_base_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,{vma};
        la a0, {mask_data};
        li a1, {rs1};
        la a2, {vs2_data};        
        la a6, {ori_data};
        vle1.v   v0, (a0);
        vle{sew}.v  v16, (a2);
        vle{sew2}.v v24, (a6);
        {name} v24, a1, v16, v0.t;
        la a3, test_{num}_data;
        vse{sew2}.v v24, (a3);
        .pushsection .data, 1;
        .balign ({sew2}/8)
      test_{num}_data:
        .fill ({vl}), ({sew2}/8), 0;
        .popsection 

    test_regression_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        li a1, {rs1};
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew}.v  v16, (a2);
        vle{sew2}.v v24, (a3);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, a1, v16;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew2}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew2}/8)
      test_{num}_data:
        .fill ({vl}), ({sew2}/8), 0;
        .popsection

    test_agnostic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma;
        la a3, {ori_data};
        la a2, {vs2_data};
        li a1, {rs1};
        vle{sew2}.v v24, (a3);
        vle{sew}.v  v16, (a2);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        {name} v24, a1, v16;
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma;
        la a6, test_{num}_data;
        vse{sew2}.v v24, (a6);
        .pushsection .data, 1;
        .balign ({sew2}/8)
      test_{num}_data:
        .fill ({tail}), ({sew2}/8), 0;
        .popsection

    test_vstart_not_equal_zero_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, {ori_data};
        la a2, {vs2_data};
        li a1, {rs1};
        vle{sew2}.v v24, (a3);
        vle{sew}.v  v16, (a2);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, a1, v16;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew2}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew2}/8)
      test_{num}_data:
        .fill ({vl}), ({sew2}/8), 0;
        .popsection

    test_vstart_not_equal_zero_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a4, {mask_data};
        la a3, {ori_data};
        la a2, {vs2_data};
        li a1, {rs1};
        vle{sew2}.v v24, (a3);
        vle{sew}.v  v16, (a2);
        vle1.v   v0, (a4);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, a1, v16, v0.t;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la  a6, test_{num}_data;
        vse{sew2}.v v24, (a6);
        .pushsection .data, 1;
        .balign ({sew2}/8)
      test_{num}_data:
        .fill ({vl}), ({sew2}/8), 0;
        .popsection

    test_register_vs1_equ_vs2_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew}.v  v16, (a2);
        vle{sew2}.v v24, (a3);
        {name} v24, v16, v16;
        la a4, test_{num}_data;
        vse{sew2}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew2}/8)
      test_{num}_data:
        .fill ({vl}), ({sew2}/8), 0;
        .popsection
 
    test_exception_sew_equ_64_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, a1, v16;
        j fail;
      test_{num}_end:


  check:
    test_base_without_mask: np.array_equal(result, golden)
    test_base_with_mask   : np.array_equal(result, golden)
    test_regression_without_mask: np.array_equal(result, golden)
    test_agnostic_without_mask: np.array_equal(result, golden)
    test_vstart_not_equal_zero_without_mask: np.array_equal(result, golden)
    test_vstart_not_equal_zero_with_mask   : np.array_equal(result, golden)


  basic_cases:
    test_base_without_mask @ ori, rs1, vs2, sew, sew2, vl, lmul:
      setup: |
        params_yml = []
        for sew in [8, 16, 32]:
          for lmul in vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              for rs1 in [bits_to_intmax(sew), sew]:
                sew2= 2*sew
                ori = np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew2))
                vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
                params_yml.append([ori, rs1, vs2, sew, sew2, vl, lmul])

    test_base_with_mask @ ori, rs1, vs2, sew, sew2, vl, lmul, vma, mask:
      setup: |
        params_yml = []
        for sew in [8, 32]:
          for lmul in vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vma in ["ma", "mu"]:
                for rs1 in [bits_to_intmin(sew), sew]:
                  sew2= 2*sew
                  vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
                  ori = np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew2))
                  mask= vector_mask_array_random(vl)
                  params_yml.append([ori, rs1, vs2, sew, sew2, vl, lmul, vma, mask])

  random_cases:
    test_regression_without_mask: 
      matrix:
        sew : [8, 16, 32]
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        sew2: 2*sew
        vs2 : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))
        rs1 : np.random.randint(bits_to_intmax(sew))
        ori : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew2))
        vstart: [vl//2,sew//2]

  cases:
    test_agnostic_without_mask @ ori, vs2, rs1, sew, sew2, lmul, lmul_tu, vl, tail:
      setup: |
        params_yml = []
        for sew in [8, 16, 32]:
          for lmul in vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew)
              sew2= 2*sew
              rs1 = sew*sew
              vs2 = np.linspace( 1, bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              ori = np.linspace( 0, tail, tail, dtype=bits_to_dtype_int(sew2))
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, rs1, sew, sew2, lmul, lmul_tu, vl, tail])

    test_vstart_not_equal_zero_without_mask:
      matrix:
        sew : [8, 16, 32]
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        sew2: 2*sew
        vs2 : np.linspace( 2, min(bits_to_intmax(sew),1024), vl, dtype=bits_to_dtype_int(sew))
        rs1 : np.random.randint(sew)
        ori : np.linspace( 0, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew2))
        vstart: [vl//2,sew//2]

    test_vstart_not_equal_zero_with_mask:
      matrix:
        sew : [8, 32]
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        sew2: 2*sew
        vs2 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
        rs1 : np.random.randint(bits_to_intmax(sew))
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew2))
        mask: vector_mask_array_random(vl)
        vstart: [vl//3]

    test_exception_sew_equ_64_without_mask: 
      matrix: 
        sew : [64]
        sew2: min(2*sew,64)
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        ori : np.linspace( 0, 1024, vl, dtype=bits_to_dtype_int(sew2))
        vs2 : np.linspace( 0, sew2, vl, dtype=bits_to_dtype_int(sew))
        rs1 : np.random.randint(sew)

vwmacc_vx:
  <<: *default


vwmaccu_vx:
  <<: *default
  basic_cases:
    test_base_without_mask @ ori, rs1, vs2, sew, sew2, vl, lmul:
      setup: |
        params_yml = []
        for sew in [8, 16, 32]:
          for lmul in vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              for rs1 in [bits_to_uintmax(sew), sew]:
                sew2= 2*sew
                ori = np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew2))
                vs2 = np.linspace( 3, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew))
                params_yml.append([ori, rs1, vs2, sew, sew2, vl, lmul])

    test_base_with_mask @ ori, rs1, vs2, sew, sew2, vl, lmul, vma, mask:
      setup: |
        params_yml = []
        for sew in [8, 32]:
          for lmul in vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vma in ["ma", "mu"]:
                for rs1 in [15]:
                  sew2= 2*sew
                  vs2 = np.linspace( 2, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew))
                  ori = np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew2))
                  mask= vector_mask_array_random(vl)
                  params_yml.append([ori, rs1, vs2, sew, sew2, vl, lmul, vma, mask])

  random_cases:
    test_regression_without_mask: 
      matrix:
        sew : [8, 16, 32]
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        sew2: 2*sew
        vs2 : np.random.uniform(0, bits_to_uintmax(sew), vl).astype(bits_to_dtype_uint(sew))
        rs1 : np.random.randint(bits_to_uintmax(sew))
        ori : np.random.uniform(0, bits_to_uintmax(sew), vl).astype(bits_to_dtype_uint(sew2))
        vstart: [vl//2,sew//2]

  cases:
    test_agnostic_without_mask @ ori, vs2, rs1, sew, sew2, lmul, lmul_tu, vl, tail:
      setup: |
        params_yml = []
        for sew in [8, 16, 32]:
          for lmul in vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew)
              sew2= 2*sew
              rs1 = sew*sew
              vs2 = np.linspace( 1, bits_to_uintmax(sew), tail, dtype=bits_to_dtype_uint(sew))
              ori = np.linspace( 0, tail, tail, dtype=bits_to_dtype_uint(sew2))
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, rs1, sew, sew2, lmul, lmul_tu, vl, tail])

    test_vstart_not_equal_zero_without_mask:
      matrix:
        sew : [8, 16, 32]
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        sew2: 2*sew
        vs2 : np.linspace( 2, min(bits_to_uintmax(sew),1024), vl, dtype=bits_to_dtype_uint(sew))
        rs1 : np.random.randint(sew)
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew2))
        vstart: [vl//2,sew//2]

    test_vstart_not_equal_zero_with_mask:
      matrix:
        sew : [8, 32]
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        sew2: 2*sew
        vs2 : np.linspace( 1, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew))
        rs1 : np.random.randint(bits_to_uintmax(sew))
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew2))
        mask: vector_mask_array_random(vl)
        vstart: [vl//3]

    test_exception_sew_equ_64_without_mask: 
      matrix: 
        sew : [64]
        sew2: min(2*sew,64)
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        ori : np.linspace( 0, 1024, vl, dtype=bits_to_dtype_uint(sew2))
        vs2 : np.linspace( 0, sew2, vl, dtype=bits_to_dtype_uint(sew))
        rs1 : np.random.randint(sew)


vwmaccsu_vx:
  <<: *default
  basic_cases:
    test_base_without_mask @ ori, rs1, vs2, sew, sew2, vl, lmul:
      setup: |
        params_yml = []
        for sew in [8, 16, 32]:
          for lmul in vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              for rs1 in [bits_to_intmax(sew), sew]:
                sew2= 2*sew
                ori = np.linspace( 0, 256, vl, dtype=bits_to_dtype_uint(sew2))
                vs2 = np.linspace( 3, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew))
                params_yml.append([ori, rs1, vs2, sew, sew2, vl, lmul])

    test_base_with_mask @ ori, rs1, vs2, sew, sew2, vl, lmul, vma, mask:
      setup: |
        params_yml = []
        for sew in [8, 32]:
          for lmul in vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vma in ["ma", "mu"]:
                for rs1 in [15]:
                  sew2= 2*sew
                  vs2 = np.linspace( 2, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew))
                  ori = np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew2))
                  mask= vector_mask_array_random(vl)
                  params_yml.append([ori, rs1, vs2, sew, sew2, vl, lmul, vma, mask])

  random_cases:
    test_regression_without_mask: 
      matrix:
        sew : [8, 16, 32]
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        sew2: 2*sew
        vs2 : np.random.uniform(0, bits_to_uintmax(sew), vl).astype(bits_to_dtype_uint(sew))
        rs1 : np.random.randint(bits_to_intmax(sew))
        ori : np.random.uniform(0, bits_to_uintmax(sew), vl).astype(bits_to_dtype_uint(sew2))
        vstart: [vl//2,sew//2]

  cases:
    test_agnostic_without_mask @ ori, vs2, rs1, sew, sew2, lmul, lmul_tu, vl, tail:
      setup: |
        params_yml = []
        for sew in [8, 16, 32]:
          for lmul in vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew)
              sew2= 2*sew
              rs1 = np.random.randint(sew)
              vs2 = np.linspace( 1, bits_to_uintmax(sew), tail, dtype=bits_to_dtype_uint(sew))
              ori = np.linspace( 0, tail, tail, dtype=bits_to_dtype_uint(sew2))
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, rs1, sew, sew2, lmul, lmul_tu, vl, tail])

    test_vstart_not_equal_zero_without_mask:
      matrix:
        sew : [8, 16, 32]
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        sew2: 2*sew
        vs2 : np.linspace( 2, min(bits_to_uintmax(sew),1024), vl, dtype=bits_to_dtype_uint(sew))
        rs1 : np.random.randint(sew)
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew2))
        vstart: [vl//2,sew//2]

    test_vstart_not_equal_zero_with_mask:
      matrix:
        sew : [8, 32]
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        sew2: 2*sew
        vs2 : np.linspace( 1, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew))
        rs1 : np.random.randint(bits_to_intmax(sew))
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew2))
        mask: vector_mask_array_random(vl)
        vstart: [vl//3]

    test_exception_sew_equ_64_without_mask: 
      matrix: 
        sew : [64]
        sew2: min(2*sew,64)
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        ori : np.linspace( 0, 1024, vl, dtype=bits_to_dtype_uint(sew2))
        vs2 : np.linspace( 0, sew2, vl, dtype=bits_to_dtype_uint(sew))
        rs1 : np.random.randint(sew)


vwmaccus_vx:
  <<: *default
  basic_cases:
    test_base_without_mask @ ori, rs1, vs2, sew, sew2, vl, lmul:
      setup: |
        params_yml = []
        for sew in [8, 16, 32]:
          for lmul in vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              for rs1 in [bits_to_intmax(sew), sew]:
                sew2= 2*sew
                ori = np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew2))
                vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
                params_yml.append([ori, rs1, vs2, sew, sew2, vl, lmul])

    test_base_with_mask @ ori, rs1, vs2, sew, sew2, vl, lmul, vma, mask:
      setup: |
        params_yml = []
        for sew in [8, 32]:
          for lmul in vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vma in ["ma", "mu"]:
                for rs1 in [bits_to_intmax(sew), sew]:
                  sew2= 2*sew
                  vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
                  ori = np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew2))
                  mask= vector_mask_array_random(vl)
                  params_yml.append([ori, rs1, vs2, sew, sew2, vl, lmul, vma, mask])

  random_cases:
    test_regression_without_mask: 
      matrix:
        sew : [8, 16, 32]
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        sew2: 2*sew
        vs2 : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))
        rs1 : np.random.randint(bits_to_uintmax(sew))
        ori : np.random.uniform(bits_to_intmin(sew), vl, vl).astype(bits_to_dtype_int(sew2))
        vstart: [vl//2,sew//2]

  cases:
    test_agnostic_without_mask @ ori, vs2, rs1, sew, sew2, lmul, lmul_tu, vl, tail:
      setup: |
        params_yml = []
        for sew in [8, 16, 32]:
          for lmul in vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew)
              sew2= 2*sew
              rs1 = sew*sew
              vs2 = np.linspace( 1, bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              ori = np.linspace( 0, 1024, tail, dtype=bits_to_dtype_int(sew2))
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, rs1, sew, sew2, lmul, lmul_tu, vl, tail])

    test_vstart_not_equal_zero_without_mask:
      matrix:
        sew : [8, 16, 32]
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        sew2: 2*sew
        vs2 : np.linspace( 2, min(bits_to_intmax(sew),1024), vl, dtype=bits_to_dtype_int(sew))
        rs1 : np.random.randint(sew)
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew2))
        vstart: [vl//2,vl+2]

    test_vstart_not_equal_zero_with_mask:
      matrix:
        sew : [8, 32]
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        sew2: 2*sew
        vs2 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
        rs1 : np.random.randint(bits_to_uintmax(sew))
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew2))
        mask: vector_mask_array_random(vl)
        vstart: [vl//3]

    test_exception_sew_equ_64_without_mask: 
      matrix: 
        sew : [64]
        sew2: min(2*sew,64)
        lmul: vector_lmul_list_w(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
        ori : np.linspace( 0, 1024, vl, dtype=bits_to_dtype_int(sew2))
        vs2 : np.linspace( 0, sew2, vl, dtype=bits_to_dtype_int(sew))
        rs1 : np.random.randint(sew)
