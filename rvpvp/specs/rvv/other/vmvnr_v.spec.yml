_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_base_vmvnv_v: |
      test_{num}:
        li TESTNUM, {num};       
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;       
        la a1, {vs2_data};
        la a2, {ori_data};
        vle{sew}.v  v8, (a1);
        vle{sew}.v  v0, (a2);
        {name} v0, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v  v0, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_regression_vmvnv_v: |
      test_{num}:
        li TESTNUM, {num};       
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;       
        la a1, {vs2_data};
        la a2, {ori_data};
        vle{sew}.v  v8, (a1);
        vle{sew}.v  v0, (a2);
        {name} v0, v8;
        la a4, test_{num}_data;
        vse{sew}.v  v0, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection
    
    test_agnostic_vmvnv_v: |
      test_{num}:
        li TESTNUM, {num};       
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma;       
        la a1, {vs2_data};
        vle{sew}.v  v8, (a1);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},tu,ma; 
        {name} v0, v8;
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma; 
        la a2, test_{num}_data;
        vse{sew}.v  v0, (a2);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {tail}, ({sew}/8), 0;
        .popsection

    test_vstart_not_eq_zero_vmvnv_v: |
      test_{num}:
        li TESTNUM, {num};       
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;       
        la a1, {ori_data};
        la a2, {vs2_data};
        vle{sew}.v  v0, (a1);
        vle{sew}.v  v8, (a2);
        li t2, {vstart};
        csrw vstart, t2;
        {name} v0, v8;
        la a4, test_{num}_data;
        vse{sew}.v  v0, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection
        
    test_dest_eq_vs2_vmvnv_v: |
      test_{num}:
        li TESTNUM, {num};       
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;       
        la a1, {vs2_data};
        vle{sew}.v  v8, (a1);
        {name} v8, v8;
        la a2, test_{num}_data;
        vse{sew}.v  v8, (a2);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_exception_misaligned_vmvnv_v: |
      test_{num}:
        li TESTNUM, {num};  
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);     
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;       
        {name} v0, v1;
        j fail;
      test_{num}_end:

  check:
    test_base_vmvnv_v:               np.array_equal(result, golden)
    test_regression_vmvnv_v:         np.array_equal(result, golden)
    test_agnostic_vmvnv_v:           np.array_equal(result, golden)
    test_vstart_not_eq_zero_vmvnv_v: np.array_equal(result, golden)
    test_dest_eq_vs2_vmvnv_v:        np.array_equal(result, golden)
    

vmv1r_v:
  <<: *default
  basic_cases:
    test_base_vmvnv_v @ ori, vs2, vl, sew, lmul:
      setup: |
        params_yml = []
        params_yml.append([np.linspace(0x1,0x20,32,dtype=np.uint16), np.linspace(0x0,0x20,32,dtype=np.uint16), 32, 16, "f2"])
        params_yml.append([np.linspace(0x1,0x20,32,dtype=np.uint32), np.linspace(0x0,0x20,32,dtype=np.uint32), 32, 32,    1])
        params_yml.append([np.linspace(0x1,0x10,16,dtype=np.int8),   np.linspace(0x0,0x10,16,dtype=np.int8),   16,  8, "f8"])
        params_yml.append([np.linspace(0x1,0x10,16,dtype=np.int8),   np.linspace(0x0,0x10,16,dtype=np.int8),   16,  8, "f4"])
        for sew in [ 8, 16]:
          for lmul in [1,'f2', 'f4']: #vector_lmul_list_w(sew):
            for vl in vector_vl_list(lmul, sew, vlen):
              ori = np.linspace( 0, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              params_yml.append([ori, vs2, vl, sew, lmul])

  random_cases:
    test_regression_vmvnv_v : 
      matrix: 
        sew : [8, 16, 32]
        lmul: [1, 'f2']
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))
        ori : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))

  cases:
    test_agnostic_vmvnv_v @ori, vs2, sew, lmul, lmul_tu, vl, tail:
      setup: |
        params_yml = []
        for sew in [8, 16, 32, 64]:
          for lmul in [1]:
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew)
              ori = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, sew, lmul, lmul_tu, vl, tail])

    test_vstart_not_eq_zero_vmvnv_v : 
      matrix: 
        sew : [8]
        lmul: [1, "f2"]
        vl  : vector_vl_list(lmul, sew, vlen)
        vta : ["tu"]
        ori : np.linspace(  0,  96, vl, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( 32, 127, vl, dtype=bits_to_dtype_int(sew))
        vstart: [2, vl//2] 

    test_dest_eq_vs2_vmvnv_v : 
      matrix: 
        sew : [8, 16, 32]
        lmul: [1, 'f2']
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 32, 127, vl, dtype=bits_to_dtype_int(sew))
        ori : vs2


vmv2r_v:
  <<: *default
  basic_cases:
    test_base_vmvnv_v @ ori, vs2, vl, sew, lmul:
      setup: |
        params_yml = []
        params_yml.append([np.linspace(0x1,0x20,32,dtype=np.uint16), np.linspace(0x0,0x20,32,dtype=np.uint16), 32, 16, "f2"])
        params_yml.append([np.linspace(0x1,0x20,32,dtype=np.uint32), np.linspace(0x0,0x20,32,dtype=np.uint32), 32, 32,    1])
        params_yml.append([np.linspace(0x1,0x10,16,dtype=np.int8),   np.linspace(0x0,0x10,16,dtype=np.int8),   16,  8, "f8"])
        params_yml.append([np.linspace(0x1,0x10,16,dtype=np.int8),   np.linspace(0x0,0x10,16,dtype=np.int8),   16,  8, "f4"])
        for sew in [ 8, 16]:
          for lmul in [2, 1,'f2', 'f4']:
            for vl in vector_vl_list(lmul, sew, vlen):
              ori = np.linspace( 0, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              params_yml.append([ori, vs2, vl, sew, lmul])

  random_cases:
    test_regression_vmvnv_v : 
      matrix: 
        sew : [8, 16, 32]
        lmul: [2, 1, 'f2']
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))
        ori : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))

  cases:
    test_agnostic_vmvnv_v @ori, vs2, sew, lmul, lmul_tu, vl, tail:
      setup: |
        params_yml = []
        for sew in [8, 16, 32, 64]:
          for lmul in [2, 1]:
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew)
              ori = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, sew, lmul, lmul_tu, vl, tail])

    test_vstart_not_eq_zero_vmvnv_v : 
      matrix: 
        sew : [8]
        lmul: [2, 1, "f2"]
        vl  : vector_vl_list(lmul, sew, vlen)
        vta : ["tu"]
        ori : np.linspace(  0,  96, vl, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( 32, 127, vl, dtype=bits_to_dtype_int(sew))
        vstart: [2, vl//2] 

    test_dest_eq_vs2_vmvnv_v : 
      matrix: 
        sew : [8, 16, 32]
        lmul: [2, 1, 'f2']
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 32, 127, vl, dtype=bits_to_dtype_int(sew))
        ori : vs2

    test_exception_misaligned_vmvnv_v : 
      matrix: 
        sew : [8, 16, 32]
        lmul: [2, 4, 8]
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 5, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
        ori : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))


vmv4r_v:
  <<: *default
  basic_cases:
    test_base_vmvnv_v @ ori, vs2, vl, sew, lmul:
      setup: |
        params_yml = []
        params_yml.append([np.linspace(0x1,0x20,32,dtype=np.uint16), np.linspace(0x0,0x20,32,dtype=np.uint16), 32, 16, "f2"])
        params_yml.append([np.linspace(0x1,0x20,32,dtype=np.uint32), np.linspace(0x0,0x20,32,dtype=np.uint32), 32, 32,    1])
        params_yml.append([np.linspace(0x1,0x10,16,dtype=np.int8),   np.linspace(0x0,0x10,16,dtype=np.int8),   16,  8, "f8"])
        params_yml.append([np.linspace(0x1,0x10,16,dtype=np.int8),   np.linspace(0x0,0x10,16,dtype=np.int8),   16,  8, "f4"])
        for sew in [ 8, 16]:
          for lmul in [4, 2, 1,'f2', 'f4']:
            for vl in vector_vl_list(lmul, sew, vlen):
              ori = np.linspace( 0, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              params_yml.append([ori, vs2, vl, sew, lmul])

  random_cases:
    test_regression_vmvnv_v : 
      matrix: 
        sew : [8, 16, 32]
        lmul: [4, 2, 1, 'f2']
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))
        ori : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))

  cases:
    test_agnostic_vmvnv_v @ori, vs2, sew, lmul, lmul_tu, vl, tail:
      setup: |
        params_yml = []
        for sew in [8, 16, 32, 64]:
          for lmul in [4, 2, 1]:
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew)
              ori = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, sew, lmul, lmul_tu, vl, tail])

    test_vstart_not_eq_zero_vmvnv_v : 
      matrix: 
        sew : [8]
        lmul: [4, 2, 1, "f2"]
        vl  : vector_vl_list(lmul, sew, vlen)
        vta : ["tu"]
        ori : np.linspace(  0,  96, vl, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( 32, 127, vl, dtype=bits_to_dtype_int(sew))
        vstart: [2, vl//3] 

    test_dest_eq_vs2_vmvnv_v : 
      matrix: 
        sew : [8, 16, 32]
        lmul: [4, 2, 1, 'f2']
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 32, 127, vl, dtype=bits_to_dtype_int(sew))
        ori : vs2

    test_exception_misaligned_vmvnv_v : 
      matrix: 
        sew : [8, 16, 32]
        lmul: [2, 4, 8]
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 5, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
        ori : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))

vmv8r_v:
  <<: *default
  basic_cases:
    test_base_vmvnv_v @ ori, vs2, vl, sew, lmul:
      setup: |
        params_yml = []
        params_yml.append([np.linspace(0x1,0x20,32,dtype=np.uint16), np.linspace(0x0,0x20,32,dtype=np.uint16), 32, 16, "f2"])
        params_yml.append([np.linspace(0x1,0x20,32,dtype=np.uint32), np.linspace(0x0,0x20,32,dtype=np.uint32), 32, 32,    1])
        params_yml.append([np.linspace(0x1,0x10,16,dtype=np.int8),   np.linspace(0x0,0x10,16,dtype=np.int8),   16,  8, "f8"])
        params_yml.append([np.linspace(0x1,0x10,16,dtype=np.int8),   np.linspace(0x0,0x10,16,dtype=np.int8),   16,  8, "f4"])
        for sew in [ 8, 16]:
          for lmul in [8, 4, 2, 1,'f2', 'f4']:
            for vl in vector_vl_list(lmul, sew, vlen):
              ori = np.linspace( 0, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              params_yml.append([ori, vs2, vl, sew, lmul])

  random_cases:
    test_regression_vmvnv_v : 
      matrix: 
        sew : [8, 16, 32]
        lmul: [8, 4, 2, 1, 'f2']
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))
        ori : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))

  cases:
    test_agnostic_vmvnv_v @ori, vs2, sew, lmul, lmul_tu, vl, tail:
      setup: |
        params_yml = []
        for sew in [8, 16, 32, 64]:
          for lmul in [8, 4, 2, 1]:
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew)
              ori = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, sew, lmul, lmul_tu, vl, tail])

    test_vstart_not_eq_zero_vmvnv_v : 
      matrix: 
        sew : [8]
        lmul: [8, 4, 2, 1, "f2"]
        vl  : vector_vl_list(lmul, sew, vlen)
        vta : ["tu"]
        ori : np.linspace(  0,  96, vl, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( 32, 127, vl, dtype=bits_to_dtype_int(sew))
        vstart: [2, vl//4]  

    test_dest_eq_vs2_vmvnv_v : 
      matrix: 
        sew : [8, 16, 32]
        lmul: [8, 4, 2, 1, 'f2']
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 32, 127, vl, dtype=bits_to_dtype_int(sew))
        ori : vs2

    test_exception_misaligned_vmvnv_v : 
      matrix: 
        sew : [8, 16, 32]
        lmul: [2, 4, 8]
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 5, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
        ori : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
      
