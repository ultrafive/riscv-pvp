_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_vmxxx_vx: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};
        li a1, {rs1};
        la a2, {vs2_data};
        la a3, test_{num}_data;

        vsetvli t0, a0, e{ebits},m1,tu,mu;
        {ldins} v2, (a2);
        {name} v3, v2, a1;

        li t1, 8;
        remu t2, a0, t1;
        bnez t2, 1f;
        li t3,  {vl} / 8;
        j 2f;
      1:
        li t3,  {vl} / 8 + 1;
      2:
        vsetvli t0, t3, e8,m1,tu,mu;
        vse8.v v3, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection

    test_vmxxx_vx_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};
        li a1, {rs1};
        la a2, {vs2_data};
        la a3, test_{num}_data;
        la a4, {mask_data};        

        vsetvli t0, a0, e{ebits},m1,tu,mu;
        vle1.v v0, (a4);
        {ldins} v2, (a2);
        {name} v3, v2, a1, v0.t;

        li t1, 8;
        remu t2, a0, t1;
        bnez t2, 1f;
        li t3,  {vl} / 8;
        j 2f;
      1:
        li t3,  {vl} / 8 + 1;
      2:
        vsetvli t0, t3, e8,m1,tu,mu;
        vse8.v v3, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection

  cases:
    test_vmxxx_vx @ vs2, rs1, vl @ ebits=32, ldins='vle32.v':
      - '[np.array([4], dtype=np.int32), 4, 1]'
      - '[np.array([0xfffffff0], dtype=np.int32), -12, 1]'
      - '[np.array([0xffff, 6], dtype=np.int32), 3, 2]'
      - '[np.linspace(0x10000000, 0xffffffff, 8, dtype=np.int32), -16, 8]'
      - '[np.linspace(0x10000000, 0xffffffff, 31, dtype=np.int32), -31, 31]'
      - '[np.linspace(0x10000000, 0xffffffff, 32, dtype=np.int32), -32, 32]'
    
    test_vmxxx_vx_with_mask @ vs2, rs1, mask, vl @ ebits=32, ldins='vle32.v':
      - '[np.array([4], dtype=np.int32), 4, np.array([0xaa], dtype=np.uint8), 1]'
      - '[np.array([0xfffffff0], dtype=np.int32), -12, np.array([0x55], dtype=np.uint8), 1]'
      - '[np.array([0xffff, 6], dtype=np.int32), 3, np.array([0x5a], dtype=np.uint8), 2]'
      - '[np.linspace(0x10000000, 0xffffffff, 8, dtype=np.int32), -16, np.array([0x5a], dtype=np.uint8), 8]'
      - '[np.linspace(0x10000000, 0xffffffff, 31, dtype=np.int32), -31, np.linspace(0x0, 0xf, 4, dtype=np.uint8), 31]'
      - '[np.linspace(0x10000000, 0xffffffff, 32, dtype=np.int32), -32, np.linspace(0x0, 0xf, 4, dtype=np.uint8), 32]'

  check:
    test_vmxxx_vx: np.array_equal(result, golden)
    test_vmxxx_vx_with_mask: np.array_equal(result, golden)

vmadc_vx: &no_mask
  <<: *default

  cases:
    test_vmxxx_vx @ vs2, rs1, vl @ ebits=32, ldins='vle32.v':
      - '[np.array([4], dtype=np.uint32), 4, 1]'
      - '[np.array([0xfffffff0], dtype=np.uint32), 0x100, 1]'
      - '[np.array([0xffff, 6], dtype=np.uint32), 0x10000, 2]'
      - '[np.linspace(0x1000000, 0xffffffff, 8, dtype=np.uint32), 0x10000, 8]'
      - '[np.linspace(0x10000000, 0xffffffff, 31, dtype=np.uint32), 0x6fffffff, 31]'
      - '[np.linspace(0x10000000, 0xffffffff, 32, dtype=np.uint32), 0xf0000000, 32]'
  
  check:
    test_vmxxx_vx: np.array_equal(result, golden)

vmsbc_vx:
  <<: *no_mask


vmseq_vx:
  <<: *default

vmsne_vx:
  <<: *default

vmsltu_vx: &unsigned
  <<: *default

  cases:
    test_vmxxx_vx @ vs2, rs1, vl @ ebits=32, ldins='vle32.v':
      - '[np.array([4], dtype=np.uint32), 4, 1]'
      - '[np.array([0xfffffff0], dtype=np.uint32), 0xfffffff0, 1]'
      - '[np.array([0xffff, 6], dtype=np.uint32), 0x10000, 2]'
      - '[np.linspace(0x1000000, 0xffffffff, 8, dtype=np.uint32), 0x1f00000, 8]'
      - '[np.linspace(0x10000000, 0xffffffff, 31, dtype=np.uint32), 0x1f000000, 31]'
      - '[np.linspace(0x10000000, 0xffffffff, 32, dtype=np.uint32), 0x1f000000, 32]'
    
    test_vmxxx_vx_with_mask @ vs2, rs1, mask, vl @ ebits=32, ldins='vle32.v':
      - '[np.array([4], dtype=np.uint32), 4, np.array([0xaa], dtype=np.uint8), 1]'
      - '[np.array([0xfffffff0], dtype=np.uint32), 0xfffffff0, np.array([0x55], dtype=np.uint8), 1]'
      - '[np.array([0xffff, 6], dtype=np.uint32), 0x10000, np.array([0x5a], dtype=np.uint8), 2]'
      - '[np.linspace(0x1000000, 0xffffffff, 8, dtype=np.uint32), 0x1f00000, np.array([0x5a], dtype=np.uint8), 8]'
      - '[np.linspace(0x10000000, 0xffffffff, 31, dtype=np.uint32), 0x1f000000, np.linspace(0x0, 0xf, 4, dtype=np.uint8), 31]'
      - '[np.linspace(0x10000000, 0xffffffff, 32, dtype=np.uint32), 0x1f000000, np.linspace(0x0, 0xf, 4, dtype=np.uint8), 32]'

vmslt_vx:
  <<: *default

vmsleu_vx:
  <<: *unsigned

vmsle_vx:
  <<: *default

vmsgtu_vx:
  <<: *unsigned

vmsgt_vx:
  <<: *default
