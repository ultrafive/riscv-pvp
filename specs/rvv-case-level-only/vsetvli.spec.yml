_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_vsetvli_normal: |
      test_{num}:
        li  TESTNUM, {num};
        li  x1, {input_vl};

        vsetvli x14, x1, {imm_vtype},{imm_vlmul},tu,mu;

        li  x7, {res_vl};
        bne x14, x7, tofail_{num};
        j topass_{num};
      tofail_{num}:
        j fail;
      topass_{num}:
        csrr t1, vl;
        bne t1, x7, tofail_{num};
        li  x7, {res_vtype};
        csrr x8, vtype;
        bne x8, x7, tofail_{num};

    test_vsetvli_dest_src1_zero: |
      test_{num}:
        li  TESTNUM, {num};
        vsetvli x0, x0, {imm_vtype},m1,tu,mu;

        li  x7, {res_vl};
        csrr t1, vl;
        bne t1, x7, tofail_{num};
        j topass_{num};
      tofail_{num}:
        j fail; 
      topass_{num}:
        li  x7, {res_vtype};
        csrr x8, vtype;
        bne x8, x7, tofail_{num};

    test_vsetvli_src1_zero: |
      test_{num}:
        li  TESTNUM, {num};
        vsetvli x14, x0, {imm_vtype},m1,tu,mu;

        li  x7, {res_vl};
        bne x14, x7, tofail_{num};
        j topass_{num};
      tofail_{num}:
        j fail;
      topass_{num}:
        csrr t1, vl;
        bne t1, x7, tofail_{num};
        li  x7, {res_vtype};
        csrr x8, vtype; \
        bne x8, x7, tofail_{num};

    test_vsetvli_dest_zero: |
      test_{num}:
        li  TESTNUM, {num};
        li  x1, {input_vl};
        vsetvli x0, x1, {imm_vtype},m1,tu,mu;

        li  x7, {res_vl};
        csrr t1, vl;
        bne t1, x7, tofail_{num};
        j topass_{num};
      tofail_{num}:
        j fail;
      topass_{num}:
        li  x7, {res_vtype};
        csrr x8, vtype;
        bne x8, x7, tofail_{num};

vsetvli:
  <<: *default
  cases:
    test_vsetvli_normal @ res_vl, res_vtype, input_vl, imm_vtype, imm_vlmul:
      #sew8: 0 << 3, sew16: 1 << 3, sew32: 2 << 3, sew64: 3 << 3
      #sew8: 0 << 3 , m1:VLMAX=128
      #res_vl, res_vtype, input_vl, imm_vtype, imm_vlmul
      - '[1, 0 << 3, 1, "e8", "m1"]'
      - '[15, 0 << 3, 15, "e8", "m1"]'
      - '[32, 0 << 3, 32, "e8", "m1"]'
      - '[67, 0 << 3, 67, "e8", "m1"]'
      - '[128, 0 << 3, 128, "e8", "m1"]'
      - '[128, 0 << 3, 356, "e8", "m1"]'
      #m2:VLMAX=128*2
      - '[255, 0 << 3 | 1, 255, "e8", "m2"]'
      - '[256, 0 << 3 | 1, 256, "e8", "m2"]'
      - '[256, 0 << 3 | 1, 356, "e8", "m2"]'

      #m4:VLMAX=128*4
      - '[511, 0 << 3 | 2, 511, "e8", "m4"]'
      - '[512, 0 << 3 | 2, 512, "e8", "m4"]'
      - '[512, 0 << 3 | 2, 555, "e8", "m4"]'

      #m8:VLMAX=128*8
      - '[1023, 0 << 3 | 3, 1023, "e8", "m8"]'
      - '[1024, 0 << 3 | 3, 1024, "e8", "m8"]'
      - '[1024, 0 << 3 | 3, 1280, "e8", "m8"]'

      # mf8:VLEN/SEW/8 =64
      #- '[63, 0 << 3 | 5, 63, "e8", "mf8"]'
      #- '[64, 0 << 3 | 5, 64, "e8", "mf8"]'
      #- '[64, 0 << 3 | 5, 128, "e8", "mf8"]'

      # mf4:VLEN/SEW/4 =128
      #- '[127, 0 << 3 | 6, 127, "e8", "mf4"]'
      #- '[128, 0 << 3 | 6, 128, "e8", "mf4"]'
      #- '[128, 0 << 3 | 6, 192, "e8", "mf4"]'

      # mf4:VLEN/SEW/2 =256
      #- '[255, 0 << 3 | 7, 255, "e8", "mf2"]'
      #- '[256, 0 << 3 | 7, 256, "e8", "mf2"]'
      #- '[256, 0 << 3 | 7, 512, "e8", "mf2"]'

      #sew16: 1 << 3, m1:VLMAX=64
      - '[3, 1 << 3, 3, "e16", "m1"]'
      - '[33, 1 << 3, 33, "e16", "m1"]'
      - '[63, 1 << 3, 63, "e16", "m1"]'
      - '[64, 1 << 3, 64, "e16", "m1"]'
      - '[64, 1 << 3, 128, "e16", "m1"]'

      #m2:VLMAX=64*2
      - '[127, 1 << 3 | 1, 127, "e16", "m2"]'
      - '[128, 1 << 3 | 1, 128, "e16", "m2"]'
      - '[128, 1 << 3 | 1, 256, "e16", "m2"]'

      #m4:VLMAX=64*4
      - '[255, 1 << 3 | 2, 255, "e16", "m4"]'
      - '[256, 1 << 3 | 2, 256, "e16", "m4"]'
      - '[256, 1 << 3 | 2, 555, "e16", "m4"]'

      #m8:VLMAX=64*8
      - '[511, 1 << 3 | 3, 511, "e16", "m8"]'
      - '[512, 1 << 3 | 3, 512, "e16", "m8"]'
      - '[512, 1 << 3 | 3, 1280, "e16", "m8"]'

      #sew32: 2 << 3, m1:VLMAX=32
      - '[3, 2 << 3, 3, "e32", "m1"]'
      - '[13, 2 << 3, 13, "e32", "m1"]'
      - '[24, 2 << 3, 24, "e32", "m1"]'
      - '[31, 2 << 3, 31, "e32", "m1"]'
      - '[32, 2 << 3, 128, "e32", "m1"]'

      #m2:VLMAX=32*2
      - '[63, 2 << 3 | 1, 63, "e32", "m2"]'
      - '[64, 2 << 3 | 1, 64, "e32", "m2"]'
      - '[64, 2 << 3 | 1, 256, "e32", "m2"]'

      #m4:VLMAX=32*4
      - '[127, 2 << 3 | 2, 127, "e32", "m4"]'
      - '[128, 2 << 3 | 2, 128, "e32", "m4"]'
      - '[128, 2 << 3 | 2, 555, "e32", "m4"]'

      #m8:VLMAX=32*8
      - '[255, 2 << 3 | 3, 255, "e32", "m8"]'
      - '[256, 2 << 3 | 3, 256, "e32", "m8"]'
      - '[256, 2 << 3 | 3, 1280, "e32", "m8"]'

      #sew64: 3 << 3, m1:VLMAX=16
      - '[3, 3 << 3, 3, "e64",  "m1"]'
      - '[12, 3 << 3, 12, "e64", "m1"]'
      - '[15, 3 << 3, 15, "e64", "m1"]'
      - '[16, 3 << 3, 16, "e64", "m1"]'

      #m2:VLMAX=16*2
      - '[31, 3 << 3 | 1, 31, "e64", "m2"]'
      - '[32, 3 << 3 | 1, 32, "e64", "m2"]'
      - '[32, 3 << 3 | 1, 256, "e64", "m2"]'

      #m4:VLMAX=16*4
      - '[63, 3 << 3 | 2, 63, "e64", "m4"]'
      - '[64, 3 << 3 | 2, 64, "e64", "m4"]'
      - '[64, 3 << 3 | 2, 555, "e64", "m4"]'

      #m8:VLMAX=16*8
      - '[127, 3 << 3 | 3, 127, "e64", "m8"]'
      - '[128, 3 << 3 | 3, 128, "e64", "m8"]'
      - '[128, 3 << 3 | 3, 1280, "e64", "m8"]'

    test_vsetvli_dest_src1_zero @ res_vl, res_vtype, imm_vtype:
      # rd=rs1=0, keep existing vl, here frist use so AVL is zero
      - '[0, 0 << 3, "e8"]'
      - '[0, 1 << 3, "e16"]'
      - '[0, 2 << 3, "e32"]'
      - '[0, 3 << 3, "e64"]'

    test_vsetvli_src1_zero @ res_vl, res_vtype, imm_vtype:
      #rd!=0, rs1=0, AVL to VLMAX
      - '[128, 0 << 3, "e8"]'
      - '[64, 1 << 3, "e16"]'
      - '[32, 2 << 3, "e32"]'
      - '[16, 3 << 3, "e64"]'

    test_vsetvli_dest_zero @ res_vl, res_vtype, input_vl, imm_vtype:
      #rs1!=0 AVL is value in x[rs1]
      - '[32, 0 << 3, 32, "e8"]'
      - '[128, 0 << 3, 192, "e8"]'

      - '[32, 1 << 3, 32, "e16"]'
      - '[64, 1 << 3, 192, "e16"]'

      - '[32, 2 << 3, 32, "e32"]'
      - '[32, 2 << 3, 192, "e32"]'

      - '[16, 3 << 3, 16, "e64"]'
      - '[16, 3 << 3, 192, "e64"]'