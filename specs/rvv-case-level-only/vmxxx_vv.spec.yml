_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_vmxxx_vv: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vlen};
        la a1, {vs1_data};
        la a2, {vs2_data};
  


        vsetvli t0, a0, e{ebits},m1,tu,mu;
        {ldins} v1, (a1);
        {ldins} v2, (a2);

        {name} v3, v2, v1;
        la a3, test_{num}_data;
        
        li t1, 8;
        remu t2, a0, t1;
        bnez t2, 1f;
        li t3,  {vlen} / 8;
        j 2f;
      1:
        li t3,  {vlen} / 8 + 1;
      2:
        vsetvli t0, t3, e8,m1,tu,mu;
        vse8.v v3, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;
        .popsection

    test_vmxxx_vv_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vlen};
        la a1, {vs1_data};
        la a2, {vs2_data};
        la a3, test_{num}_data;
        la a4, {mask_data};

        vsetvli t0, a0, e{ebits},m1,tu,mu;
        vle1.v v0, (a4);
        {ldins} v1, (a1);
        {ldins} v2, (a2);
        {name} v3, v2, v1, v0.t;
  
        li t1, 8;
        remu t2, a0, t1;
        bnez t2, 1f;
        li t3,  {vlen} / 8;
        j 2f;
      1:
        li t3,  {vlen} / 8 + 1;
      2:
        vsetvli t0, t3, e8,m1,tu,mu;
        vse8.v v3, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;
        .popsection

  cases:
    test_vmxxx_vv @ vs2, vs1, vlen @ ebits=32, ldins='vle32.v':
      - '[np.array([4], dtype=np.uint32), np.array([4], dtype=np.uint32), 1]'
      - '[np.array([0xfffffff0], dtype=np.uint32), np.array([0xfffffff0], dtype=np.uint32), 1]'
      - '[np.array([0xffff, 6], dtype=np.uint32), np.array([0x10000, 3], dtype=np.uint32), 2]'
      - '[np.linspace(0x10000000, 0xffffffff, 8, dtype=np.uint32), np.linspace(0x10000001, 0xffffffff, 8, dtype=np.uint32), 8]'
      - '[np.linspace(0x10000000, 0xffffffff, 31, dtype=np.uint32), np.linspace(0x10000001, 0xffffffff, 31, dtype=np.uint32), 31]'
      - '[np.linspace(0x10000000, 0xffffffff, 32, dtype=np.uint32), np.linspace(0x10000001, 0xffffffff, 32, dtype=np.uint32), 32]'
    
    test_vmxxx_vv_with_mask @ vs2, vs1, mask, vlen @ ebits=32, ldins='vle32.v':
      - '[np.array([4], dtype=np.uint32), np.array([4], dtype=np.uint32), np.array([0xaa], dtype=np.uint8), 1]'
      - '[np.array([0xfffffff0], dtype=np.uint32), np.array([0xfffffff0], dtype=np.uint32), np.array([0x55], dtype=np.uint8), 1]'
      - '[np.array([0xffff, 6], dtype=np.uint32), np.array([0x10000, 3], dtype=np.uint32), np.array([0x5a], dtype=np.uint8), 2]'
      - '[np.linspace(0x10000000, 0xffffffff, 8, dtype=np.uint32), np.linspace(0x10000001, 0xffffffff, 8, dtype=np.uint32), np.array([0x55, 0xaa], dtype=np.uint8), 8]'
      - '[np.linspace(0x10000000, 0xffffffff, 31, dtype=np.uint32), np.linspace(0x10000001, 0xffffffff, 31, dtype=np.uint32), np.linspace(0x0, 0xf, 4, dtype=np.uint8), 31]'
      - '[np.linspace(0x10000000, 0xffffffff, 32, dtype=np.uint32), np.linspace(0x10000001, 0xffffffff, 32, dtype=np.uint32), np.linspace(0x0, 0xf, 4, dtype=np.uint8), 32]'
    
  check:
    test_vmxxx_vv: np.array_equal(result, golden)
    test_vmxxx_vv_with_mask: np.array_equal(result, golden)

vmadc_vv:
  <<: *default

  cases:
    test_vmxxx_vv @ vs2, vs1, vlen @ ebits=32, ldins='vle32.v':
      - '[np.array([4], dtype=np.uint32), np.array([4], dtype=np.uint32), 1]'
      - '[np.array([0xfffffff0], dtype=np.uint32), np.array([0xfffffff0], dtype=np.uint32), 1]'
      - '[np.array([0xffff, 6], dtype=np.uint32), np.array([0x10000, 3], dtype=np.uint32), 2]'
      - '[np.linspace(0x10000000, 0xffffffff, 8, dtype=np.uint32), np.linspace(0x10000001, 0xffffffff, 8, dtype=np.uint32), 8]'
      - '[np.linspace(0x10000000, 0xffffffff, 31, dtype=np.uint32), np.linspace(0x10000001, 0xffffffff, 31, dtype=np.uint32), 31]'
      - '[np.linspace(0x10000000, 0xffffffff, 32, dtype=np.uint32), np.linspace(0x10000001, 0xffffffff, 32, dtype=np.uint32), 32]'

  check:
    test_vmxxx_vv: np.array_equal(result, golden)

vmsbc_vv:
  <<: *default

  cases:
    test_vmxxx_vv @ vs2, vs1, vlen @ ebits=32, ldins='vle32.v':
      - '[np.array([4], dtype=np.uint32), np.array([4], dtype=np.uint32), 1]'
      - '[np.array([0xfffffff0], dtype=np.uint32), np.array([0xfffffff0], dtype=np.uint32), 1]'
      - '[np.array([0xffff, 6], dtype=np.uint32), np.array([0x10000, 3], dtype=np.uint32), 2]'
      - '[np.linspace(0x10000000, 0xffffffff, 8, dtype=np.uint32), np.linspace(0x10000001, 0xffffffff, 8, dtype=np.uint32), 8]'
      - '[np.linspace(0x10000000, 0xffffffff, 31, dtype=np.uint32), np.linspace(0x10000001, 0xffffffff, 31, dtype=np.uint32), 31]'
      - '[np.linspace(0x10000000, 0xffffffff, 32, dtype=np.uint32), np.linspace(0x10000001, 0xffffffff, 32, dtype=np.uint32), 32]'
    
  check:
    test_vmxxx_vv: np.array_equal(result, golden)

vmseq_vv: &signed
  <<: *default

  cases:
    test_vmxxx_vv @ vs2, vs1, vlen @ ebits=32, ldins='vle32.v':
      - '[np.array([4], dtype=np.int32), np.array([4], dtype=np.int32), 1]'
      - '[np.array([0xfffffff0], dtype=np.int32), np.array([0xfffffff0], dtype=np.int32), 1]'
      - '[np.array([0xffff, 6], dtype=np.int32), np.array([0x10000, 3], dtype=np.int32), 2]'
      - '[np.linspace(0x10000000, 0xffffffff, 8, dtype=np.int32), np.linspace(0x10000001, 0xffffffff, 8, dtype=np.int32), 8]'
      - '[np.linspace(0x10000000, 0xffffffff, 31, dtype=np.int32), np.linspace(0x10000001, 0xffffffff, 31, dtype=np.int32), 31]'
      - '[np.linspace(0x10000000, 0xffffffff, 32, dtype=np.int32), np.linspace(0x10000001, 0xffffffff, 32, dtype=np.int32), 32]'
    
    test_vmxxx_vv_with_mask @ vs2, vs1, mask, vlen @ ebits=32, ldins='vle32.v':
      - '[np.array([4], dtype=np.int32), np.array([4], dtype=np.int32), np.array([0xaa], dtype=np.uint8), 1]'
      - '[np.array([0xfffffff0], dtype=np.int32), np.array([0xfffffff0], dtype=np.int32), np.array([0x55], dtype=np.uint8), 1]'
      - '[np.array([0xffff, 6], dtype=np.int32), np.array([0x10000, 3], dtype=np.int32), np.array([0x5a], dtype=np.uint8), 2]'
      - '[np.linspace(0x10000000, 0xffffffff, 8, dtype=np.int32), np.linspace(0x10000001, 0xffffffff, 8, dtype=np.int32), np.array([0x55, 0xaa], dtype=np.uint8), 8]'
      - '[np.linspace(0x10000000, 0xffffffff, 31, dtype=np.int32), np.linspace(0x10000001, 0xffffffff, 31, dtype=np.int32), np.linspace(0x0, 0xf, 4, dtype=np.uint8), 31]'
      - '[np.linspace(0x10000000, 0xffffffff, 32, dtype=np.int32), np.linspace(0x10000001, 0xffffffff, 32, dtype=np.int32), np.linspace(0x0, 0xf, 4, dtype=np.uint8), 32]'

vmsne_vv:
  <<: *signed


vmsltu_vv:
  <<: *default

vmslt_vv:
  <<: *signed

vmsleu_vv:
  <<: *default

vmsle_vv:
  <<: *signed
