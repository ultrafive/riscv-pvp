_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  _templates: &_templates
    test_basic_without_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, {vs1_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu; 
          la a1, {vs1_data} ; 
          la a2, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {ldins} v2, (a2) ;
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu; 
          la a3, {vd_data} ; 
          {ldins_vd} v4, (a3) ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu; 
          {name} v4, v1, v2;
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;  
          la a3, test_{num}_data ; 
          {stins} v4, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs1_shape[0]}, ({ebits}*2/8), 0; 
          .popsection
    test_special_without_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, {vs1_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu; 
          la a1, {vs1_data} ; 
          la a2, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {ldins} v2, (a2) ;
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu; 
          la a3, {vd_data} ; 
          {ldins_vd} v4, (a3) ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu; 
          {name} v4, v1, v2;
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;  
          la a3, test_{num}_data ; 
          {stins} v4, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs1_shape[0]}, ({ebits}*2/8), 0; 
          .popsection
    test_vs1_eq_vs2_without_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, {vs1_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu; 
          la a1, {vs1_data} ; 
          {ldins} v1, (a1) ; 
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu; 
          la a3, {vd_data} ; 
          {ldins_vd} v4, (a3) ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu; 
          {name} v4, v1, v1;
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;  
          la a3, test_{num}_data ; 
          {stins} v4, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs1_shape[0]}, ({ebits}*2/8), 0; 
          .popsection
    test_basic_with_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, {vs1_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu; 
          la a1, {vs1_data} ; 
          la a2, {vs2_data} ; 
          la a4, {mask_data} ; 
          {ldins} v1, (a1) ; 
          {ldins} v2, (a2) ; 
          vle1.v v0, (a4) ;
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu; 
          la a3, {vd_data} ;
          {ldins_vd} v4, (a3) ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu; 
          {name} v4, v1, v2, v0.t ;
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu; 
          la a3, test_{num}_data ; 
          {stins} v4, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs1_shape[0]}, ({ebits}*2/8), 0; 
          .popsection

  templates: 
    <<: *_templates
    test_basic_without_mask @vd, vs1, vs2 @ ebits=32, ebits_vd=64, ldins='vle32.v', ldins_vd='vle64.v', stins='vse64.v': |
      {inherit}
    test_special_without_mask @ vd, vs1, vs2 @ ebits=32, ebits_vd=64, ldins='vle32.v', ldins_vd='vle64.v', stins='vse64.v': |
      {inherit}
    test_vs1_eq_vs2_without_mask @ vd, vs1 @ vs2=vs1, ebits_vd=64, ebits=32, ldins='vle32.v', ldins_vd='vle64.v', stins='vse64.v': |
      {inherit}
    test_basic_with_mask @ vd, vs1, vs2, mask, vlen @ ebits=32, ebits_vd=64, ldins='vle32.v', ldins_vd='vle64.v', stins='vse64.v': |
      {inherit}

  cases:
    test_basic_without_mask: 
      - linspace_rvv_m_vv_w(np.float32, 1)
      - linspace_rvv_m_vv_w(np.float32, 4)
      - linspace_rvv_m_vv_w(np.float32, 10)
      - linspace_rvv_m_vv_w(np.float32, 32)
    test_special_without_mask:
      - "[ linspace_rvv_v_special(np.float64, 0, 32), linspace_rvv_v_special(np.float32, 1, 32), linspace_rvv_v_special(np.float32, 2, 32) ]"
    test_vs1_eq_vs2_without_mask:
      - linspace_rvv_m_v(np.float32, 1)
      - linspace_rvv_m_v(np.float32, 4)
      - linspace_rvv_m_v(np.float32, 10) 
      - linspace_rvv_m_v(np.float32, 32)           
    test_basic_with_mask:
      - linspace_rvv_m_vv_w_with_mask(np.float32, 1)
      - linspace_rvv_m_vv_w_with_mask(np.float32, 4)
      - linspace_rvv_m_vv_w_with_mask(np.float32, 10)
      - linspace_rvv_m_vv_w_with_mask(np.float32, 32)
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_vs1_eq_vs2_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)


vfwmacc_vv:
  <<: *default

vfwnmacc_vv:
  <<: *default
  
vfwmsac_vv:
  <<: *default
  
vfwnmsac_vv:
  <<: *default
  


  