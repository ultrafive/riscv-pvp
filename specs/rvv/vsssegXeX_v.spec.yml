_: &default
  head: |
    #undef EXTRA_INIT
    #define EXTRA_INIT                               \
      /* Set up a PMP to permit all accesses */      \
      li t0, 0xc0200000;                       \
      srli t0, t0, 2;                                \
      csrw pmpaddr0, t0;                             \
      li t0, PMP_TOR | PMP_R | PMP_W | PMP_X;        \
      csrw pmpcfg0, t0; 
    #include "exception.h"
    #include "test_macros_v.h"
    #define ST_ADDR 0x90000000
    #define END_ADDR 0xC0000000
  env: RVTEST_RV64UV
  templates:
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
<<<<<<< Updated upstream
        li a0, {vl};
        li a1, {rs2};
        la a2, {vs3_data};
=======
        
        li a0, {vlen};
        la a1, {vs3_data};

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_stride_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_x0_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), x0;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection
    
    test_eew_neq_sew_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_vstart_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_tu_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        COPY_STRIDE_SRC(ST_ADDR, END_ADDR, {origin_data}, {vlen}, {nf}, {rs2}, {eew}/8)
        li a0, {vlen};
        la a1, {vs3_data};
        la a2, {origin_data}

>>>>>>> Stashed changes
        la a3, test_{num}_data;
        li a4, VLEN*8/{eew};
        vsetvli t0, a4, e{eew},m8,ta,mu;
        vle{eew}.v v16, (a2);
        vse{eew}.v v16, (a3);
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_misalign_without_mask: |
      test_{num}:
        li t0, 6;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};
      
        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        addi a1, a1, {offset};
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2;
        li a4, {isExcept}
        beqz a4, 11f;
        j fail;
      11:
        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)
      test_{num}_end:
        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_misalign_stride_without_mask: |
      test_{num}:
        li t0, 6;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};
      
        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2;
        li a4, {isExcept}
        beqz a4, 11f;
        j fail;
      11:
        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)
      test_{num}_end:
        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
<<<<<<< Updated upstream
        .fill (({vl} - 1) * {rs2} + {nfields}), ({ebits}/8), 0;
=======
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
>>>>>>> Stashed changes
        .popsection

    test_regression_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection



    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num};
<<<<<<< Updated upstream
        li a0, {vl};
        li a1, {rs2};
        la a2, {vs3_data};
=======
        
        li a0, {vlen};
        la a1, {vs3_data};
        la a2, {mask_data};

        li a3, ({vlen}+7)/8;
        vsetvli t0, a3, e8,m1,ta,mu;
        vle8.v v0, (a2);

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2, v0.t;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_stride_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};
        la a2, {mask_data};

        li a3, ({vlen}+7)/8;
        vsetvli t0, a3, e8,m1,ta,mu;
        vle8.v v0, (a2);

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2, v0.t;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_x0_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};
        la a2, {mask_data};

        li a3, ({vlen}+7)/8;
        vsetvli t0, a3, e8,m1,ta,mu;
        vle8.v v0, (a2);

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), x0, v0.t;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_eew_neq_sew_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};
        la a2, {mask_data};

        li a3, ({vlen}+7)/8;
        vsetvli t0, a3, e8,m1,ta,mu;
        vle8.v v0, (a2);

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2, v0.t;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_vstart_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};
        la a2, {mask_data};

        li a3, ({vlen}+7)/8;
        vsetvli t0, a3, e8,m1,ta,mu;
        vle8.v v0, (a2);

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2, v0.t;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_tu_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        COPY_STRIDE_SRC(ST_ADDR, END_ADDR, {origin_data}, {vlen}, {nf}, {rs2}, {eew}/8)

        li a0, {vlen};
        la a1, {vs3_data};
        la a2, {mask_data};
>>>>>>> Stashed changes
        la a3, test_{num}_data;
        la a4, {origin_data}

        li a5, ({vlen}+7)/8;
        vsetvli t0, a5, e8,m1,ta,mu;
        vle8.v v0, (a2);

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v16, (a4);
        vse{eew}.v v16, (a3);
        vle{eew}.v v8, (a1);

<<<<<<< Updated upstream
        li a5, ({vl} + 7 )/ 8;
        vsetvli t0, a5, e8,m1,tu,mu;
        vle8.v v0, (a4);
=======
        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2, v0.t;
>>>>>>> Stashed changes

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
<<<<<<< Updated upstream
        .fill (({vl} - 1) * {rs2} + {nfields}), ({ebits}/8), 0;
=======
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
>>>>>>> Stashed changes
        .popsection

    test_misalign_with_mask: |
      test_{num}:
        li t0, 6;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};
        la a2, {mask_data};

        li a3, ({vlen}+7)/8;
        vsetvli t0, a3, e8,m1,ta,mu;
        vle8.v v0, (a2);

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        addi a1, a1, {offset};
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2, v0.t;
        li a4, {isExcept}
        beqz a4, 11f;
        j fail;
      11:
        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)
      test_{num}_end:
        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_misalign_stride_with_mask: |
      test_{num}:
        li t0, 6;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};
        la a2, {mask_data};

        li a3, ({vlen}+7)/8;
        vsetvli t0, a3, e8,m1,ta,mu;
        vle8.v v0, (a2);

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2, v0.t;
        li a4, {isExcept}
        beqz a4, 11f;
        j fail;
      11:
        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)
      test_{num}_end:
        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_regression_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        
        li a0, {vlen};
        la a1, {vs3_data};
        la a2, {mask_data};

        li a3, ({vlen}+7)/8;
        vsetvli t0, a3, e8,m1,ta,mu;
        vle8.v v0, (a2);

        li a2, VLEN*8/{eew};
        vsetvli t0, a2, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a1);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        li a1, ST_ADDR;
        li a2, {rs2};
        vssseg{nf}e{eew}.v v8, (a1), a2, v0.t;

        COPY_STRIDE_DST(ST_ADDR, test_{num}_data, {vlen}, {nf}, {rs2}, {eew}/8)

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill (VLEN*8/{eew}), ({eew}/8), 0;
        .popsection

    test_exception_misalign_lmul: |
      test_{num}:
        li t0, 2;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vlen};
        la a1, {vs3_data}
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        li a1, ST_ADDR;
        li a2, 64;
        vssseg{nf}e{eew}.v v3, (a1), a2;
        j fail;
      test_{num}_end:

    test_exception_emul: |
      test_{num}:
        li t0, 2;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vlen};
        la a1, {vs3_data}
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        li a1, ST_ADDR;
        li a2, 64;
        vssseg{nf}e{eew}.v v8, (a1), a2;
        j fail;
      test_{num}_end:

    test_exception_invalid_addr: |
      test_{num}:
        li t0, 7;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vlen};
        li a1, {addr};
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        li a2, 64;
        vssseg{nf}e{eew}.v v8, (a1), a2;
        j fail;
      test_{num}_end:
 

  check:
    test_basic_without_mask: np.array_equal(result, golden)
    test_stride_without_mask: np.array_equal(result, golden)
    test_x0_without_mask: np.array_equal(result, golden)
    test_eew_neq_sew_without_mask: np.array_equal(result, golden)
    test_vstart_without_mask: np.array_equal(result, golden)
    test_tu_without_mask: np.array_equal(result, golden)
    test_misalign_without_mask: np.array_equal(result, golden)
    test_misalign_stride_without_mask: np.array_equal(result, golden)
    test_regression_without_mask: np.array_equal(result, golden)
    test_basic_with_mask: np.array_equal(result, golden)
    test_stride_with_mask: np.array_equal(result, golden)
    test_x0_with_mask: np.array_equal(result, golden)
    test_eew_neq_sew_with_mask: np.array_equal(result, golden)
    test_vstart_with_mask: np.array_equal(result, golden)
    test_tu_with_mask: np.array_equal(result, golden)
    test_misalign_with_mask: np.array_equal(result, golden)
    test_misalign_stride_with_mask: np.array_equal(result, golden)
    test_regression_with_mask: np.array_equal(result, golden)

vsssegxex_v:
  <<: *default
  cases:
<<<<<<< Updated upstream
    test_basic_without_mask @ vs3, vl, lmul, inst_name, nfields, ebits, rs2, ldins @ vreg='v8':
      #sew=8
      - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int8 ),   1, 1, 'vssseg2e8.v',  2,  8, 2*1, 'vlseg2e8.v' ]"
      - "[ np.linspace( -1000, 1000,   1*3, dtype=np.int8 ),   1, 1, 'vssseg3e8.v',  3,  8, 3*1, 'vlseg3e8.v' ]"
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int8 ),   1, 1, 'vssseg4e8.v',  4,  8, 4*1, 'vlseg4e8.v' ]"
      - "[ np.linspace( -1000, 1000,   1*5, dtype=np.int8 ),   1, 1, 'vssseg5e8.v',  5,  8, 5*1, 'vlseg5e8.v' ]"
      - "[ np.linspace( -1000, 1000,   1*6, dtype=np.int8 ),   1, 1, 'vssseg6e8.v',  6,  8, 6*1, 'vlseg6e8.v' ]"
      - "[ np.linspace( -1000, 1000,   1*7, dtype=np.int8 ),   1, 1, 'vssseg7e8.v',  7,  8, 7*1, 'vlseg7e8.v' ]"
      - "[ np.linspace( -1000, 1000,   1*8, dtype=np.int8 ),   1, 1, 'vssseg8e8.v',  8,  8, 8*1, 'vlseg8e8.v' ]"
      - "[ np.linspace( -1000, 1000,  10*2, dtype=np.int8 ),  10, 1, 'vssseg2e8.v',  2,  8, 2*1, 'vlseg2e8.v' ]"
      - "[ np.linspace( -1000, 1000,  10*3, dtype=np.int8 ),  10, 1, 'vssseg3e8.v',  3,  8, 3*1, 'vlseg3e8.v' ]"
      - "[ np.linspace( -1000, 1000,  10*4, dtype=np.int8 ),  10, 1, 'vssseg4e8.v',  4,  8, 4*1, 'vlseg4e8.v' ]"
      - "[ np.linspace( -1000, 1000,  10*5, dtype=np.int8 ),  10, 1, 'vssseg5e8.v',  5,  8, 5*1, 'vlseg5e8.v' ]"
      - "[ np.linspace( -1000, 1000,  10*6, dtype=np.int8 ),  10, 1, 'vssseg6e8.v',  6,  8, 6*1, 'vlseg6e8.v' ]"
      - "[ np.linspace( -1000, 1000,  10*7, dtype=np.int8 ),  10, 1, 'vssseg7e8.v',  7,  8, 7*1, 'vlseg7e8.v' ]"
      - "[ np.linspace( -1000, 1000,  10*8, dtype=np.int8 ),  10, 1, 'vssseg8e8.v',  8,  8, 8*1, 'vlseg8e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 128*2, dtype=np.int8 ), 128, 1, 'vssseg2e8.v',  2,  8, 2*1, 'vlseg2e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 128*3, dtype=np.int8 ), 128, 1, 'vssseg3e8.v',  3,  8, 3*1, 'vlseg3e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 128*4, dtype=np.int8 ), 128, 1, 'vssseg4e8.v',  4,  8, 4*1, 'vlseg4e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 128*5, dtype=np.int8 ), 128, 1, 'vssseg5e8.v',  5,  8, 5*1, 'vlseg5e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 128*6, dtype=np.int8 ), 128, 1, 'vssseg6e8.v',  6,  8, 6*1, 'vlseg6e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 128*7, dtype=np.int8 ), 128, 1, 'vssseg7e8.v',  7,  8, 7*1, 'vlseg7e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 128*8, dtype=np.int8 ), 128, 1, 'vssseg8e8.v',  8,  8, 8*1, 'vlseg8e8.v' ]"
                                                                                                             
      #sew=8, lmul=2                                                                                         
      - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int8 ),   1, 2, 'vssseg2e8.v',  2,  8, 2*1, 'vlseg2e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 129*2, dtype=np.int8 ), 129, 2, 'vssseg2e8.v',  2,  8, 2*1, 'vlseg2e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 256*2, dtype=np.int8 ), 256, 2, 'vssseg2e8.v',  2,  8, 2*1, 'vlseg2e8.v' ]"                                                  
      # - "[ np.linspace( -1000, 1000,   1*3, dtype=np.int8 ),   1, 2, 'vssseg3e8.v',  3,  8, 3*1, 'vlseg3e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 129*3, dtype=np.int8 ), 129, 2, 'vssseg3e8.v',  3,  8, 3*1, 'vlseg3e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 256*3, dtype=np.int8 ), 256, 2, 'vssseg3e8.v',  3,  8, 3*1, 'vlseg3e8.v' ]"
                                                                                                             
      # - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int8 ),   1, 2, 'vssseg4e8.v',  4,  8, 4*1, 'vlseg4e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 129*4, dtype=np.int8 ), 129, 2, 'vssseg4e8.v',  4,  8, 4*1, 'vlseg4e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 256*4, dtype=np.int8 ), 256, 2, 'vssseg4e8.v',  4,  8, 4*1, 'vlseg4e8.v' ]"
                                                                                                             
      #sew=8, lmul=4                                                                                         
      - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int8 ),   1, 4, 'vssseg2e8.v',  2,  8, 2*1, 'vlseg2e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 129*2, dtype=np.int8 ), 129, 4, 'vssseg2e8.v',  2,  8, 2*1, 'vlseg2e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 257*2, dtype=np.int8 ), 257, 4, 'vssseg2e8.v',  2,  8, 2*1, 'vlseg2e8.v' ]"
      # - "[ np.linspace( -1000, 1000, 512*2, dtype=np.int8 ), 512, 4, 'vssseg2e8.v',  2,  8, 2*1, 'vlseg2e8.v' ]"
                                                                                                             
      #sew=16                                                                                                
      - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int16),   1, 1, 'vssseg2e16.v', 2, 16, 2*2, 'vlseg2e16.v']"
      - "[ np.linspace( -1000, 1000,   1*3, dtype=np.int16),   1, 1, 'vssseg3e16.v', 3, 16, 3*2, 'vlseg3e16.v']"
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int16),   1, 1, 'vssseg4e16.v', 4, 16, 4*2, 'vlseg4e16.v']"
      - "[ np.linspace( -1000, 1000,   1*5, dtype=np.int16),   1, 1, 'vssseg5e16.v', 5, 16, 5*2, 'vlseg5e16.v']"
      - "[ np.linspace( -1000, 1000,   1*6, dtype=np.int16),   1, 1, 'vssseg6e16.v', 6, 16, 6*2, 'vlseg6e16.v']"
      - "[ np.linspace( -1000, 1000,   1*7, dtype=np.int16),   1, 1, 'vssseg7e16.v', 7, 16, 7*2, 'vlseg7e16.v']"
      - "[ np.linspace( -1000, 1000,   1*8, dtype=np.int16),   1, 1, 'vssseg8e16.v', 8, 16, 8*2, 'vlseg8e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*2, dtype=np.int16),  10, 1, 'vssseg2e16.v', 2, 16, 2*2, 'vlseg2e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*3, dtype=np.int16),  10, 1, 'vssseg3e16.v', 3, 16, 3*2, 'vlseg3e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*4, dtype=np.int16),  10, 1, 'vssseg4e16.v', 4, 16, 4*2, 'vlseg4e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*5, dtype=np.int16),  10, 1, 'vssseg5e16.v', 5, 16, 5*2, 'vlseg5e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*6, dtype=np.int16),  10, 1, 'vssseg6e16.v', 6, 16, 6*2, 'vlseg6e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*7, dtype=np.int16),  10, 1, 'vssseg7e16.v', 7, 16, 7*2, 'vlseg7e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*8, dtype=np.int16),  10, 1, 'vssseg8e16.v', 8, 16, 8*2, 'vlseg8e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*2, dtype=np.int16),  64, 1, 'vssseg2e16.v', 2, 16, 2*2, 'vlseg2e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*3, dtype=np.int16),  64, 1, 'vssseg3e16.v', 3, 16, 3*2, 'vlseg3e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*4, dtype=np.int16),  64, 1, 'vssseg4e16.v', 4, 16, 4*2, 'vlseg4e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*5, dtype=np.int16),  64, 1, 'vssseg5e16.v', 5, 16, 5*2, 'vlseg5e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*6, dtype=np.int16),  64, 1, 'vssseg6e16.v', 6, 16, 6*2, 'vlseg6e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*7, dtype=np.int16),  64, 1, 'vssseg7e16.v', 7, 16, 7*2, 'vlseg7e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*8, dtype=np.int16),  64, 1, 'vssseg8e16.v', 8, 16, 8*2, 'vlseg8e16.v']"
                                                                                                             
      #sew=16, lmul=2                                                                                        
      - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int16),   1, 2, 'vssseg2e16.v', 2, 16, 2*2, 'vlseg2e16.v']"
      - "[ np.linspace( -1000, 1000,  65*2, dtype=np.int16),  65, 2, 'vssseg2e16.v', 2, 16, 2*2, 'vlseg2e16.v']"
      # - "[ np.linspace( -1000, 1000, 128*2, dtype=np.int16), 128, 2, 'vssseg2e16.v', 2, 16, 2*2, 'vlseg2e16.v']"
                                                                                                             
      # - "[ np.linspace( -1000, 1000,   1*3, dtype=np.int16),   1, 2, 'vssseg3e16.v', 3, 16, 3*2, 'vlseg3e16.v']"
      # - "[ np.linspace( -1000, 1000,  65*3, dtype=np.int16),  65, 2, 'vssseg3e16.v', 3, 16, 3*2, 'vlseg3e16.v']"
      # - "[ np.linspace( -1000, 1000, 128*3, dtype=np.int16), 128, 2, 'vssseg3e16.v', 3, 16, 3*2, 'vlseg3e16.v']"
                                                                                                             
      # - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int16),   1, 2, 'vssseg4e16.v', 4, 16, 4*2, 'vlseg4e16.v']"
      # - "[ np.linspace( -1000, 1000,  65*4, dtype=np.int16),  65, 2, 'vssseg4e16.v', 4, 16, 4*2, 'vlseg4e16.v']"
      # - "[ np.linspace( -1000, 1000, 128*4, dtype=np.int16), 128, 2, 'vssseg4e16.v', 4, 16, 4*2, 'vlseg4e16.v']"
                                                                                                             
      # #sew=16, lmul=4                                                                                        
      # - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int16),   1, 4, 'vssseg2e16.v', 2, 16, 2*2, 'vlseg2e16.v']"
      # - "[ np.linspace( -1000, 1000,  65*2, dtype=np.int16),  65, 4, 'vssseg2e16.v', 2, 16, 2*2, 'vlseg2e16.v']"
      # - "[ np.linspace( -1000, 1000, 129*2, dtype=np.int16), 129, 4, 'vssseg2e16.v', 2, 16, 2*2, 'vlseg2e16.v']"
      # - "[ np.linspace( -1000, 1000, 256*2, dtype=np.int16), 256, 4, 'vssseg2e16.v', 2, 16, 2*2, 'vlseg2e16.v']"
                                                                                                             
      #sew=32                                                                                                
      - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int32),   1, 1, 'vssseg2e32.v', 2, 32, 2*4, 'vlseg2e32.v']"
      - "[ np.linspace( -1000, 1000,   1*3, dtype=np.int32),   1, 1, 'vssseg3e32.v', 3, 32, 3*4, 'vlseg3e32.v']"
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int32),   1, 1, 'vssseg4e32.v', 4, 32, 4*4, 'vlseg4e32.v']"
      - "[ np.linspace( -1000, 1000,   1*5, dtype=np.int32),   1, 1, 'vssseg5e32.v', 5, 32, 5*4, 'vlseg5e32.v']"
      - "[ np.linspace( -1000, 1000,   1*6, dtype=np.int32),   1, 1, 'vssseg6e32.v', 6, 32, 6*4, 'vlseg6e32.v']"
      - "[ np.linspace( -1000, 1000,   1*7, dtype=np.int32),   1, 1, 'vssseg7e32.v', 7, 32, 7*4, 'vlseg7e32.v']"
      - "[ np.linspace( -1000, 1000,   1*8, dtype=np.int32),   1, 1, 'vssseg8e32.v', 8, 32, 8*4, 'vlseg8e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*2, dtype=np.int32),  10, 1, 'vssseg2e32.v', 2, 32, 2*4, 'vlseg2e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*3, dtype=np.int32),  10, 1, 'vssseg3e32.v', 3, 32, 3*4, 'vlseg3e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*4, dtype=np.int32),  10, 1, 'vssseg4e32.v', 4, 32, 4*4, 'vlseg4e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*5, dtype=np.int32),  10, 1, 'vssseg5e32.v', 5, 32, 5*4, 'vlseg5e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*6, dtype=np.int32),  10, 1, 'vssseg6e32.v', 6, 32, 6*4, 'vlseg6e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*7, dtype=np.int32),  10, 1, 'vssseg7e32.v', 7, 32, 7*4, 'vlseg7e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*8, dtype=np.int32),  10, 1, 'vssseg8e32.v', 8, 32, 8*4, 'vlseg8e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*2, dtype=np.int32),  32, 1, 'vssseg2e32.v', 2, 32, 2*4, 'vlseg2e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*3, dtype=np.int32),  32, 1, 'vssseg3e32.v', 3, 32, 3*4, 'vlseg3e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*4, dtype=np.int32),  32, 1, 'vssseg4e32.v', 4, 32, 4*4, 'vlseg4e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*5, dtype=np.int32),  32, 1, 'vssseg5e32.v', 5, 32, 5*4, 'vlseg5e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*6, dtype=np.int32),  32, 1, 'vssseg6e32.v', 6, 32, 6*4, 'vlseg6e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*7, dtype=np.int32),  32, 1, 'vssseg7e32.v', 7, 32, 7*4, 'vlseg7e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*8, dtype=np.int32),  32, 1, 'vssseg8e32.v', 8, 32, 8*4, 'vlseg8e32.v']"
                                                                                                             
      #sew=32, lmul=2                                                                                        
      - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int32),   1, 2, 'vssseg2e32.v', 2, 32, 2*4, 'vlseg2e32.v']"
      - "[ np.linspace( -1000, 1000,  33*2, dtype=np.int32),  33, 2, 'vssseg2e32.v', 2, 32, 2*4, 'vlseg2e32.v']"
      - "[ np.linspace( -1000, 1000,  64*2, dtype=np.int32),  64, 2, 'vssseg2e32.v', 2, 32, 2*4, 'vlseg2e32.v']"
                                                                                                             
      - "[ np.linspace( -1000, 1000,   1*3, dtype=np.int32),   1, 2, 'vssseg3e32.v', 3, 32, 3*4, 'vlseg3e32.v']"
      - "[ np.linspace( -1000, 1000,  33*3, dtype=np.int32),  33, 2, 'vssseg3e32.v', 3, 32, 3*4, 'vlseg3e32.v']"
      - "[ np.linspace( -1000, 1000,  64*3, dtype=np.int32),  64, 2, 'vssseg3e32.v', 3, 32, 3*4, 'vlseg3e32.v']"
                                                                                                             
      # - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int32),   1, 2, 'vssseg4e32.v', 4, 32, 4*4, 'vlseg4e32.v']"
      # - "[ np.linspace( -1000, 1000,  33*4, dtype=np.int32),  33, 2, 'vssseg4e32.v', 4, 32, 4*4, 'vlseg4e32.v']"
      # - "[ np.linspace( -1000, 1000,  64*4, dtype=np.int32),  64, 2, 'vssseg4e32.v', 4, 32, 4*4, 'vlseg4e32.v']"
                                                                                                             
      # #sew=32, lmul=4                                                                                        
      # - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int32),   1, 4, 'vssseg2e32.v', 2, 32, 2*4, 'vlseg2e32.v']"
      # - "[ np.linspace( -1000, 1000,  33*2, dtype=np.int32),  33, 4, 'vssseg2e32.v', 2, 32, 2*4, 'vlseg2e32.v']"
      # - "[ np.linspace( -1000, 1000,  65*2, dtype=np.int32),  65, 4, 'vssseg2e32.v', 2, 32, 2*4, 'vlseg2e32.v']"
      # - "[ np.linspace( -1000, 1000, 128*2, dtype=np.int32), 128, 4, 'vssseg2e32.v', 2, 32, 2*4, 'vlseg2e32.v']"
                                                                                                             
      #sew=64                                                                                                
      - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int64),   1, 1, 'vssseg2e64.v', 2, 64, 2*8, 'vlseg2e64.v']"
      - "[ np.linspace( -1000, 1000,   1*3, dtype=np.int64),   1, 1, 'vssseg3e64.v', 3, 64, 3*8, 'vlseg3e64.v']"
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int64),   1, 1, 'vssseg4e64.v', 4, 64, 4*8, 'vlseg4e64.v']"
      - "[ np.linspace( -1000, 1000,   1*5, dtype=np.int64),   1, 1, 'vssseg5e64.v', 5, 64, 5*8, 'vlseg5e64.v']"
      - "[ np.linspace( -1000, 1000,   1*6, dtype=np.int64),   1, 1, 'vssseg6e64.v', 6, 64, 6*8, 'vlseg6e64.v']"
      - "[ np.linspace( -1000, 1000,   1*7, dtype=np.int64),   1, 1, 'vssseg7e64.v', 7, 64, 7*8, 'vlseg7e64.v']"
      - "[ np.linspace( -1000, 1000,   1*8, dtype=np.int64),   1, 1, 'vssseg8e64.v', 8, 64, 8*8, 'vlseg8e64.v']"
      - "[ np.linspace( -1000, 1000,  10*2, dtype=np.int64),  10, 1, 'vssseg2e64.v', 2, 64, 2*8, 'vlseg2e64.v']"
      - "[ np.linspace( -1000, 1000,  10*3, dtype=np.int64),  10, 1, 'vssseg3e64.v', 3, 64, 3*8, 'vlseg3e64.v']"
      - "[ np.linspace( -1000, 1000,  10*4, dtype=np.int64),  10, 1, 'vssseg4e64.v', 4, 64, 4*8, 'vlseg4e64.v']"
      - "[ np.linspace( -1000, 1000,  10*5, dtype=np.int64),  10, 1, 'vssseg5e64.v', 5, 64, 5*8, 'vlseg5e64.v']"
      - "[ np.linspace( -1000, 1000,  10*6, dtype=np.int64),  10, 1, 'vssseg6e64.v', 6, 64, 6*8, 'vlseg6e64.v']"
      - "[ np.linspace( -1000, 1000,  10*7, dtype=np.int64),  10, 1, 'vssseg7e64.v', 7, 64, 7*8, 'vlseg7e64.v']"
      - "[ np.linspace( -1000, 1000,  10*8, dtype=np.int64),  10, 1, 'vssseg8e64.v', 8, 64, 8*8, 'vlseg8e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*2, dtype=np.int64),  16, 1, 'vssseg2e64.v', 2, 64, 2*8, 'vlseg2e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*3, dtype=np.int64),  16, 1, 'vssseg3e64.v', 3, 64, 3*8, 'vlseg3e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*4, dtype=np.int64),  16, 1, 'vssseg4e64.v', 4, 64, 4*8, 'vlseg4e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*5, dtype=np.int64),  16, 1, 'vssseg5e64.v', 5, 64, 5*8, 'vlseg5e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*6, dtype=np.int64),  16, 1, 'vssseg6e64.v', 6, 64, 6*8, 'vlseg6e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*7, dtype=np.int64),  16, 1, 'vssseg7e64.v', 7, 64, 7*8, 'vlseg7e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*8, dtype=np.int64),  16, 1, 'vssseg8e64.v', 8, 64, 8*8, 'vlseg8e64.v']"
                                                                                                             
      #sew=64, lmul=2                                                                                        
      - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int64),   1, 2, 'vssseg2e64.v', 2, 64, 2*8, 'vlseg2e64.v']"
      - "[ np.linspace( -1000, 1000,  17*2, dtype=np.int64),  17, 2, 'vssseg2e64.v', 2, 64, 2*8, 'vlseg2e64.v']"
      - "[ np.linspace( -1000, 1000,  32*2, dtype=np.int64),  32, 2, 'vssseg2e64.v', 2, 64, 2*8, 'vlseg2e64.v']"
                                                                                                             
      - "[ np.linspace( -1000, 1000,   1*3, dtype=np.int64),   1, 2, 'vssseg3e64.v', 3, 64, 3*8, 'vlseg3e64.v']"
      - "[ np.linspace( -1000, 1000,  17*3, dtype=np.int64),  17, 2, 'vssseg3e64.v', 3, 64, 3*8, 'vlseg3e64.v']"
      - "[ np.linspace( -1000, 1000,  32*3, dtype=np.int64),  32, 2, 'vssseg3e64.v', 3, 64, 3*8, 'vlseg3e64.v']"
                                                                                                             
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int64),   1, 2, 'vssseg4e64.v', 4, 64, 4*8, 'vlseg4e64.v']"
      - "[ np.linspace( -1000, 1000,  17*4, dtype=np.int64),  17, 2, 'vssseg4e64.v', 4, 64, 4*8, 'vlseg4e64.v']"
      - "[ np.linspace( -1000, 1000,  32*4, dtype=np.int64),  32, 2, 'vssseg4e64.v', 4, 64, 4*8, 'vlseg4e64.v']"
                                                                                                             
      #sew=64, lmul=4                                                                                        
      - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int64),   1, 4, 'vssseg2e64.v', 2, 64, 2*8, 'vlseg2e64.v']"
      - "[ np.linspace( -1000, 1000,  17*2, dtype=np.int64),  17, 4, 'vssseg2e64.v', 2, 64, 2*8, 'vlseg2e64.v']"
      - "[ np.linspace( -1000, 1000,  33*2, dtype=np.int64),  33, 4, 'vssseg2e64.v', 2, 64, 2*8, 'vlseg2e64.v']"
      - "[ np.linspace( -1000, 1000,  64*2, dtype=np.int64),  64, 4, 'vssseg2e64.v', 2, 64, 2*8, 'vlseg2e64.v']"
                                                                                                             
      #==== stride > nf*ebyte  ======                                                                        
                                                                                                             
      #sew=8, stride = (nf+1)*ebyte                                                                          
      - "[ np.linspace( -1000, 1000,   1*3, dtype=np.int8 ),   1, 1, 'vssseg2e8.v',  2,  8, 3*1, 'vlseg2e8.v',]"
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int8 ),   1, 1, 'vssseg3e8.v',  3,  8, 4*1, 'vlseg3e8.v',]"
      - "[ np.linspace( -1000, 1000,   1*5, dtype=np.int8 ),   1, 1, 'vssseg4e8.v',  4,  8, 5*1, 'vlseg4e8.v',]"
      - "[ np.linspace( -1000, 1000,   1*6, dtype=np.int8 ),   1, 1, 'vssseg5e8.v',  5,  8, 6*1, 'vlseg5e8.v',]"
      - "[ np.linspace( -1000, 1000,   1*7, dtype=np.int8 ),   1, 1, 'vssseg6e8.v',  6,  8, 7*1, 'vlseg6e8.v',]"
      - "[ np.linspace( -1000, 1000,   1*8, dtype=np.int8 ),   1, 1, 'vssseg7e8.v',  7,  8, 8*1, 'vlseg7e8.v',]"
      # - "[ np.linspace( -1000, 1000,   1*9, dtype=np.int8 ),   1, 1, 'vssseg8e8.v',  8,  8, 9*1, 'vlseg8e8.v',]"
      # - "[ np.linspace( -1000, 1000,  10*3, dtype=np.int8 ),  10, 1, 'vssseg2e8.v',  2,  8, 3*1, 'vlseg2e8.v',]"
      # - "[ np.linspace( -1000, 1000,  10*4, dtype=np.int8 ),  10, 1, 'vssseg3e8.v',  3,  8, 4*1, 'vlseg3e8.v',]"
      # - "[ np.linspace( -1000, 1000,  10*5, dtype=np.int8 ),  10, 1, 'vssseg4e8.v',  4,  8, 5*1, 'vlseg4e8.v',]"
      # - "[ np.linspace( -1000, 1000,  10*6, dtype=np.int8 ),  10, 1, 'vssseg5e8.v',  5,  8, 6*1, 'vlseg5e8.v',]"
      # - "[ np.linspace( -1000, 1000,  10*7, dtype=np.int8 ),  10, 1, 'vssseg6e8.v',  6,  8, 7*1, 'vlseg6e8.v',]"
      # - "[ np.linspace( -1000, 1000,  10*8, dtype=np.int8 ),  10, 1, 'vssseg7e8.v',  7,  8, 8*1, 'vlseg7e8.v',]"
      # - "[ np.linspace( -1000, 1000,  10*9, dtype=np.int8 ),  10, 1, 'vssseg8e8.v',  8,  8, 9*1, 'vlseg8e8.v',]"
      # - "[ np.linspace( -1000, 1000, 128*3, dtype=np.int8 ), 128, 1, 'vssseg2e8.v',  2,  8, 3*1, 'vlseg2e8.v',]"
      # - "[ np.linspace( -1000, 1000, 128*4, dtype=np.int8 ), 128, 1, 'vssseg3e8.v',  3,  8, 4*1, 'vlseg3e8.v',]"
      # - "[ np.linspace( -1000, 1000, 128*5, dtype=np.int8 ), 128, 1, 'vssseg4e8.v',  4,  8, 5*1, 'vlseg4e8.v',]"
      # - "[ np.linspace( -1000, 1000, 128*6, dtype=np.int8 ), 128, 1, 'vssseg5e8.v',  5,  8, 6*1, 'vlseg5e8.v',]"
      # - "[ np.linspace( -1000, 1000, 128*7, dtype=np.int8 ), 128, 1, 'vssseg6e8.v',  6,  8, 7*1, 'vlseg6e8.v',]"
      # - "[ np.linspace( -1000, 1000, 128*8, dtype=np.int8 ), 128, 1, 'vssseg7e8.v',  7,  8, 8*1, 'vlseg7e8.v',]"
      # - "[ np.linspace( -1000, 1000, 128*9, dtype=np.int8 ), 128, 1, 'vssseg8e8.v',  8,  8, 9*1, 'vlseg8e8.v',]"
                                                                                                             
      #sew=8, lmul=2, stride = (nf+2)*ebyte                                                                  
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int8 ),   1, 2, 'vssseg2e8.v',  2,  8, 4*1, 'vlseg2e8.v',]"
      - "[ np.linspace( -1000, 1000, 129*4, dtype=np.int8 ), 129, 2, 'vssseg2e8.v',  2,  8, 4*1, 'vlseg2e8.v',]"
      # - "[ np.linspace( -1000, 1000, 256*4, dtype=np.int8 ), 256, 2, 'vssseg2e8.v',  2,  8, 4*1, 'vlseg2e8.v',]"
                                                                                                             
      # - "[ np.linspace( -1000, 1000,   1*5, dtype=np.int8 ),   1, 2, 'vssseg3e8.v',  3,  8, 5*1, 'vlseg3e8.v',]"
      # - "[ np.linspace( -1000, 1000, 129*5, dtype=np.int8 ), 129, 2, 'vssseg3e8.v',  3,  8, 5*1, 'vlseg3e8.v',]"
      # - "[ np.linspace( -1000, 1000, 256*5, dtype=np.int8 ), 256, 2, 'vssseg3e8.v',  3,  8, 5*1, 'vlseg3e8.v',]"
                                                                                                             
      # - "[ np.linspace( -1000, 1000,   1*6, dtype=np.int8 ),   1, 2, 'vssseg4e8.v',  4,  8, 6*1, 'vlseg4e8.v',]"
      # - "[ np.linspace( -1000, 1000, 129*6, dtype=np.int8 ), 129, 2, 'vssseg4e8.v',  4,  8, 6*1, 'vlseg4e8.v',]"
      # - "[ np.linspace( -1000, 1000, 256*6, dtype=np.int8 ), 256, 2, 'vssseg4e8.v',  4,  8, 6*1, 'vlseg4e8.v',]"
                                                                                                             
      # #sew=8, lmul=4, stride = (nf+5)*ebyte                                                                  
      # - "[ np.linspace( -1000, 1000,   1*7, dtype=np.int8 ),   1, 4, 'vssseg2e8.v',  2,  8, 7*1, 'vlseg2e8.v',]"
      # - "[ np.linspace( -1000, 1000, 129*7, dtype=np.int8 ), 129, 4, 'vssseg2e8.v',  2,  8, 7*1, 'vlseg2e8.v',]"
      # - "[ np.linspace( -1000, 1000, 257*7, dtype=np.int8 ), 257, 4, 'vssseg2e8.v',  2,  8, 7*1, 'vlseg2e8.v',]"
      # - "[ np.linspace( -1000, 1000, 512*7, dtype=np.int8 ), 512, 4, 'vssseg2e8.v',  2,  8, 7*1, 'vlseg2e8.v',]"
                                                                                                             
      #sew=16, stride = (nf + ?)*ebyte                                                                       
      - "[ np.linspace( -1000, 1000,   1*5, dtype=np.int16),   1, 1, 'vssseg2e16.v', 2, 16, 5*2, 'vlseg2e16.v']"
      - "[ np.linspace( -1000, 1000,   1*6, dtype=np.int16),   1, 1, 'vssseg3e16.v', 3, 16, 6*2, 'vlseg3e16.v']"
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int16),   1, 1, 'vssseg4e16.v', 4, 16, 4*2, 'vlseg4e16.v']"
      - "[ np.linspace( -1000, 1000,   1*8, dtype=np.int16),   1, 1, 'vssseg5e16.v', 5, 16, 8*2, 'vlseg5e16.v']"
      - "[ np.linspace( -1000, 1000,   1*9, dtype=np.int16),   1, 1, 'vssseg6e16.v', 6, 16, 9*2, 'vlseg6e16.v']"
      - "[ np.linspace( -1000, 1000,   1*8, dtype=np.int16),   1, 1, 'vssseg7e16.v', 7, 16, 8*2, 'vlseg7e16.v']"
      - "[ np.linspace( -1000, 1000,   1*9, dtype=np.int16),   1, 1, 'vssseg8e16.v', 8, 16, 9*2, 'vlseg8e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*5, dtype=np.int16),  10, 1, 'vssseg2e16.v', 2, 16, 5*2, 'vlseg2e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*6, dtype=np.int16),  10, 1, 'vssseg3e16.v', 3, 16, 6*2, 'vlseg3e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*4, dtype=np.int16),  10, 1, 'vssseg4e16.v', 4, 16, 4*2, 'vlseg4e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*8, dtype=np.int16),  10, 1, 'vssseg5e16.v', 5, 16, 8*2, 'vlseg5e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*9, dtype=np.int16),  10, 1, 'vssseg6e16.v', 6, 16, 9*2, 'vlseg6e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*8, dtype=np.int16),  10, 1, 'vssseg7e16.v', 7, 16, 8*2, 'vlseg7e16.v']"
      # - "[ np.linspace( -1000, 1000,  10*9, dtype=np.int16),  10, 1, 'vssseg8e16.v', 8, 16, 9*2, 'vlseg8e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*5, dtype=np.int16),  64, 1, 'vssseg2e16.v', 2, 16, 5*2, 'vlseg2e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*6, dtype=np.int16),  64, 1, 'vssseg3e16.v', 3, 16, 6*2, 'vlseg3e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*4, dtype=np.int16),  64, 1, 'vssseg4e16.v', 4, 16, 4*2, 'vlseg4e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*8, dtype=np.int16),  64, 1, 'vssseg5e16.v', 5, 16, 8*2, 'vlseg5e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*9, dtype=np.int16),  64, 1, 'vssseg6e16.v', 6, 16, 9*2, 'vlseg6e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*8, dtype=np.int16),  64, 1, 'vssseg7e16.v', 7, 16, 8*2, 'vlseg7e16.v']"
      # - "[ np.linspace( -1000, 1000,  64*9, dtype=np.int16),  64, 1, 'vssseg8e16.v', 8, 16, 9*2, 'vlseg8e16.v']"
                                                                                                             
      #sew=16, lmul=2                                                                                        
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int16),   1, 2, 'vssseg2e16.v', 2, 16, 4*2, 'vlseg2e16.v']"
      - "[ np.linspace( -1000, 1000,  65*4, dtype=np.int16),  65, 2, 'vssseg2e16.v', 2, 16, 4*2, 'vlseg2e16.v']"
      - "[ np.linspace( -1000, 1000, 128*4, dtype=np.int16), 128, 2, 'vssseg2e16.v', 2, 16, 4*2, 'vlseg2e16.v']"
                                                                                                             
      - "[ np.linspace( -1000, 1000,   1*5, dtype=np.int16),   1, 2, 'vssseg3e16.v', 3, 16, 5*2, 'vlseg3e16.v']"
      - "[ np.linspace( -1000, 1000,  65*5, dtype=np.int16),  65, 2, 'vssseg3e16.v', 3, 16, 5*2, 'vlseg3e16.v']"
      - "[ np.linspace( -1000, 1000, 128*5, dtype=np.int16), 128, 2, 'vssseg3e16.v', 3, 16, 5*2, 'vlseg3e16.v']"
                                                                                                             
      - "[ np.linspace( -1000, 1000,   1*6, dtype=np.int16),   1, 2, 'vssseg4e16.v', 4, 16, 6*2, 'vlseg4e16.v']"
      - "[ np.linspace( -1000, 1000,  65*6, dtype=np.int16),  65, 2, 'vssseg4e16.v', 4, 16, 6*2, 'vlseg4e16.v']"
      - "[ np.linspace( -1000, 1000, 128*6, dtype=np.int16), 128, 2, 'vssseg4e16.v', 4, 16, 6*2, 'vlseg4e16.v']"
                                                                                                             
      #sew=16, lmul=4                                                                                        
      - "[ np.linspace( -1000, 1000,   1*7, dtype=np.int16),   1, 4, 'vssseg2e16.v', 2, 16, 7*2, 'vlseg2e16.v']"
      - "[ np.linspace( -1000, 1000,  65*7, dtype=np.int16),  65, 4, 'vssseg2e16.v', 2, 16, 7*2, 'vlseg2e16.v']"
      - "[ np.linspace( -1000, 1000, 129*7, dtype=np.int16), 129, 4, 'vssseg2e16.v', 2, 16, 7*2, 'vlseg2e16.v']"
      - "[ np.linspace( -1000, 1000, 256*7, dtype=np.int16), 256, 4, 'vssseg2e16.v', 2, 16, 7*2, 'vlseg2e16.v']"
                                                                                                             
      #sew=32, stride = (nf + ?)*ebyte                                                                       
      - "[ np.linspace( -1000, 1000,   1*5, dtype=np.int32),   1, 1, 'vssseg2e32.v', 2, 32, 5*4, 'vlseg2e32.v']"
      - "[ np.linspace( -1000, 1000,   1*6, dtype=np.int32),   1, 1, 'vssseg3e32.v', 3, 32, 6*4, 'vlseg3e32.v']"
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int32),   1, 1, 'vssseg4e32.v', 4, 32, 4*4, 'vlseg4e32.v']"
      - "[ np.linspace( -1000, 1000,   1*8, dtype=np.int32),   1, 1, 'vssseg5e32.v', 5, 32, 8*4, 'vlseg5e32.v']"
      - "[ np.linspace( -1000, 1000,   1*9, dtype=np.int32),   1, 1, 'vssseg6e32.v', 6, 32, 9*4, 'vlseg6e32.v']"
      - "[ np.linspace( -1000, 1000,   1*8, dtype=np.int32),   1, 1, 'vssseg7e32.v', 7, 32, 8*4, 'vlseg7e32.v']"
      - "[ np.linspace( -1000, 1000,   1*9, dtype=np.int32),   1, 1, 'vssseg8e32.v', 8, 32, 9*4, 'vlseg8e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*5, dtype=np.int32),  10, 1, 'vssseg2e32.v', 2, 32, 5*4, 'vlseg2e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*6, dtype=np.int32),  10, 1, 'vssseg3e32.v', 3, 32, 6*4, 'vlseg3e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*4, dtype=np.int32),  10, 1, 'vssseg4e32.v', 4, 32, 4*4, 'vlseg4e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*8, dtype=np.int32),  10, 1, 'vssseg5e32.v', 5, 32, 8*4, 'vlseg5e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*9, dtype=np.int32),  10, 1, 'vssseg6e32.v', 6, 32, 9*4, 'vlseg6e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*8, dtype=np.int32),  10, 1, 'vssseg7e32.v', 7, 32, 8*4, 'vlseg7e32.v']"
      # - "[ np.linspace( -1000, 1000,  10*9, dtype=np.int32),  10, 1, 'vssseg8e32.v', 8, 32, 9*4, 'vlseg8e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*5, dtype=np.int32),  32, 1, 'vssseg2e32.v', 2, 32, 5*4, 'vlseg2e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*6, dtype=np.int32),  32, 1, 'vssseg3e32.v', 3, 32, 6*4, 'vlseg3e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*4, dtype=np.int32),  32, 1, 'vssseg4e32.v', 4, 32, 4*4, 'vlseg4e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*8, dtype=np.int32),  32, 1, 'vssseg5e32.v', 5, 32, 8*4, 'vlseg5e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*9, dtype=np.int32),  32, 1, 'vssseg6e32.v', 6, 32, 9*4, 'vlseg6e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*8, dtype=np.int32),  32, 1, 'vssseg7e32.v', 7, 32, 8*4, 'vlseg7e32.v']"
      # - "[ np.linspace( -1000, 1000,  32*9, dtype=np.int32),  32, 1, 'vssseg8e32.v', 8, 32, 9*4, 'vlseg8e32.v']"
                                                                                                             
      #sew=32, lmul=2                                                                                        
      - "[ np.linspace( -1000, 1000,   1*24, dtype=np.int32),   1, 2, 'vssseg2e32.v', 2, 32, 24*4, 'vlseg2e32.v']"
      - "[ np.linspace( -1000, 1000,  33*24, dtype=np.int32),  33, 2, 'vssseg2e32.v', 2, 32, 24*4, 'vlseg2e32.v']"
      # - "[ np.linspace( -1000, 1000,  64*24, dtype=np.int32),  64, 2, 'vssseg2e32.v', 2, 32, 24*4, 'vlseg2e32.v']"
                                                                                                          
      # - "[ np.linspace( -1000, 1000,   1*35, dtype=np.int32),   1, 2, 'vssseg3e32.v', 3, 32, 35*4, 'vlseg3e32.v']"
      # - "[ np.linspace( -1000, 1000,  33*35, dtype=np.int32),  33, 2, 'vssseg3e32.v', 3, 32, 35*4, 'vlseg3e32.v']"
      # - "[ np.linspace( -1000, 1000,  64*35, dtype=np.int32),  64, 2, 'vssseg3e32.v', 3, 32, 35*4, 'vlseg3e32.v']"
                                                                                                          
      # - "[ np.linspace( -1000, 1000,   1*46, dtype=np.int32),   1, 2, 'vssseg4e32.v', 4, 32, 46*4, 'vlseg4e32.v']"
      # - "[ np.linspace( -1000, 1000,  33*46, dtype=np.int32),  33, 2, 'vssseg4e32.v', 4, 32, 46*4, 'vlseg4e32.v']"
      # - "[ np.linspace( -1000, 1000,  64*46, dtype=np.int32),  64, 2, 'vssseg4e32.v', 4, 32, 46*4, 'vlseg4e32.v']"
                                                                                                          
      #sew=32, lmul=4                                                                                     
      - "[ np.linspace( -1000, 1000,   1*27, dtype=np.int32),   1, 4, 'vssseg2e32.v', 2, 32, 27*4, 'vlseg2e32.v']"
      # - "[ np.linspace( -1000, 1000,  33*27, dtype=np.int32),  33, 4, 'vssseg2e32.v', 2, 32, 27*4, 'vlseg2e32.v']"
      # - "[ np.linspace( -1000, 1000,  65*27, dtype=np.int32),  65, 4, 'vssseg2e32.v', 2, 32, 27*4, 'vlseg2e32.v']"
      # - "[ np.linspace( -1000, 1000, 128*27, dtype=np.int32), 128, 4, 'vssseg2e32.v', 2, 32, 27*4, 'vlseg2e32.v']"
                                                                                                             
      #sew=64, stride = (nf + ?)*ebyte                                                                       
      - "[ np.linspace( -1000, 1000,   1*5, dtype=np.int64),   1, 1, 'vssseg2e64.v', 2, 64, 5*8, 'vlseg2e64.v']"
      - "[ np.linspace( -1000, 1000,   1*6, dtype=np.int64),   1, 1, 'vssseg3e64.v', 3, 64, 6*8, 'vlseg3e64.v']"
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int64),   1, 1, 'vssseg4e64.v', 4, 64, 4*8, 'vlseg4e64.v']"
      - "[ np.linspace( -1000, 1000,   1*8, dtype=np.int64),   1, 1, 'vssseg5e64.v', 5, 64, 8*8, 'vlseg5e64.v']"
      - "[ np.linspace( -1000, 1000,   1*9, dtype=np.int64),   1, 1, 'vssseg6e64.v', 6, 64, 9*8, 'vlseg6e64.v']"
      - "[ np.linspace( -1000, 1000,   1*8, dtype=np.int64),   1, 1, 'vssseg7e64.v', 7, 64, 8*8, 'vlseg7e64.v']"
      - "[ np.linspace( -1000, 1000,   1*9, dtype=np.int64),   1, 1, 'vssseg8e64.v', 8, 64, 9*8, 'vlseg8e64.v']"
      # - "[ np.linspace( -1000, 1000,  10*5, dtype=np.int64),  10, 1, 'vssseg2e64.v', 2, 64, 5*8, 'vlseg2e64.v']"
      # - "[ np.linspace( -1000, 1000,  10*6, dtype=np.int64),  10, 1, 'vssseg3e64.v', 3, 64, 6*8, 'vlseg3e64.v']"
      # - "[ np.linspace( -1000, 1000,  10*4, dtype=np.int64),  10, 1, 'vssseg4e64.v', 4, 64, 4*8, 'vlseg4e64.v']"
      # - "[ np.linspace( -1000, 1000,  10*8, dtype=np.int64),  10, 1, 'vssseg5e64.v', 5, 64, 8*8, 'vlseg5e64.v']"
      # - "[ np.linspace( -1000, 1000,  10*9, dtype=np.int64),  10, 1, 'vssseg6e64.v', 6, 64, 9*8, 'vlseg6e64.v']"
      # - "[ np.linspace( -1000, 1000,  10*8, dtype=np.int64),  10, 1, 'vssseg7e64.v', 7, 64, 8*8, 'vlseg7e64.v']"
      # - "[ np.linspace( -1000, 1000,  10*9, dtype=np.int64),  10, 1, 'vssseg8e64.v', 8, 64, 9*8, 'vlseg8e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*5, dtype=np.int64),  16, 1, 'vssseg2e64.v', 2, 64, 5*8, 'vlseg2e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*6, dtype=np.int64),  16, 1, 'vssseg3e64.v', 3, 64, 6*8, 'vlseg3e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*4, dtype=np.int64),  16, 1, 'vssseg4e64.v', 4, 64, 4*8, 'vlseg4e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*8, dtype=np.int64),  16, 1, 'vssseg5e64.v', 5, 64, 8*8, 'vlseg5e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*9, dtype=np.int64),  16, 1, 'vssseg6e64.v', 6, 64, 9*8, 'vlseg6e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*8, dtype=np.int64),  16, 1, 'vssseg7e64.v', 7, 64, 8*8, 'vlseg7e64.v']"
      # - "[ np.linspace( -1000, 1000,  16*9, dtype=np.int64),  16, 1, 'vssseg8e64.v', 8, 64, 9*8, 'vlseg8e64.v']"
                                                                                                             
      #sew=64, lmul=2                                                                                        
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int64),   1, 2, 'vssseg2e64.v', 2, 64, 4*8, 'vlseg2e64.v']"
      - "[ np.linspace( -1000, 1000,  17*4, dtype=np.int64),  17, 2, 'vssseg2e64.v', 2, 64, 4*8, 'vlseg2e64.v']"
      - "[ np.linspace( -1000, 1000,  32*4, dtype=np.int64),  32, 2, 'vssseg2e64.v', 2, 64, 4*8, 'vlseg2e64.v']"

      # - "[ np.linspace( -1000, 1000,   1*5, dtype=np.int64),   1, 2, 'vssseg3e64.v', 3, 64, 5*8, 'vlseg3e64.v']"
      # - "[ np.linspace( -1000, 1000,  17*5, dtype=np.int64),  17, 2, 'vssseg3e64.v', 3, 64, 5*8, 'vlseg3e64.v']"
      # - "[ np.linspace( -1000, 1000,  32*5, dtype=np.int64),  32, 2, 'vssseg3e64.v', 3, 64, 5*8, 'vlseg3e64.v']"
                                                                                                             
      # - "[ np.linspace( -1000, 1000,   1*6, dtype=np.int64),   1, 2, 'vssseg4e64.v', 4, 64, 6*8, 'vlseg4e64.v']"
      # - "[ np.linspace( -1000, 1000,  17*6, dtype=np.int64),  17, 2, 'vssseg4e64.v', 4, 64, 6*8, 'vlseg4e64.v']"
      # - "[ np.linspace( -1000, 1000,  32*6, dtype=np.int64),  32, 2, 'vssseg4e64.v', 4, 64, 6*8, 'vlseg4e64.v']"
                                                                                                             
      # #sew=64, lmul=4                                                                                        
      # - "[ np.linspace( -1000, 1000,   1*7, dtype=np.int64),   1, 4, 'vssseg2e64.v', 2, 64, 7*8, 'vlseg2e64.v']"
      # - "[ np.linspace( -1000, 1000,  17*7, dtype=np.int64),  17, 4, 'vssseg2e64.v', 2, 64, 7*8, 'vlseg2e64.v']"
      # - "[ np.linspace( -1000, 1000,  33*7, dtype=np.int64),  33, 4, 'vssseg2e64.v', 2, 64, 7*8, 'vlseg2e64.v']"
      # - "[ np.linspace( -1000, 1000,  64*7, dtype=np.int64),  64, 4, 'vssseg2e64.v', 2, 64, 7*8, 'vlseg2e64.v']"

    test_basic_with_mask @ vs3, vl, lmul, mask, inst_name, nfields, ebits, ldins, rs2 @ vreg='v8':
      #sew=8
      - "[ np.linspace( -1000, 1000,   1*2, dtype=np.int8 ),   1, 1, random_mask(1),   'vssseg2e8.v',  2, 8,   'vlseg2e8.v', 2*1]"
      - "[ np.linspace( -1000, 1000,   1*3, dtype=np.int8 ),   1, 1, random_mask(1),   'vssseg3e8.v',  3, 8,   'vlseg3e8.v', 3*1]"
      - "[ np.linspace( -1000, 1000,   1*4, dtype=np.int8 ),   1, 1, random_mask(1),   'vssseg4e8.v',  4, 8,   'vlseg4e8.v', 4*1]"
      - "[ np.linspace( -1000, 1000,   1*5, dtype=np.int8 ),   1, 1, random_mask(1),   'vssseg5e8.v',  5, 8,   'vlseg5e8.v', 5*1]"
      - "[ np.linspace( -1000, 1000,   1*6, dtype=np.int8 ),   1, 1, random_mask(1),   'vssseg6e8.v',  6, 8,   'vlseg6e8.v', 6*1]"
      - "[ np.linspace( -1000, 1000,   1*7, dtype=np.int8 ),   1, 1, random_mask(1),   'vssseg7e8.v',  7, 8,   'vlseg7e8.v', 7*1]"
      - "[ np.linspace( -1000, 1000,   1*8, dtype=np.int8 ),   1, 1, random_mask(1),   'vssseg8e8.v',  8, 8,   'vlseg8e8.v', 8*1]"
      # - "[ np.linspace( -1000, 1000,  10*2, dtype=np.int8 ),  10, 1, random_mask(10),  'vssseg2e8.v',  2, 8,   'vlseg2e8.v', 2*1]"
      # - "[ np.linspace( -1000, 1000,  10*3, dtype=np.int8 ),  10, 1, random_mask(10),  'vssseg3e8.v',  3, 8,   'vlseg3e8.v', 3*1]"
      # - "[ np.linspace( -1000, 1000,  10*4, dtype=np.int8 ),  10, 1, random_mask(10),  'vssseg4e8.v',  4, 8,   'vlseg4e8.v', 4*1]"
      # - "[ np.linspace( -1000, 1000,  10*5, dtype=np.int8 ),  10, 1, random_mask(10),  'vssseg5e8.v',  5, 8,   'vlseg5e8.v', 5*1]"
      # - "[ np.linspace( -1000, 1000,  10*6, dtype=np.int8 ),  10, 1, random_mask(10),  'vssseg6e8.v',  6, 8,   'vlseg6e8.v', 6*1]"
      # - "[ np.linspace( -1000, 1000,  10*7, dtype=np.int8 ),  10, 1, random_mask(10),  'vssseg7e8.v',  7, 8,   'vlseg7e8.v', 7*1]"
      # - "[ np.linspace( -1000, 1000,  10*8, dtype=np.int8 ),  10, 1, random_mask(10),  'vssseg8e8.v',  8, 8,   'vlseg8e8.v', 8*1]"
      # - "[ np.linspace( -1000, 1000, 128*2, dtype=np.int8 ), 128, 1, random_mask(128), 'vssseg2e8.v',  2, 8,   'vlseg2e8.v', 2*1]"
      # - "[ np.linspace( -1000, 1000, 128*3, dtype=np.int8 ), 128, 1, random_mask(128), 'vssseg3e8.v',  3, 8,   'vlseg3e8.v', 3*1]"
      # - "[ np.linspace( -1000, 1000, 128*4, dtype=np.int8 ), 128, 1, random_mask(128), 'vssseg4e8.v',  4, 8,   'vlseg4e8.v', 4*1]"
      # - "[ np.linspace( -1000, 1000, 128*5, dtype=np.int8 ), 128, 1, random_mask(128), 'vssseg5e8.v',  5, 8,   'vlseg5e8.v', 5*1]"
      # - "[ np.linspace( -1000, 1000, 128*6, dtype=np.int8 ), 128, 1, random_mask(128), 'vssseg6e8.v',  6, 8,   'vlseg6e8.v', 6*1]"
      # - "[ np.linspace( -1000, 1000, 128*7, dtype=np.int8 ), 128, 1, random_mask(128), 'vssseg7e8.v',  7, 8,   'vlseg7e8.v', 7*1]"
      # - "[ np.linspace( -1000, 1000, 128*8, dtype=np.int8 ), 128, 1, random_mask(128), 'vssseg8e8.v',  8, 8,   'vlseg8e8.v', 8*1]"
      #sew=16                                                                                                             
      - "[ np.linspace( -1000, 1000,   1*20, dtype=np.int16),  1,  1, random_mask(1),  'vssseg2e16.v', 2, 16, 'vlseg2e16.v', 20*2]"
      - "[ np.linspace( -1000, 1000,   1*30, dtype=np.int16),  1,  1, random_mask(1),  'vssseg3e16.v', 3, 16, 'vlseg3e16.v', 30*2]"
      - "[ np.linspace( -1000, 1000,   1*40, dtype=np.int16),  1,  1, random_mask(1),  'vssseg4e16.v', 4, 16, 'vlseg4e16.v', 40*2]"
      - "[ np.linspace( -1000, 1000,   1*50, dtype=np.int16),  1,  1, random_mask(1),  'vssseg5e16.v', 5, 16, 'vlseg5e16.v', 50*2]"
      - "[ np.linspace( -1000, 1000,   1*60, dtype=np.int16),  1,  1, random_mask(1),  'vssseg6e16.v', 6, 16, 'vlseg6e16.v', 60*2]"
      - "[ np.linspace( -1000, 1000,   1*70, dtype=np.int16),  1,  1, random_mask(1),  'vssseg7e16.v', 7, 16, 'vlseg7e16.v', 70*2]"
      - "[ np.linspace( -1000, 1000,   1*80, dtype=np.int16),  1,  1, random_mask(1),  'vssseg8e16.v', 8, 16, 'vlseg8e16.v', 80*2]"
      # - "[ np.linspace( -1000, 1000,  10*20, dtype=np.int16), 10,  1, random_mask(10), 'vssseg2e16.v', 2, 16, 'vlseg2e16.v', 20*2]"
      # - "[ np.linspace( -1000, 1000,  10*30, dtype=np.int16), 10,  1, random_mask(10), 'vssseg3e16.v', 3, 16, 'vlseg3e16.v', 30*2]"
      # - "[ np.linspace( -1000, 1000,  10*40, dtype=np.int16), 10,  1, random_mask(10), 'vssseg4e16.v', 4, 16, 'vlseg4e16.v', 40*2]"
      # - "[ np.linspace( -1000, 1000,  10*50, dtype=np.int16), 10,  1, random_mask(10), 'vssseg5e16.v', 5, 16, 'vlseg5e16.v', 50*2]"
      # - "[ np.linspace( -1000, 1000,  10*60, dtype=np.int16), 10,  1, random_mask(10), 'vssseg6e16.v', 6, 16, 'vlseg6e16.v', 60*2]"
      # - "[ np.linspace( -1000, 1000,  10*70, dtype=np.int16), 10,  1, random_mask(10), 'vssseg7e16.v', 7, 16, 'vlseg7e16.v', 70*2]"
      # - "[ np.linspace( -1000, 1000,  10*80, dtype=np.int16), 10,  1, random_mask(10), 'vssseg8e16.v', 8, 16, 'vlseg8e16.v', 80*2]"
      # - "[ np.linspace( -1000, 1000,  64*20, dtype=np.int16), 64,  1, random_mask(64), 'vssseg2e16.v', 2, 16, 'vlseg2e16.v', 20*2]"
      # - "[ np.linspace( -1000, 1000,  64*30, dtype=np.int16), 64,  1, random_mask(64), 'vssseg3e16.v', 3, 16, 'vlseg3e16.v', 30*2]"
      # - "[ np.linspace( -1000, 1000,  64*40, dtype=np.int16), 64,  1, random_mask(64), 'vssseg4e16.v', 4, 16, 'vlseg4e16.v', 40*2]"
      # - "[ np.linspace( -1000, 1000,  64*50, dtype=np.int16), 64,  1, random_mask(64), 'vssseg5e16.v', 5, 16, 'vlseg5e16.v', 50*2]"
      # - "[ np.linspace( -1000, 1000,  64*60, dtype=np.int16), 64,  1, random_mask(64), 'vssseg6e16.v', 6, 16, 'vlseg6e16.v', 60*2]"
      # - "[ np.linspace( -1000, 1000,  64*70, dtype=np.int16), 64,  1, random_mask(64), 'vssseg7e16.v', 7, 16, 'vlseg7e16.v', 70*2]"
      # - "[ np.linspace( -1000, 1000,  64*80, dtype=np.int16), 64,  1, random_mask(64), 'vssseg8e16.v', 8, 16, 'vlseg8e16.v', 80*2]"
      #sew=32                                                                                                         
      - "[ np.linspace( -1000, 1000,   1*92, dtype=np.int32),  1,  1, random_mask(1),  'vssseg2e32.v', 2, 32, 'vlseg2e32.v', 92*4]"
      - "[ np.linspace( -1000, 1000,   1*93, dtype=np.int32),  1,  1, random_mask(1),  'vssseg3e32.v', 3, 32, 'vlseg3e32.v', 93*4]"
      - "[ np.linspace( -1000, 1000,   1*94, dtype=np.int32),  1,  1, random_mask(1),  'vssseg4e32.v', 4, 32, 'vlseg4e32.v', 94*4]"
      - "[ np.linspace( -1000, 1000,   1*95, dtype=np.int32),  1,  1, random_mask(1),  'vssseg5e32.v', 5, 32, 'vlseg5e32.v', 95*4]"
      - "[ np.linspace( -1000, 1000,   1*96, dtype=np.int32),  1,  1, random_mask(1),  'vssseg6e32.v', 6, 32, 'vlseg6e32.v', 96*4]"
      - "[ np.linspace( -1000, 1000,   1*97, dtype=np.int32),  1,  1, random_mask(1),  'vssseg7e32.v', 7, 32, 'vlseg7e32.v', 97*4]"
      - "[ np.linspace( -1000, 1000,   1*98, dtype=np.int32),  1,  1, random_mask(1),  'vssseg8e32.v', 8, 32, 'vlseg8e32.v', 98*4]"
      # - "[ np.linspace( -1000, 1000,  10*92, dtype=np.int32), 10,  1, random_mask(10), 'vssseg2e32.v', 2, 32, 'vlseg2e32.v', 92*4]"
      # - "[ np.linspace( -1000, 1000,  10*93, dtype=np.int32), 10,  1, random_mask(10), 'vssseg3e32.v', 3, 32, 'vlseg3e32.v', 93*4]"
      # - "[ np.linspace( -1000, 1000,  10*94, dtype=np.int32), 10,  1, random_mask(10), 'vssseg4e32.v', 4, 32, 'vlseg4e32.v', 94*4]"
      # - "[ np.linspace( -1000, 1000,  10*95, dtype=np.int32), 10,  1, random_mask(10), 'vssseg5e32.v', 5, 32, 'vlseg5e32.v', 95*4]"
      # - "[ np.linspace( -1000, 1000,  10*96, dtype=np.int32), 10,  1, random_mask(10), 'vssseg6e32.v', 6, 32, 'vlseg6e32.v', 96*4]"
      # - "[ np.linspace( -1000, 1000,  10*97, dtype=np.int32), 10,  1, random_mask(10), 'vssseg7e32.v', 7, 32, 'vlseg7e32.v', 97*4]"
      # - "[ np.linspace( -1000, 1000,  10*98, dtype=np.int32), 10,  1, random_mask(10), 'vssseg8e32.v', 8, 32, 'vlseg8e32.v', 98*4]"
      # - "[ np.linspace( -1000, 1000,  32*92, dtype=np.int32), 32,  1, random_mask(32), 'vssseg2e32.v', 2, 32, 'vlseg2e32.v', 92*4]"
      # - "[ np.linspace( -1000, 1000,  32*93, dtype=np.int32), 32,  1, random_mask(32), 'vssseg3e32.v', 3, 32, 'vlseg3e32.v', 93*4]"
      # - "[ np.linspace( -1000, 1000,  32*94, dtype=np.int32), 32,  1, random_mask(32), 'vssseg4e32.v', 4, 32, 'vlseg4e32.v', 94*4]"
      # - "[ np.linspace( -1000, 1000,  32*95, dtype=np.int32), 32,  1, random_mask(32), 'vssseg5e32.v', 5, 32, 'vlseg5e32.v', 95*4]"
      # - "[ np.linspace( -1000, 1000,  32*96, dtype=np.int32), 32,  1, random_mask(32), 'vssseg6e32.v', 6, 32, 'vlseg6e32.v', 96*4]"
      # - "[ np.linspace( -1000, 1000,  32*97, dtype=np.int32), 32,  1, random_mask(32), 'vssseg7e32.v', 7, 32, 'vlseg7e32.v', 97*4]"
      # - "[ np.linspace( -1000, 1000,  32*98, dtype=np.int32), 32,  1, random_mask(32), 'vssseg8e32.v', 8, 32, 'vlseg8e32.v', 98*4]"
      #sew=64                                                                                                          
      - "[ np.linspace( -1000, 1000,   1*21, dtype=np.int64),  1,  1, random_mask(1),  'vssseg2e64.v', 2, 64, 'vlseg2e64.v', 21*8]"
      - "[ np.linspace( -1000, 1000,   1*31, dtype=np.int64),  1,  1, random_mask(1),  'vssseg3e64.v', 3, 64, 'vlseg3e64.v', 31*8]"
      - "[ np.linspace( -1000, 1000,   1*41, dtype=np.int64),  1,  1, random_mask(1),  'vssseg4e64.v', 4, 64, 'vlseg4e64.v', 41*8]"
      - "[ np.linspace( -1000, 1000,   1*51, dtype=np.int64),  1,  1, random_mask(1),  'vssseg5e64.v', 5, 64, 'vlseg5e64.v', 51*8]"
      - "[ np.linspace( -1000, 1000,   1*61, dtype=np.int64),  1,  1, random_mask(1),  'vssseg6e64.v', 6, 64, 'vlseg6e64.v', 61*8]"
      - "[ np.linspace( -1000, 1000,   1*71, dtype=np.int64),  1,  1, random_mask(1),  'vssseg7e64.v', 7, 64, 'vlseg7e64.v', 71*8]"
      - "[ np.linspace( -1000, 1000,   1*81, dtype=np.int64),  1,  1, random_mask(1),  'vssseg8e64.v', 8, 64, 'vlseg8e64.v', 81*8]"
      # - "[ np.linspace( -1000, 1000,  10*21, dtype=np.int64), 10,  1, random_mask(10), 'vssseg2e64.v', 2, 64, 'vlseg2e64.v', 21*8]"
      # - "[ np.linspace( -1000, 1000,  10*31, dtype=np.int64), 10,  1, random_mask(10), 'vssseg3e64.v', 3, 64, 'vlseg3e64.v', 31*8]"
      # - "[ np.linspace( -1000, 1000,  10*41, dtype=np.int64), 10,  1, random_mask(10), 'vssseg4e64.v', 4, 64, 'vlseg4e64.v', 41*8]"
      # - "[ np.linspace( -1000, 1000,  10*51, dtype=np.int64), 10,  1, random_mask(10), 'vssseg5e64.v', 5, 64, 'vlseg5e64.v', 51*8]"
      # - "[ np.linspace( -1000, 1000,  10*61, dtype=np.int64), 10,  1, random_mask(10), 'vssseg6e64.v', 6, 64, 'vlseg6e64.v', 61*8]"
      # - "[ np.linspace( -1000, 1000,  10*71, dtype=np.int64), 10,  1, random_mask(10), 'vssseg7e64.v', 7, 64, 'vlseg7e64.v', 71*8]"
      # - "[ np.linspace( -1000, 1000,  10*81, dtype=np.int64), 10,  1, random_mask(10), 'vssseg8e64.v', 8, 64, 'vlseg8e64.v', 81*8]"
      # - "[ np.linspace( -1000, 1000,  16*21, dtype=np.int64), 16,  1, random_mask(16), 'vssseg2e64.v', 2, 64, 'vlseg2e64.v', 21*8]"
      # - "[ np.linspace( -1000, 1000,  16*31, dtype=np.int64), 16,  1, random_mask(16), 'vssseg3e64.v', 3, 64, 'vlseg3e64.v', 31*8]"
      # - "[ np.linspace( -1000, 1000,  16*41, dtype=np.int64), 16,  1, random_mask(16), 'vssseg4e64.v', 4, 64, 'vlseg4e64.v', 41*8]"
      # - "[ np.linspace( -1000, 1000,  16*51, dtype=np.int64), 16,  1, random_mask(16), 'vssseg5e64.v', 5, 64, 'vlseg5e64.v', 51*8]"
      # - "[ np.linspace( -1000, 1000,  16*61, dtype=np.int64), 16,  1, random_mask(16), 'vssseg6e64.v', 6, 64, 'vlseg6e64.v', 61*8]"
      # - "[ np.linspace( -1000, 1000,  16*71, dtype=np.int64), 16,  1, random_mask(16), 'vssseg7e64.v', 7, 64, 'vlseg7e64.v', 71*8]"
      # - "[ np.linspace( -1000, 1000,  16*81, dtype=np.int64), 16,  1, random_mask(16), 'vssseg8e64.v', 8, 64, 'vlseg8e64.v', 81*8]"
=======
    test_basic_without_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: eew*nf//8

    test_stride_without_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: vlsenn_get_stride(vlen, eew//8, nf)

    test_x0_without_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: 0

    test_eew_neq_sew_without_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: get_sew_neq_eew(eew)
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: eew*nf//8

    test_vstart_without_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        start: get_vstart(vlen)
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: eew*nf//8

    test_tu_without_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        origin: np.random.uniform(0, 2**eew, int(VLEN*8/eew)).astype(get_uintdtype(eew))
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: eew*nf//8

    test_misalign_without_mask:
      matrix:
        isExcept: 1
        eew: [16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        offset: np.random.randint(1, int(eew/8))
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: eew*nf//8

    test_misalign_stride_without_mask:
      matrix:
        isExcept: 1
        eew: [16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : list(np.linspace(2, 10, 5, dtype=np.int32))
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: eew//8+np.random.randint(1, int(eew//8))

    test_regression_without_mask:
      matrix:
        matrix:
        eew: [8, 16, 32, 64]
        sew: list(2**np.random.uniform(3, 7, 2).astype(int))
        VLEN: 1024
        nf: list(np.random.uniform(2, 8, 2).astype(int))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_random_vl(lmul, sew, eew, args.vlen)
        start: get_random_start(vlen)
        vs3: np.random.uniform(0, 2**eew, VLEN*8//eew).astype(get_uintdtype(eew))
        rs2: get_random_stride(eew//8)

    test_basic_with_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        mask: random_mask(vlen)
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: eew*nf//8

    test_stride_with_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        mask: random_mask(vlen)
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: vlsenn_get_stride(vlen, eew//8, nf)

    test_x0_with_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        mask: random_mask(vlen)
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: 0

    test_eew_neq_sew_with_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: get_sew_neq_eew(eew)
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        mask: random_mask(vlen)
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: eew*nf//8

    test_vstart_with_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        start: get_vstart(vlen)
        mask: random_mask(vlen)
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: eew*nf//8

    test_tu_with_mask:
      matrix:
        eew: [8, 16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        origin: np.random.uniform(0, 2**eew, int(VLEN*8//eew)).astype(get_uintdtype(eew))
        mask: random_mask(vlen)
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: eew*nf//8

    test_misalign_with_mask:
      matrix:
        isExcept: 1
        eew: [16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_seg_vl(lmul, sew, eew, args.vlen)
        offset: np.random.randint(1, int(eew/8))
        mask: random_mask(vlen)*2+1
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: eew*nf//8
    
    test_misalign_stride_with_mask:
      matrix:
        isExcept: 1
        eew: [16, 32, 64]
        sew: eew
        VLEN: 1024
        nf: list(np.linspace(2, 8, 7, dtype=np.uint8))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : list(np.linspace(2, 10, 5, dtype=np.int32))
        mask: random_mask(vlen)*4+3
        vs3: np.linspace(0, 2**eew, VLEN*8//eew, dtype=get_uintdtype(eew))
        rs2: eew//8+np.random.randint(1, int(eew//8))
    
    test_regression_with_mask:
      matrix:
        matrix:
        eew: [8, 16, 32, 64]
        sew: list(2**np.random.uniform(3, 7, 2).astype(int))
        VLEN: 1024
        nf: list(np.random.uniform(2, 8, 2).astype(int))
        lmul: get_seg_lmul(eew, sew, nf)
        vlen : get_random_vl(lmul, sew, eew, args.vlen)
        start: get_random_start(vlen)
        mask: random_mask(vlen)
        vs3: np.random.uniform(0, 2**eew, VLEN*8//eew).astype(get_uintdtype(eew))
        rs2: get_random_stride(eew//8)

    
    test_exception_misalign_lmul @ vs3, eew, sew, vlen, lmul, nf, isExcept:
      - '[np.array([1], dtype=np.int16),   16,  16,   1,   4, 2, 1]'
      - '[np.array([1], dtype=np.int64),   64, 128,   1,   1, 2, 1]' # compiler error
    
    test_exception_emul          @ vs3, eew, sew, vlen, lmul, nf, isExcept:
      - '[np.array([1], dtype=np.int64),    64,   8, 1,    2,  2, 1]' #eew/sew*lmul>8
      - '[np.array([1], dtype=np.int8),      8,  64, 1, "f2",  2, 1]' #eew/sew*lmul<1/8
      - '[np.array([1], dtype=np.int32),    32,   8, 1,    1,  3, 1]' #eew/sew*lmul * nf > 8

    test_exception_invalid_addr  @ vs3, addr, eew, sew, vlen, lmul, nf, isExcept:
      - '[np.array([1], dtype=np.int16), 0xc0300000,  16,  16,    1,  1, 2, 1]'

>>>>>>> Stashed changes
