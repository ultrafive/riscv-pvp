_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_base_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;                  
        la a2, {vs2_data};        
        la a3, {ori_data};            
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        {name} v24,v16, {uimm};
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_base_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;        
        la a0, {mask_data};
        la a2, {vs2_data};        
        la a6, {ori_data};
        vle1.v      v0, (a0);
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a6);
        {name} v24,v16, {uimm}, v0.t;
        la a3, test_{num}_data;
        vse{sew}.v v24, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection  

    test_regression_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;  
        la a2, {vs2_data};        
        la a3, {ori_data};            
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        li t2, {vstart};
        csrw vstart, t2;
        {name} v24, v16, {uimm};
        csrr t1, vstart;
        beqz t1, 1f;
        j fail
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_agnostic_without_mask: |
      test_{num}:
        li TESTNUM, {num};      
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma; 
        la a2, {vs2_data};        
        la a3, {ori_data};            
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},tu,ma; 
        {name} v24,v16, {uimm};
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma; 
        la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({tail}), ({sew}/8), 0;
        .popsection

    test_vstart_not_eq_zero_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma; 
        la a2, {vs2_data};        
        la a3, {ori_data};            
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        li t2, {vstart};
        csrw vstart, t2;
        {name} v24, v16, {uimm};
        csrr t1, vstart;
        beqz t1, 1f;
        j fail
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_vstart_not_eq_zero_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma; 
        la a0, {mask_data};
        la a2, {vs2_data};        
        la a6, {ori_data};
        vle1.v      v0, (a0);
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a6);
        li t2, {vstart};
        csrw vstart, t2;
        {name} v24, v16, {uimm}, v0.t;
        csrr t1, vstart;
        beqz t1, 1f;
        j fail
      1:la a3, test_{num}_data;
        vse{sew}.v v24, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection 

   
  check:
    test_base_without_mask: np.array_equal(result, golden)
    test_base_with_mask   : np.array_equal(result, golden)
    test_regression_without_mask: np.array_equal(result, golden)
    test_vstart_not_eq_zero_without_mask: np.array_equal(result, golden)
    test_vstart_not_eq_zero_with_mask   : np.array_equal(result, golden)
    test_agnostic_without_mask: np.array_equal(result, golden)


vrgather_vi:
  <<: *default
  basic_cases:
    test_base_without_mask @ ori, uimm, vs2, sew, vl, lmul:
      setup: |
        params_yml = []
        params_yml.append([np.array([7],dtype=np.uint8), np.uint8(0), np.array([0x10],dtype=np.uint8), 8, 1, 1])
        params_yml.append([np.array([7,7,9,7],dtype=np.uint16), np.uint16(1), np.array([1,3,205,7],dtype=np.uint16), 16, 4, 1])
        params_yml.append([np.linspace(0x40,0x80,32,dtype=np.uint8 ), np.uint8(2),  np.linspace(0x20,0x000000ff,32,dtype=np.uint8 ),  8, 32, 1])
        params_yml.append([np.linspace(0x40,0x80,64,dtype=np.uint16), np.uint16(3), np.linspace(0x20,0x00ff00ff,64,dtype=np.uint16), 16, 64, 1])
        for sew in [8, 16, 32, 64]:
          for lmul in get_lmul_seg(sew):
            for vl in get_vl(lmul, sew, vlen):
              for uimm in [min(vl//2,31), min(vl-1,28)]:
                ori = np.linspace( 0, get_intmax(sew), vl, dtype=get_intdtype(sew) )
                vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew) )
                params_yml.append([ori, uimm, vs2, sew, vl, lmul])
    
    test_base_with_mask @ ori, uimm, vs2, sew, vl, lmul, mask:
      setup: |
        params_yml = []
        params_yml.append([np.array([7],dtype=np.uint8), np.uint8(0), np.array([0x10],dtype=np.uint8), 8, 1, 1, np.array([0x0],dtype=np.uint8)])
        params_yml.append([np.array([7,7,9,7],dtype=np.uint16), np.uint16(1), np.array([1,3,205,7],dtype=np.uint16), 16, 4, 1, np.array([0x5],dtype=np.uint8)])
        for sew in [8, 32, 64]:
          for lmul in get_lmul_seg(sew):
            for vl in get_vl(lmul, sew, vlen):
              for uimm in [min(vl//3,31), min(vl-1,28)]:
                ori = np.linspace( 0, get_intmax(sew), vl, dtype=get_intdtype(sew) )
                vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew) )
                mask= random_mask(vl)
                params_yml.append([ori, uimm, vs2, sew, vl, lmul, mask])

  random_cases:
    test_regression_without_mask: 
      matrix: 
        sew : [8, 16, 32, 64]
        lmul: get_lmul_seg(sew)
        vl  : get_vl(lmul, sew, vlen)
        vs2 : np.random.uniform(get_intmin(sew), get_intmax(sew), vl).astype(get_intdtype(sew))
        uimm: min(np.random.randint(vl),31)
        ori : np.random.uniform(get_intmin(sew), get_intmax(sew), vl).astype(get_intdtype(sew))
        vstart: np.random.randint(vl+16)

  cases:
    test_agnostic_without_mask @ori, uimm, vs2, sew, lmul, lmul_tu, vl, tail:
      setup: |
        params_yml = []
        for sew in [8, 16, 32, 64]:
          for lmul in get_lmul_seg(sew):
            for vl in get_vl(lmul, sew, vlen):
              uimm= min(np.random.randint(vl),28)
              tail= get_tailmax(lmul, sew)
              ori = np.linspace( 0, get_uintmax(sew), tail, dtype=get_uintdtype(sew))
              vs2 = np.linspace( 1, get_uintmax(sew), tail, dtype=get_uintdtype(sew))  
              lmul_tu = 1 if isinstance(lmul,str) else lmul                
              params_yml.append([ori, uimm, vs2, sew, lmul, lmul_tu, vl, tail]) 

    test_vstart_not_eq_zero_without_mask:
      matrix: 
        sew : [8, 16, 32, 64]
        lmul: get_lmul_seg(sew)
        vl  : get_vl(lmul, sew, vlen)
        vs2 : np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
        uimm: min(np.random.randint(vl),28)
        ori : np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
        vstart: min(np.random.randint(vl),31)
    
    test_vstart_not_eq_zero_with_mask @ori, vs2, uimm, mask, sew, lmul, vl, vstart:
      setup: |
        params_yml = []
        for sew in [8, 32, 64]:
          for lmul in get_lmul_seg(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vstart in [vl//3]:
                ori = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
                vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
                uimm= min(np.random.randint(vl),15)
                mask= random_mask(vl)
                params_yml.append([ori, vs2, uimm, mask, sew, lmul, vl, vstart])
