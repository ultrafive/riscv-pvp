_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_base_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a6, {ori_data}; 
        vle8.v v24, (a6);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a0, {mask_data};
        la a2, {vs2_data};        
        vle1.v      v0, (a0);
        vle{sew}.v v16, (a2);
        {name} v24, v16, {imm}, v0;
        li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,{vma};
        la a3, test_{num}_data;
        vse8.v v24, (a3);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection    

    test_regression_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a6, {ori_data}; 
        vle8.v v24, (a6);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a0, {mask_data};
        la a2, {vs2_data};        
        vle1.v      v0, (a0);
        vle{sew}.v v16, (a2);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, v16, {imm}, v0;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, test_{num}_data;
        vse8.v v24, (a3);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection  

    test_agnostic_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a3, {ori_data}; 
        vle8.v v24, (a3);
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma;
        la a0, {mask_data};
        la a2, {vs2_data};  
        vle1.v      v0, (a0);    
        vle{sew}.v v16, (a2);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        {name} v24, v16, {imm}, v0;
        li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a6, test_{num}_data;
        vse8.v v24, (a6);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection  

    test_vstart_not_equal_zero_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, {ori_data}; 
        vle8.v v24, (a3);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a0, {mask_data};
        la a2, {vs2_data};     
        vle1.v  v0, (a0);    
        vle{sew}.v v16, (a2);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, v16, {imm}, v0;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la  a6, test_{num}_data;
        vse8.v v24, (a6);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection 

    test_register_vd_equ_vs2_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a0, {mask_data};
        la a2, {vs2_data};        
        vle1.v      v0, (a0);
        vle{sew}.v v16, (a2);
        {name} v16, v16, {imm}, v0;
        li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, test_{num}_data;
        vse8.v v16, (a3);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection

    test_register_vd_eq_vm_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a0, {mask_data};               
        la a2, {vs2_data};        
        vle1.v      v0, (a0); 
        vle{sew}.v v16, (a2);
        {name} v0, v16, {imm}, v0;
        li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, test_{num}_data;
        vse8.v v0, (a3);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection 


  check:
    test_base_with_mask: np.array_equal(result, golden)
    test_regression_with_mask: np.array_equal(result, golden)
    test_agnostic_with_mask: np.array_equal(result, golden)
    test_vstart_not_equal_zero_with_mask: np.array_equal(result, golden)
    test_register_vd_equ_vs2_with_mask: np.array_equal(result, golden)
    test_register_vd_eq_vm_with_mask: np.array_equal(result, golden)
    

  basic_cases:
    test_base_with_mask @ ori, imm, vs2, sew, vl, lmul, vma, mask, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32, 64 ]:
          for lmul in get_lmul_seg(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vma in ["ma", "mu"]:
                for imm in np.array([sew//8],dtype=get_intdtype(sew)):  #note -15
                  vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_uintdtype(sew))
                  mask= random_mask(vl)
                  bvl = Bitsl2Bytesl(vl)
                  ori = random_mask(8*bvl)
                  params_yml.append([ori, imm, vs2, sew, vl, lmul, vma, mask, bvl])

  random_cases:
    test_regression_with_mask @ ori, imm, vs2, sew, vl, lmul, vma, vstart, mask, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32, 64 ]:
          for lmul in get_lmul_seg(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vma in ["ma", "mu"]:
                for vstart in [vl//2,np.random.randint(vl+2)]:
                  for imm in np.array([sew//6],dtype=get_uintdtype(sew)):
                    vs2 = np.random.uniform(get_intmin(sew), get_intmax(sew), vl).astype(get_uintdtype(sew))
                    mask= random_mask(vl)
                    bvl = Bitsl2Bytesl(vl)
                    ori = random_mask(8*bvl)
                    params_yml.append([ori, imm, vs2, sew, vl, lmul, vma, vstart, mask, bvl])                   

  cases:
    test_agnostic_with_mask @ ori, vs2, imm, sew, lmul, lmul_tu, vl, mask, tail, bvl:
      setup: |
        params_yml = []
        for sew in [8, 16, 32, 64]:
          for lmul in get_lmul_seg(sew):
            for vl in get_vl(lmul, sew, vlen):
              for imm in np.array([sew//7],dtype=get_uintdtype(sew)):
                tail= get_tailmax(lmul, sew)
                vs2 = np.linspace( 1, get_intmax(sew), tail, dtype=get_uintdtype(sew))
                mask= random_mask(tail)
                bvl = Bitsl2Bytesl(tail)
                ori = random_mask(8*bvl)
                lmul_tu = 1 if isinstance(lmul,str) else lmul
                params_yml.append([ori, vs2, imm, sew, lmul, lmul_tu, vl, mask, tail, bvl])

    test_vstart_not_equal_zero_with_mask @ ori, imm, vs2, sew, vl, lmul, mask, vstart, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32, 64 ]:
          for lmul in get_lmul_seg(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vstart in [vl//2,sew//2]:
                for imm in np.array([15],dtype=get_uintdtype(sew)):
                  vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_uintdtype(sew))
                  mask= random_mask(vl)
                  bvl = Bitsl2Bytesl(vl)
                  ori = random_mask(8*bvl)
                  params_yml.append([ori, imm, vs2, sew, vl, lmul, mask, vstart, bvl]) 
              
    test_register_vd_equ_vs2_with_mask @ ori, imm, vs2, sew, vl, lmul, mask, bvl, flag:
      setup: |
        params_yml = []
        for sew in [ 8, 16 ]: 
          for lmul in get_lmul_seg(sew):
            for vl in get_vl(lmul, sew, vlen):
              for imm in np.array([0],dtype=get_uintdtype(sew)):
                vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_uintdtype(sew))
                mask= random_mask(vl) 
                bvl = Bitsl2Bytesl(vl)
                ori = vs2.copy()
                flag= 1
                params_yml.append([ori, imm, vs2, sew, vl, lmul, mask, bvl, flag])  

    test_register_vd_eq_vm_with_mask @ ori, imm, vs2, sew, vl, lmul, mask, bvl, flag:
      setup: |
        params_yml = []
        for sew in [ 8, 32 ]:
          for lmul in get_lmul_seg(sew):
            for vl in get_vl(lmul, sew, vlen):
              for imm in np.array([1],dtype=get_uintdtype(sew)):
                vs2 = np.linspace( 0, get_intmax(sew), vl, dtype=get_intdtype(sew))              
                bvl = Bitsl2Bytesl(vl)
                mask= random_mask(8*bvl)
                ori = mask
                flag = 1
                params_yml.append([ori, imm, vs2, sew, vl, lmul, mask, bvl, flag]) 

vmadc_vim:
  <<: *default
