_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_base_without_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a6, {ori_data}; 
        vle8.v v24, (a6);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data};        
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        {name} v24, v16, v8;
        li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, test_{num}_data;
        vse8.v v24, (a3);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection 

    test_base_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a6, {ori_data}; 
        vle8.v v24, (a6);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a0, {mask_data};
        la a1, {vs1_data};
        la a2, {vs2_data};        
        vle1.v      v0, (a0);
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        {name} v24, v16, v8, v0.t;
        li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,{vma};
        la a3, test_{num}_data;
        vse8.v v24, (a3);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection 

    test_regression_without_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a6, {ori_data}; 
        vle8.v v24, (a6);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data};        
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, test_{num}_data;
        vse8.v v24, (a3);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection  

    test_agnostic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a3, {ori_data}; 
        vle8.v v24, (a3);
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma;
        la a1, {vs1_data};
        la a2, {vs2_data};    
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        {name} v24, v16, v8;
        li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a6, test_{num}_data;
        vse8.v v24, (a6);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection  

    test_vstart_not_equal_zero_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, {ori_data}; 
        vle8.v v24, (a3);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data};         
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la  a6, test_{num}_data;
        vse8.v v24, (a6);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection 

    test_vstart_not_equal_zero_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, {ori_data}; 
        vle8.v v24, (a3);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a0, {mask_data};
        la a1, {vs1_data};
        la a2, {vs2_data};     
        vle1.v  v0, (a0);    
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, v16, v8, v0.t;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la  a6, test_{num}_data;
        vse8.v v24, (a6);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection 

    test_register_vd_equ_vs1_without_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data};        
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        {name} v8, v16, v8;
        li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, test_{num}_data;
        vse8.v v8, (a3);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection 

    test_register_vd_equ_vs2_without_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data};        
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        {name} v16, v16, v8;
        li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, test_{num}_data;
        vse8.v v16, (a3);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection 

    test_register_vs1_equ_vs2_without_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {bvl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a6, {ori_data}; 
        vle8.v v24, (a6);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};       
        vle{sew}.v  v8, (a1);
        {name} v24, v8, v8;
        li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, test_{num}_data;
        vse8.v v24, (a3);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection  

    test_register_vd_equ_vs1_vs2_without_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};       
        vle{sew}.v  v8, (a1);
        {name} v8, v8, v8;
        li a0, {bvl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a3, test_{num}_data;
        vse8.v v8, (a3);
        .pushsection .data, 1;
        .balign (1)
      test_{num}_data:
        .fill ({bvl}), (1), 0;
        .popsection  


  check:
    test_base_without_mask: np.array_equal(result, golden)
    test_base_with_mask   : np.array_equal(result, golden)
    test_regression_without_mask: np.array_equal(result, golden)
    test_agnostic_without_mask: np.array_equal(result, golden)
    test_vstart_not_equal_zero_without_mask: np.array_equal(result, golden)
    test_vstart_not_equal_zero_with_mask   : np.array_equal(result, golden)
    test_register_vd_equ_vs1_without_mask: np.array_equal(result, golden)
    test_register_vd_equ_vs2_without_mask: np.array_equal(result, golden)
    test_register_vs1_equ_vs2_without_mask: np.array_equal(result, golden)
    test_register_vd_equ_vs1_vs2_without_mask: np.array_equal(result, golden)
    

  basic_cases:
    test_base_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32, 64]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):           
              vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              bvl = Bitsl2Bytesl(vl)
              ori = random_mask(8*bvl)
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl])

    test_base_with_mask @ ori, vs1, vs2, sew, vl, lmul, vma, mask, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vma in ["ma", "mu"]:
                vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
                vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
                mask= random_mask(vl)
                bvl = Bitsl2Bytesl(vl)
                ori = random_mask(8*bvl)
                params_yml.append([ori, vs1, vs2, sew, vl, lmul, vma, mask, bvl])


  random_cases:
    test_regression_without_mask @ ori, vs1, vs2, sew, vl, lmul, vma, vstart, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vma in ["ma", "mu"]:
                for vstart in [vl//2,np.random.randint(vl+2)]:
                  vs1 = np.random.uniform(get_intmin(sew), get_intmax(sew), vl).astype(get_intdtype(sew))
                  vs2 = np.random.uniform(get_intmin(sew), get_intmax(sew), vl).astype(get_intdtype(sew))
                  bvl = Bitsl2Bytesl(vl)
                  ori = random_mask(8*bvl) 
                  params_yml.append([ori, vs1, vs2, sew, vl, lmul, vma, vstart, bvl])  
               

  cases:
    test_agnostic_without_mask @ ori, vs2, vs1, sew, lmul, lmul_tu, vl, tail, bvl:
      setup: |
        params_yml = []
        for sew in [8, 16, 32, 64]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew)
              vs1 = np.linspace( 2, get_intmax(sew), tail, dtype=get_intdtype(sew))
              vs2 = np.linspace( 1, get_intmax(sew), tail, dtype=get_intdtype(sew))
              bvl = Bitsl2Bytesl(tail)
              ori = random_mask(8*tail) 
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, vs1, sew, lmul, lmul_tu, vl, tail, bvl])

    test_vstart_not_equal_zero_without_mask @ ori, vs1, vs2, sew, vl, lmul, vstart, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32, 64 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vstart in [vl//2,sew//2]:
                vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
                vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
                bvl = Bitsl2Bytesl(vl)
                ori = random_mask(8*bvl)                 
                params_yml.append([ori, vs1, vs2, sew, vl, lmul, vstart, bvl])  

    test_vstart_not_equal_zero_with_mask @ ori, vs1, vs2, sew, vl, lmul, mask, vstart, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 32, 64 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vstart in [vl//2]:
                vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
                vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
                mask= random_mask(vl) 
                bvl = Bitsl2Bytesl(vl)
                ori = random_mask(8*bvl)                 
                params_yml.append([ori, vs1, vs2, sew, vl, lmul, mask, vstart, bvl])  

    test_register_vd_equ_vs1_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              bvl = Bitsl2Bytesl(vl)
              ori = vs1.copy() #astype(get_uintdtype(8))
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl])  

    test_register_vd_equ_vs2_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              bvl = Bitsl2Bytesl(vl)
              ori = vs2.copy() #astype(get_uintdtype(8))
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl])              

    test_register_vs1_equ_vs2_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 64 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              vs1 = np.linspace(get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              vs2 = vs1
              bvl = Bitsl2Bytesl(vl)
              ori = random_mask(8*bvl)
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl])  

    test_register_vd_equ_vs1_vs2_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 64 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              vs1 = np.linspace(get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              vs2 = vs1
              bvl = Bitsl2Bytesl(vl)
              ori = vs1.copy()
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl]) 

vmseq_vv:
  <<: *default

vmsne_vv:
  <<: *default

vmslt_vv:
  <<: *default

vmsle_vv:
  <<: *default


_: &unsigned
  <<: *default
  basic_cases:
    test_base_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32, 64]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):           
              vs1 = np.linspace( 0, get_uintmax(sew), vl, dtype=get_uintdtype(sew))
              vs2 = np.linspace( 1, get_uintmax(sew), vl, dtype=get_uintdtype(sew))
              bvl = Bitsl2Bytesl(vl)
              ori = random_mask(8*bvl)
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl])

    test_base_with_mask @ ori, vs1, vs2, sew, vl, lmul, vma, mask, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vma in ["ma", "mu"]:
                vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
                vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
                mask= random_mask(vl)
                bvl = Bitsl2Bytesl(vl)
                ori = random_mask(8*bvl)
                params_yml.append([ori, vs1, vs2, sew, vl, lmul, vma, mask, bvl])

  random_cases:
    test_regression_without_mask @ ori, vs1, vs2, sew, vl, lmul, vma, vstart, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vma in ["ma", "mu"]:
                for vstart in [vl//2,np.random.randint(vl+2)]:
                  vs1 = np.random.uniform(0, get_uintmax(sew), vl).astype(get_uintdtype(sew))
                  vs2 = np.random.uniform(1, get_uintmax(sew), vl).astype(get_uintdtype(sew))
                  bvl = Bitsl2Bytesl(vl)
                  ori = random_mask(8*bvl) 
                  params_yml.append([ori, vs1, vs2, sew, vl, lmul, vma, vstart, bvl])  
             

  cases:
    test_agnostic_without_mask @ ori, vs2, vs1, sew, lmul, lmul_tu, vl, tail, bvl:
      setup: |
        params_yml = []
        for sew in [8, 16, 32, 64]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew)
              vs1 = np.linspace( 2, get_uintmax(sew), tail, dtype=get_uintdtype(sew))
              vs2 = np.linspace( 1, get_uintmax(sew), tail, dtype=get_uintdtype(sew))
              bvl = Bitsl2Bytesl(tail)
              ori = random_mask(8*tail) 
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, vs1, sew, lmul, lmul_tu, vl, tail, bvl]) 

    test_vstart_not_equal_zero_without_mask @ ori, vs1, vs2, sew, vl, lmul, vstart, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32, 64 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vstart in [vl//2,sew//2]:
                vs1 = np.linspace(1, get_uintmax(sew), vl, dtype=get_uintdtype(sew))
                vs2 = np.linspace(2, get_uintmax(sew), vl, dtype=get_uintdtype(sew))
                bvl = Bitsl2Bytesl(vl)
                ori = random_mask(8*bvl)                 
                params_yml.append([ori, vs1, vs2, sew, vl, lmul, vstart, bvl])  

    test_vstart_not_equal_zero_with_mask @ ori, vs1, vs2, sew, vl, lmul, mask, vstart, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 32, 64 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vstart in [vl//2]:
                vs1 = np.linspace(2, get_uintmax(sew), vl, dtype=get_uintdtype(sew))
                vs2 = np.linspace(1, get_uintmax(sew), vl, dtype=get_uintdtype(sew))
                mask= random_mask(vl) 
                bvl = Bitsl2Bytesl(vl)
                ori = random_mask(8*bvl)                 
                params_yml.append([ori, vs1, vs2, sew, vl, lmul, mask, vstart, bvl])  

    test_register_vd_equ_vs1_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              bvl = Bitsl2Bytesl(vl)
              ori = vs1.copy() #astype(get_uintdtype(8))
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl])  

    test_register_vd_equ_vs2_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              bvl = Bitsl2Bytesl(vl)
              ori = vs2.copy() #astype(get_uintdtype(8))
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl])               

    test_register_vs1_equ_vs2_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 64 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              vs1 = np.linspace(1, get_uintmax(sew), vl, dtype=get_uintdtype(sew))
              vs2 = vs1
              bvl = Bitsl2Bytesl(vl)
              ori = random_mask(8*bvl)
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl])  

    test_register_vd_equ_vs1_vs2_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 64 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              vs1 = np.linspace(0, get_uintmax(sew), vl, dtype=get_uintdtype(sew))
              vs2 = vs1
              bvl = Bitsl2Bytesl(vl)
              ori = vs1.copy()
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl]) 

vmsleu_vv:
  <<: *unsigned   

vmsltu_vv:
  <<: *unsigned              


_: &addsub
  <<: *default
  basic_cases:
    test_base_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32, 64]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):           
              vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              bvl = Bitsl2Bytesl(vl)
              ori = random_mask(8*bvl)
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl])

  random_cases:
    test_regression_without_mask @ ori, vs1, vs2, sew, vl, lmul, vma, vstart, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16, 32 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vma in ["ma", "mu"]:
                for vstart in [vl//2,np.random.randint(vl+2)]:
                  vs1 = np.random.uniform(get_intmin(sew), get_intmax(sew), vl).astype(get_uintdtype(sew)) # note +
                  vs2 = np.random.uniform(get_intmin(sew), get_intmax(sew), vl).astype(get_uintdtype(sew))
                  bvl = Bitsl2Bytesl(vl)
                  ori = random_mask(8*bvl) 
                  params_yml.append([ori, vs1, vs2, sew, vl, lmul, vma, vstart, bvl])  


  cases:
    test_agnostic_without_mask @ ori, vs2, vs1, sew, lmul, lmul_tu, vl, tail, bvl:
      setup: |
        params_yml = []
        for sew in [8, 16, 32, 64]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew)
              vs1 = np.linspace( 2, get_intmax(sew), tail, dtype=get_uintdtype(sew))
              vs2 = np.linspace( get_intmin(sew), 2, tail, dtype=get_uintdtype(sew))
              bvl = Bitsl2Bytesl(tail)
              ori = random_mask(8*tail) 
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, vs1, sew, lmul, lmul_tu, vl, tail, bvl])

    test_vstart_not_equal_zero_without_mask @ ori, vs1, vs2, sew, vl, lmul, vstart, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 32, 64 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              for vstart in [vl//2]:
                vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
                vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
                bvl = Bitsl2Bytesl(vl)
                ori = random_mask(8*bvl)                 
                params_yml.append([ori, vs1, vs2, sew, vl, lmul, vstart, bvl])  

    test_register_vd_equ_vs1_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              bvl = Bitsl2Bytesl(vl)
              ori = vs1.copy()
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl]) 

    test_register_vd_equ_vs2_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 16 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              vs1 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              vs2 = np.linspace( get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              bvl = Bitsl2Bytesl(vl)
              ori = vs2.copy()
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl])            

    test_register_vs1_equ_vs2_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 64 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              vs1 = np.linspace(get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              vs2 = vs1
              bvl = Bitsl2Bytesl(vl)
              ori = random_mask(8*bvl)
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl])  

    test_register_vd_equ_vs1_vs2_without_mask @ ori, vs1, vs2, sew, vl, lmul, bvl:
      setup: |
        params_yml = []
        for sew in [ 8, 64 ]:
          for lmul in get_lmul_w(sew):
            for vl in get_vl(lmul, sew, vlen):
              vs1 = np.linspace(get_intmin(sew), get_intmax(sew), vl, dtype=get_intdtype(sew))
              vs2 = vs1
              bvl = Bitsl2Bytesl(vl)
              ori = vs1.copy()
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, bvl]) 

vmadc_vv: 
  <<: *addsub

vmsbc_vv:  
  <<: *addsub

