_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_base_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        la a1, {vs1_data};
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew2}.v  v8, (a1);
        vle{sew}.v  v16, (a2);
        vle{sew2}.v v24, (a3);
        {name} v24, v16, v8;
        la a4, test_{num}_data;
        vse{sew2}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew2}/8)
      test_{num}_data:
        .fill ({vl}), ({sew2}/8), 0;
        .popsection

    test_base_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        la a0, {mask_data};
        la a1, {vs1_data};
        la a2, {vs2_data};        
        la a6, {ori_data};
        vle{sew}.v v0, (a0);
        vle{sew2}.v  v8, (a1);
        vle{sew}.v  v16, (a2);
        vle{sew2}.v v24, (a6);
        {name} v24, v16, v8, v0.t;
        la a3, test_{num}_data;
        vse{sew2}.v v24, (a3);
        .pushsection .data, 1;
        .balign ({sew2}/8)
      test_{num}_data:
        .fill ({vl}), ({sew2}/8), 0;
        .popsection  
                
  check:
    test_base_without_mask: np.array_equal(result, golden)
    test_base_with_mask   : np.array_equal(result, golden)
    
vwredsumu_vs:
  <<: *default
  cases:
    test_base_without_mask @ ori, vs1, vs2, sew, sew2, vl, lmul:
      - '[np.array([7],dtype=np.uint16), np.array([1],dtype=np.uint16), np.array([0x10],dtype=np.uint8 ), 8, 16, 1, 1]'
      - '[np.array([7],dtype=np.uint16), np.array([1],dtype=np.uint16), np.array([0x21],dtype=np.uint8 ), 8, 16, 1, 1]'
      - '[np.array([7],dtype=np.uint16), np.array([1],dtype=np.uint16), np.array([0xff],dtype=np.uint8 ), 8, 16, 1, 1]'
      - '[np.array([7],dtype=np.uint16), np.array([1],dtype=np.uint16), np.array([0xef],dtype=np.uint8 ), 8, 16, 1, 1]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([1,1,2,5],dtype=np.uint16), np.array([1,3,205,7],dtype=np.uint8 ),  8, 16, 4,   1]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([0,1,2,3],dtype=np.uint16), np.array([7,8,14,24],dtype=np.uint8 ),  8, 16, 4,   1]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([1,1,2,5],dtype=np.uint16), np.array([1,73,5,97],dtype=np.uint8 ),  8, 16, 4,   1]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([0,1,2,3],dtype=np.uint16), np.array([7,8,14,24],dtype=np.uint8 ),  8, 16, 4,"f2"]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([0,1,2,3],dtype=np.uint16), np.array([7,8,14,24],dtype=np.uint8 ),  8, 16, 4,"f4"]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint16), np.linspace(0,0x40,64,dtype=np.uint16), np.linspace(0x20,0x00ff,64,dtype=np.uint8 ),  8, 16, 64, 1]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint16), np.linspace(0,0x40,64,dtype=np.uint16), np.linspace(0x20,0xff00,64,dtype=np.uint8 ),  8, 16, 64, 1]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint32), np.linspace(1,0x40,64,dtype=np.uint32), np.linspace(0x20,0x00ff,64,dtype=np.uint16), 16, 32, 64, 2]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint64), np.linspace(1,0x40,64,dtype=np.uint64), np.linspace(0x20,0xff00,64,dtype=np.uint32), 32, 64, 64, 4]'
 
    test_base_with_mask    @ ori, vs1, vs2, sew, sew2, vl, lmul, mask:
      - '[np.array([7],dtype=np.uint16), np.array([1],dtype=np.uint16), np.array([10],dtype=np.uint8 ), 8, 16, 1, 1, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.uint16), np.array([1],dtype=np.uint16), np.array([21],dtype=np.uint8 ), 8, 16, 1, 1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.uint16), np.array([1],dtype=np.uint16), np.array([41],dtype=np.uint8 ), 8, 16, 1, 1, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.uint16), np.array([1],dtype=np.uint16), np.array([18],dtype=np.uint8 ), 8, 16, 1, 1, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([1,1,2,5],dtype=np.uint16), np.array([1,3,205,7],dtype=np.uint8 ),  8, 16, 4,   1, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([0,1,2,3],dtype=np.uint16), np.array([7,8,14,24],dtype=np.uint8 ),  8, 16, 4,   1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([1,1,2,5],dtype=np.uint16), np.array([1,73,5,97],dtype=np.uint8 ),  8, 16, 4,   1, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([1,1,2,5],dtype=np.uint16), np.array([1,73,5,97],dtype=np.uint8 ),  8, 16, 4,"f2", np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([0,1,2,3],dtype=np.uint16), np.array([7,8,14,24],dtype=np.uint8 ),  8, 16, 4,"f8", np.array([0xf],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint16), np.linspace(0,0x40,64,dtype=np.uint16), np.linspace(0x20,0x00ff,64,dtype=np.uint8 ),  8, 16, 64, 1, np.array([0xffffffffff000000],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint16), np.linspace(0,0x40,64,dtype=np.uint16), np.linspace(0x20,0xff00,64,dtype=np.uint8 ),  8, 16, 64, 1, np.array([0xffffffff0000ffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint16), np.linspace(0,0x40,64,dtype=np.uint16), np.linspace(0x20,0x00ff,64,dtype=np.uint8 ),  8, 16, 64, 1, np.array([0xffff0000ffffffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint16), np.linspace(0,0x40,64,dtype=np.uint16), np.linspace(0x20,0xff00,64,dtype=np.uint8 ),  8, 16, 64, 1, np.array([0xffffffffff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint32), np.linspace(1,0x40,64,dtype=np.uint32), np.linspace(0x20,0x00ff,64,dtype=np.uint16), 16, 32, 64, 2, np.array([0xff0000ffffffffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint64), np.linspace(0,0x40,64,dtype=np.uint64), np.linspace(0x20,0x00ff,64,dtype=np.uint32), 32, 64, 64, 2, np.array([0xffffffffff000000],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint64), np.linspace(0,0x40,64,dtype=np.uint64), np.linspace(0x20,0xff00,64,dtype=np.uint32), 32, 64, 64, 4, np.array([0xffffffff0000ffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint64), np.linspace(0,0x40,64,dtype=np.uint64), np.linspace(0x20,0x00ff,64,dtype=np.uint32), 32, 64, 64, 4, np.array([0xffff0000ffffffff],dtype=np.uint64)]'

vwredsum_vs:
  <<: *default
  cases:
    test_base_without_mask @ ori, vs1, vs2, sew, sew2, vl, lmul:
      - '[np.array([7],dtype=np.int16), np.array([1],dtype=np.int16), np.array([10],dtype=np.int8 ), 8, 16, 1, 1]'
      - '[np.array([7],dtype=np.int16), np.array([1],dtype=np.int16), np.array([21],dtype=np.int8 ), 8, 16, 1, 1]'
      - '[np.array([7],dtype=np.int16), np.array([1],dtype=np.int16), np.array([41],dtype=np.int8 ), 8, 16, 1, 1]'
      - '[np.array([7],dtype=np.int16), np.array([1],dtype=np.int16), np.array([18],dtype=np.int8 ), 8, 16, 1, 1]'
      - '[np.array([7,7,9,7],dtype=np.int16), np.array([1,1,2,5],dtype=np.int16), np.array([1,3,205,7],dtype=np.int8 ),  8, 16, 4,   1]'
      - '[np.array([7,7,9,7],dtype=np.int16), np.array([0,1,2,3],dtype=np.int16), np.array([7,8,14,24],dtype=np.int8 ),  8, 16, 4,   1]'
      - '[np.array([7,7,9,7],dtype=np.int16), np.array([1,1,2,5],dtype=np.int16), np.array([1,73,5,97],dtype=np.int8 ),  8, 16, 4,   1]'
      - '[np.array([7,7,9,7],dtype=np.int16), np.array([0,1,2,3],dtype=np.int16), np.array([7,8,14,24],dtype=np.int8 ),  8, 16, 4,"f2"]'
      - '[np.array([7,7,9,7],dtype=np.int16), np.array([0,1,2,3],dtype=np.int16), np.array([7,8,14,24],dtype=np.int8 ),  8, 16, 4,"f4"]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int16), np.linspace(0,0x40,64,dtype=np.int16), np.linspace(0x20,0x00ff,64,dtype=np.int8 ),  8, 16, 64, 1]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int16), np.linspace(0,0x40,64,dtype=np.int16), np.linspace(0x20,0xff00,64,dtype=np.int8 ),  8, 16, 64, 1]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int32), np.linspace(1,0x40,64,dtype=np.int32), np.linspace(0x20,0x00ff,64,dtype=np.int16), 16, 32, 64, 2]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int64), np.linspace(1,0x40,64,dtype=np.int64), np.linspace(0x20,0xff00,64,dtype=np.int32), 32, 64, 64, 4]'
 
    test_base_with_mask    @ ori, vs1, vs2, sew, sew2, vl, lmul, mask:
      - '[np.array([7],dtype=np.int16), np.array([1],dtype=np.int16), np.array([0x10],dtype=np.int8 ), 8, 16, 1, 1, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.int16), np.array([1],dtype=np.int16), np.array([0x21],dtype=np.int8 ), 8, 16, 1, 1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.int16), np.array([1],dtype=np.int16), np.array([0xff],dtype=np.int8 ), 8, 16, 1, 1, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.int16), np.array([1],dtype=np.int16), np.array([0xf0],dtype=np.int8 ), 8, 16, 1, 1, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int16), np.array([1,1,2,5],dtype=np.int16), np.array([1,3,205,7],dtype=np.int8 ),  8, 16, 4,   1, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int16), np.array([0,1,2,3],dtype=np.int16), np.array([7,8,14,24],dtype=np.int8 ),  8, 16, 4,   1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int16), np.array([1,1,2,5],dtype=np.int16), np.array([1,73,5,97],dtype=np.int8 ),  8, 16, 4,   1, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int16), np.array([1,1,2,5],dtype=np.int16), np.array([1,73,5,97],dtype=np.int8 ),  8, 16, 4,"f2", np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int16), np.array([0,1,2,3],dtype=np.int16), np.array([7,8,14,24],dtype=np.int8 ),  8, 16, 4,"f8", np.array([0xf],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int16), np.linspace(0,0x40,64,dtype=np.int16), np.linspace(0x20,0x00ff,64,dtype=np.int8 ),  8, 16, 64, 1, np.array([0xffffffffff000000],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int16), np.linspace(0,0x40,64,dtype=np.int16), np.linspace(0x20,0xff00,64,dtype=np.int8 ),  8, 16, 64, 1, np.array([0xffffffff0000ffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int16), np.linspace(0,0x40,64,dtype=np.int16), np.linspace(0x20,0x00ff,64,dtype=np.int8 ),  8, 16, 64, 1, np.array([0xffff0000ffffffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int16), np.linspace(0,0x40,64,dtype=np.int16), np.linspace(0x20,0xff00,64,dtype=np.int8 ),  8, 16, 64, 1, np.array([0xffffffffff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int32), np.linspace(1,0x40,64,dtype=np.int32), np.linspace(0x20,0x00ff,64,dtype=np.int16), 16, 32, 64, 2, np.array([0xff0000ffffffffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int64), np.linspace(0,0x40,64,dtype=np.int64), np.linspace(0x20,0x00ff,64,dtype=np.int32), 32, 64, 64, 2, np.array([0xffffffffff000000],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int64), np.linspace(0,0x40,64,dtype=np.int64), np.linspace(0x20,0xff00,64,dtype=np.int32), 32, 64, 64, 4, np.array([0xffffffff0000ffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int64), np.linspace(0,0x40,64,dtype=np.int64), np.linspace(0x20,0x00ff,64,dtype=np.int32), 32, 64, 64, 4, np.array([0x0000000000000000],dtype=np.uint64)]'
