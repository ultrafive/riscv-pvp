_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  templates:
    test_basic_without_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li t0, {frm};
          fsrm t1, t0; 
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m2,tu,mu;
          la a1, {vs2_data} ; 
          {ldins} v2, (a1) ;
          vsetvli t0, a0, e{ebits_vd},m1,tu,mu;           
          {name} v4, v2 ;
          la a3, test_{num}_data; 
          {stins} v4, (a3); 
          .pushsection .data, 1; 
          .balign ({ebits_vd}/8)
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits_vd}/8), 0; 
          .popsection     
    test_special_without_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li t0, {frm};
          fsrm t1, t0; 
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m2,tu,mu;
          la a1, {vs2_data} ; 
          {ldins} v2, (a1) ;
          vsetvli t0, a0, e{ebits_vd},m1,tu,mu;           
          {name} v4, v2 ;
          la a3, test_{num}_data; 
          {stins} v4, (a3); 
          .pushsection .data, 1; 
          .balign ({ebits_vd}/8)
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits_vd}/8), 0; 
          .popsection
    test_basic_with_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li t0, {frm};
          fsrm t1, t0;            
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m2,tu,mu;
          la a1, {vs2_data} ;
          {ldins} v2, (a1) ; 
          vsetvli t0, a0, e{ebits_vd},m1,tu,mu;          
          la a0, {mask_data} ; 
          la a3, {orig_data} ; 
          vle1.v v0, (a0) ; 
          {ldins_vd} v4, (a3) ; 
          {name} v4, v2, v0.t ; 
          la a3, test_{num}_data ; 
          {stins} v4, (a3); 
          .pushsection .data, 1; 
          .balign ({ebits_vd}/8)
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits_vd}/8), 0; 
          .popsection

vfncvt_xu_f_w:
  <<: *default
  cases:
    test_basic_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[np.linspace( 0, 4294967295, 1, dtype=np.float64), 0]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.float64), 0]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.float64), 0]"
      - "[np.linspace( 0, 4294967295, 1, dtype=np.float64), 1]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.float64), 1]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.float64), 1]"
      - "[np.linspace( 0, 4294967295, 1, dtype=np.float64), 2]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.float64), 2]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.float64), 2]"
      - "[np.linspace( 0, 4294967295, 1, dtype=np.float64), 3]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.float64), 3]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.float64), 3]"
      - "[np.linspace( 0, 4294967295, 1, dtype=np.float64), 4]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.float64), 4]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.float64), 4]"                  
    test_special_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 0 ]"
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 1 ]"
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 2 ]"
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 3 ]"
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 4 ]"
      - "[np.linspace( -5000000000, 5000000000, 32, dtype=np.float64), 0]"  
      - "[np.linspace( -5000000000, 5000000000, 32, dtype=np.float64), 1]" 
      - "[np.linspace( -5000000000, 5000000000, 32, dtype=np.float64), 2]" 
      - "[np.linspace( -5000000000, 5000000000, 32, dtype=np.float64), 3]" 
      - "[np.linspace( -5000000000, 5000000000, 32, dtype=np.float64), 4]"                                                  
    test_basic_with_mask @ vs2, frm, mask, orig, vlen @ ebits=64, ebits_vd=32, ldins='vle64.v', ldins_vd='vle32.v', stins='vse32.v':
      - "[np.linspace( 0, 4294967295, 1, dtype=np.float64), 0, random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint32), 1 ]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.float64), 0, random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint32), 10 ]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.float64), 0, random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint32), 32 ]" 
      - "[np.linspace( 0, 4294967295, 1, dtype=np.float64), 1, random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint32), 1 ]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.float64), 1, random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint32), 10 ]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.float64), 1, random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint32), 32 ]" 
      - "[np.linspace( 0, 4294967295, 1, dtype=np.float64), 2, random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint32), 1 ]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.float64), 2, random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint32), 10 ]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.float64), 2, random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint32), 32 ]" 
      - "[np.linspace( 0, 4294967295, 1, dtype=np.float64), 3, random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint32), 1 ]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.float64), 3, random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint32), 10 ]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.float64), 3, random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint32), 32 ]" 
      - "[np.linspace( 0, 4294967295, 1, dtype=np.float64), 4, random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint32), 1 ]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.float64), 4, random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint32), 10 ]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.float64), 4, random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint32), 32 ]"                              
  check:
    test_basic_without_mask: np.equal( result, golden ).all()
    test_special_without_mask: np.equal( result, golden ).all()
    test_basic_with_mask: np.equal( result, golden ).all()

vfncvt_x_f_w:
  <<: *default
  cases:
    test_basic_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.float64), 0]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.float64), 0]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.float64), 0]"
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.float64), 1]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.float64), 1]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.float64), 1]"
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.float64), 2]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.float64), 2]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.float64), 2]"
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.float64), 3]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.float64), 3]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.float64), 3]"
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.float64), 4]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.float64), 4]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.float64), 4]"                  
    test_special_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 0 ]"
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 1 ]"
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 2 ]"
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 3 ]"
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 4 ]"  
      - "[np.linspace( -3000000000, 3000000000, 32, dtype=np.float64), 0]"     
      - "[np.linspace( -3000000000, 3000000000, 32, dtype=np.float64), 1]"  
      - "[np.linspace( -3000000000, 3000000000, 32, dtype=np.float64), 2]"  
      - "[np.linspace( -3000000000, 3000000000, 32, dtype=np.float64), 3]"  
      - "[np.linspace( -3000000000, 3000000000, 32, dtype=np.float64), 4]"                                                     
    test_basic_with_mask @ vs2, frm, mask, orig, vlen @ ebits=64, ebits_vd=32, ldins='vle64.v', ldins_vd='vle32.v', stins='vse32.v':
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.float64), 0, random_mask(1), np.linspace( 1, 127, 1, dtype=np.int32), 1 ]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.float64), 0, random_mask(10), np.linspace( 1, 127, 10, dtype=np.int32), 10 ]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.float64), 0, random_mask(32), np.linspace( 1, 127, 32, dtype=np.int32), 32 ]" 
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.float64), 1, random_mask(1), np.linspace( 1, 127, 1, dtype=np.int32), 1 ]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.float64), 1, random_mask(10), np.linspace( 1, 127, 10, dtype=np.int32), 10 ]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.float64), 1, random_mask(32), np.linspace( 1, 127, 32, dtype=np.int32), 32 ]" 
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.float64), 2, random_mask(1), np.linspace( 1, 127, 1, dtype=np.int32), 1 ]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.float64), 2, random_mask(10), np.linspace( 1, 127, 10, dtype=np.int32), 10 ]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.float64), 2, random_mask(32), np.linspace( 1, 127, 32, dtype=np.int32), 32 ]" 
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.float64), 3, random_mask(1), np.linspace( 1, 127, 1, dtype=np.int32), 1 ]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.float64), 3, random_mask(10), np.linspace( 1, 127, 10, dtype=np.int32), 10 ]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.float64), 3, random_mask(32), np.linspace( 1, 127, 32, dtype=np.int32), 32 ]" 
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.float64), 4, random_mask(1), np.linspace( 1, 127, 1, dtype=np.int32), 1 ]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.float64), 4, random_mask(10), np.linspace( 1, 127, 10, dtype=np.int32), 10 ]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.float64), 4, random_mask(32), np.linspace( 1, 127, 32, dtype=np.int32), 32 ]"
  check:
    test_basic_without_mask: np.equal( result, golden ).all()
    test_special_without_mask: np.equal( result, golden ).all()
    test_basic_with_mask: np.equal( result, golden ).all()

vfncvt_rtz_xu_f_w:
  <<: *default
  cases:
    test_basic_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[np.linspace( 0, 4294967295, 1, dtype=np.float64), 0]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.float64), 0]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.float64), 0]"                 
    test_special_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 0 ]"
      - "[np.linspace( -5000000000, 5000000000, 32, dtype=np.float64), 0]"                                   
    test_basic_with_mask @ vs2, frm, mask, orig, vlen @ ebits=64, ebits_vd=32, ldins='vle64.v', ldins_vd='vle32.v', stins='vse32.v':
      - "[np.linspace( 0, 4294967295, 1, dtype=np.float64), 0, random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint32), 1 ]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.float64), 0, random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint32), 10 ]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.float64), 0, random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint32), 32 ]" 
  check:
    test_basic_without_mask: np.equal( result, golden ).all()
    test_special_without_mask: np.equal( result, golden ).all()
    test_basic_with_mask: np.equal( result, golden ).all()

vfncvt_rtz_x_f_w:
  <<: *default
  cases:
    test_basic_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.float64), 0]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.float64), 0]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.float64), 0]"                 
    test_special_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 0 ]"
      - "[np.linspace( -3000000000, 3000000000, 32, dtype=np.float64), 0]"                                  
    test_basic_with_mask @ vs2, frm, mask, orig, vlen @ ebits=64, ebits_vd=32, ldins='vle64.v', ldins_vd='vle32.v', stins='vse32.v':
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.float64), 0, random_mask(1), np.linspace( 1, 127, 1, dtype=np.int32), 1 ]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.float64), 0, random_mask(10), np.linspace( 1, 127, 10, dtype=np.int32), 10 ]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.float64), 0, random_mask(32), np.linspace( 1, 127, 32, dtype=np.int32), 32 ]" 
  check:
    test_basic_without_mask: np.equal( result, golden ).all()
    test_special_without_mask: np.equal( result, golden ).all()
    test_basic_with_mask: np.equal( result, golden ).all()  

vfncvt_f_xu_w:
  <<: *default
  cases:
    test_basic_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.uint64), 0]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.uint64), 0]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.uint64), 0]"                 
    test_special_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[ linspace_rvv_v_special(np.uint64, 0, 32), 0 ]"                            
    test_basic_with_mask @ vs2, frm, mask, orig, vlen @ ebits=64, ebits_vd=32, ldins='vle64.v', ldins_vd='vle32.v', stins='vse32.v':
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.uint64), 0, random_mask(1), np.linspace( -127, 128, 1, dtype=np.float32), 1 ]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.uint64), 0, random_mask(10), np.linspace( -127, 128, 10, dtype=np.float32), 10 ]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.uint64), 0, random_mask(32), np.linspace( -127, 128, 32, dtype=np.float32), 32 ]" 
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 

vfncvt_f_x_w:
  <<: *default
  cases:
    test_basic_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.int64), 0]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.int64), 0]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.int64), 0]"                 
    test_special_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[ linspace_rvv_v_special(np.int64, 0, 32), 0 ]"                            
    test_basic_with_mask @ vs2, frm, mask, orig, vlen @ ebits=64, ebits_vd=32, ldins='vle64.v', ldins_vd='vle32.v', stins='vse32.v':
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.int64), 0, random_mask(1), np.linspace( 1, 127, 1, dtype=np.float32), 1 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.int64), 0, random_mask(10), np.linspace( 1, 127, 10, dtype=np.float32), 10 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.int64), 0, random_mask(32), np.linspace( 1, 127, 32, dtype=np.float32), 32 ]" 
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 

  
vfncvt_f_f_w:
  <<: *default
  cases:
    test_basic_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[np.linspace( -100.1, 100.1, 1, dtype=np.float64), 0]"
      - "[np.linspace( -100.1, 100.1, 10, dtype=np.float64), 0]"
      - "[np.linspace( -100.1, 100.1, 32, dtype=np.float64), 0]"                 
    test_special_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 0 ]" 
      - "[np.linspace( -3e40, 3e40, 32, dtype=np.float64), 0]"                                  
    test_basic_with_mask @ vs2, frm, mask, orig, vlen @ ebits=64, ebits_vd=32, ldins='vle64.v', ldins_vd='vle32.v', stins='vse32.v':
      - "[np.linspace( -100.1, 100.1, 1, dtype=np.float64), 0, random_mask(1), np.linspace( 1, 127, 1, dtype=np.float32), 1 ]"
      - "[np.linspace( -100.1, 100.1, 10, dtype=np.float64), 0, random_mask(10), np.linspace( 1, 127, 10, dtype=np.float32), 10 ]"
      - "[np.linspace( -100.1, 100.1, 32, dtype=np.float64), 0, random_mask(32), np.linspace( 1, 127, 32, dtype=np.float32), 32 ]" 
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 

vfncvt_rod_f_f_w:
  <<: *default
  cases:
    test_basic_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[np.linspace( -100.1, 100.1, 1, dtype=np.float64), 0]"
      - "[np.linspace( -100.1, 100.1, 10, dtype=np.float64), 0]"
      - "[np.linspace( -100.1, 100.1, 32, dtype=np.float64), 0]"                 
    test_special_without_mask @ vs2, frm @ ebits=64, ebits_vd=32, ldins='vle64.v', stins='vse32.v':
      - "[ linspace_rvv_v_special(np.float64, 0, 32), 0 ]" 
      - "[np.linspace( -3e40, 3e40, 32, dtype=np.float64), 0]"                                  
    test_basic_with_mask @ vs2, frm, mask, orig, vlen @ ebits=64, ebits_vd=32, ldins='vle64.v', ldins_vd='vle32.v', stins='vse32.v':
      - "[np.linspace( -100.1, 100.1, 1, dtype=np.float64), 0, random_mask(1), np.linspace( 1, 127, 1, dtype=np.float32), 1 ]"
      - "[np.linspace( -100.1, 100.1, 10, dtype=np.float64), 0, random_mask(10), np.linspace( 1, 127, 10, dtype=np.float32), 10 ]"
      - "[np.linspace( -100.1, 100.1, 32, dtype=np.float64), 0, random_mask(32), np.linspace( 1, 127, 32, dtype=np.float32), 32 ]" 
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)