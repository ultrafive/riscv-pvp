_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  _templates: &_templates
    test_basic_without_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, {vs1_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs1_data} ; 
          la a2, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {ldins} v2, (a2) ; 
          {name} v3, v2, v1 ; 
          la a3, test_{num}_data; 
          {stins} v3, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs1_shape[0]}, ({ebits}/8), 0; 
          .popsection
      
    test_special_without_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, {vs1_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs1_data} ; 
          la a2, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {ldins} v2, (a2) ; 
          {name} v3, v2, v1 ; 
          la a3, test_{num}_data; 
          {stins} v3, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs1_shape[0]}, ({ebits}/8), 0; 
          .popsection
    test_vs1_eq_vs2_without_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, {vs1_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs1_data} ; 
          {ldins} v1, (a1) ; 
          {name} v3, v1, v1 ; 
          la a3, test_{num}_data; 
          {stins} v3, (a3); 
          .pushsection .data, 1; 
      test_{num}_data:
          .fill {vs1_shape[0]}, ({ebits}/8), 0; 
          .popsection
    test_dest_eq_vs1vs2_without_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, {vs1_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs1_data} ; 
          {ldins} v1, (a1) ; 
          {name} v1, v1, v1 ; 
          la a3, test_{num}_data; 
          {stins} v1, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs1_shape[0]}, ({ebits}/8), 0; 
          .popsection
    test_dest_eq_vs1_without_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, {vs1_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs1_data} ; 
          la a2, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {ldins} v2, (a2) ; 
          {name} v1, v2, v1 ; 
          la a3, test_{num}_data; 
          {stins} v1, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs1_shape[0]}, ({ebits}/8), 0; 
          .popsection
    test_dest_eq_vs2_without_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, {vs1_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs1_data} ; 
          la a2, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {ldins} v2, (a2) ; 
          {name} v2, v2, v1 ; 
          la a3, test_{num}_data; 
          {stins} v2, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs1_shape[0]}, ({ebits}/8), 0; 
          .popsection
    test_basic_with_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, {vs1_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs1_data} ; 
          la a2, {vs2_data} ; 
          la a0, {mask_data} ; 
          la a3, {orig_data} ; 
          {ldins} v1, (a1) ; 
          {ldins} v2, (a2) ; 
          {ldins} v0, (a0) ; 
          {ldins} v3, (a3) ; 
          {name} v3, v2, v1, v0.t ; 
          la a3, test_{num}_data ; 
          {stins} v3, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs1_shape[0]}, ({ebits}/8), 0; 
          .popsection

  templates: 
    <<: *_templates
    test_basic_without_mask @ vs1, vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v': |
      {inherit}
    test_special_without_mask @ vs1, vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v': |
      {inherit}
    test_vs1_eq_vs2_without_mask @ vs1 @ vs2=vs1, ebits=32, ldins='vle32.v', stins='vse32.v': |
      {inherit}
    test_dest_eq_vs1vs2_without_mask @ vs1 @ vs2=vs1, ebits=32, ldins='vle32.v', stins='vse32.v': |
      {inherit}
    test_dest_eq_vs1_without_mask @ vs1, vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v': |
      {inherit}
    test_dest_eq_vs2_without_mask @ vs1, vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v': |
      {inherit}
    test_basic_with_mask @ vs1, vs2, mask, orig, vlen @ ebits=32, ldins='vle32.v', stins='vse32.v': |
      {inherit}
  cases:
    test_basic_without_mask:
      - linspace_rvv_vv(np.float32, 1)
      - linspace_rvv_vv(np.float32, 4)
      - linspace_rvv_vv(np.float32, 10)
      - linspace_rvv_vv(np.float32, 32)
    test_special_without_mask:
      - "[ linspace_rvv_v_special(np.float32, 0, 32), linspace_rvv_v_special(np.float32, 1, 32) ]"
    test_vs1_eq_vs2_without_mask:
      - "[np.linspace(-127, 0xffff, 1, dtype=np.float32)]"
      - "[np.linspace(-127, 0xffff, 4, dtype=np.float32)]"
      - "[np.linspace(-127, 0xffff, 10, dtype=np.float32)]"
      - "[np.linspace(-127, 0xffff, 32, dtype=np.float32)]"
    test_dest_eq_vs1vs2_without_mask:
      - "[np.linspace(-127, 0xffff, 1, dtype=np.float32)]"
      - "[np.linspace(-127, 0xffff, 4, dtype=np.float32)]"
      - "[np.linspace(-127, 0xffff, 10, dtype=np.float32)]"
      - "[np.linspace(-127, 0xffff, 32, dtype=np.float32)]"
    test_dest_eq_vs1_without_mask:
      - linspace_rvv_vv(np.float32, 1)
      - linspace_rvv_vv(np.float32, 4)
      - linspace_rvv_vv(np.float32, 10)
      - linspace_rvv_vv(np.float32, 32)
    test_dest_eq_vs2_without_mask:
      - linspace_rvv_vv(np.float32, 1)
      - linspace_rvv_vv(np.float32, 4)
      - linspace_rvv_vv(np.float32, 10)
      - linspace_rvv_vv(np.float32, 32)    
    test_basic_with_mask:
      - linspace_rvv_vv_with_mask(np.float32, 1)
      - linspace_rvv_vv_with_mask(np.float32, 4)
      - linspace_rvv_vv_with_mask(np.float32, 10)
      - linspace_rvv_vv_with_mask(np.float32, 32)
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_vs1_eq_vs2_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_dest_eq_vs1vs2_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_dest_eq_vs1_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_dest_eq_vs2_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)

vfadd_vv:
  <<: *default

vfsub_vv:
  <<: *default

vfmul_vv:
  <<: *default

vfdiv_vv:
  <<: *default

vfmax_vv:
  <<: *default

vfmin_vv:
  <<: *default

vfsgnj_vv:
  <<: *default
  cases: &cases_fsgnj
    test_basic_without_mask:
      - "[ np.array([-1.23], dtype=np.float32), np.array([4.56], dtype=np.float32)  ]"
      - "[ np.array([4.56], dtype=np.float32), np.array([-1.23], dtype=np.float32)  ]"
      - "[ np.array([4.56], dtype=np.float32), np.array([4.56], dtype=np.float32)  ]"
      - "[ np.linspace(-2, -1, 10, dtype=np.float32), np.linspace(3, 4, 10, dtype=np.float32) ]"
      - "[ np.linspace(1, 2, 10, dtype=np.float32), np.linspace(-4, -3, 10, dtype=np.float32) ]"
      - "[ np.linspace(-10, 10, 10, dtype=np.float32), np.linspace(-10, 10, 10, dtype=np.float32) ]"
      - "[ np.linspace(-20, -1, 32, dtype=np.float32), np.linspace(3, 40, 32, dtype=np.float32) ]"
      - "[ np.linspace(1, 20, 32, dtype=np.float32), np.linspace(-40, -3, 32, dtype=np.float32) ]"
      - "[ np.linspace(-10, 10, 32, dtype=np.float32), np.linspace(-10, 10, 32, dtype=np.float32) ]"      
    test_special_without_mask:
      - "[ linspace_rvv_v_special(np.float32, 0, 32), linspace_rvv_v_special(np.float32, 1, 32) ]"
    test_vs1_eq_vs2_without_mask:
      - "[np.linspace(-127, 0xffff, 1, dtype=np.float32)]"
      - "[np.linspace(-127, 0xffff, 4, dtype=np.float32)]"
      - "[np.linspace(-127, 0xffff, 10, dtype=np.float32)]"
      - "[np.linspace(-127, 0xffff, 32, dtype=np.float32)]"
    test_dest_eq_vs1vs2_without_mask:
      - "[np.linspace(-127, 0xffff, 1, dtype=np.float32)]"
      - "[np.linspace(-127, 0xffff, 4, dtype=np.float32)]"
      - "[np.linspace(-127, 0xffff, 10, dtype=np.float32)]"
      - "[np.linspace(-127, 0xffff, 32, dtype=np.float32)]"
    test_dest_eq_vs1_without_mask:
      - "[ np.array([-1.23], dtype=np.float32), np.array([4.56], dtype=np.float32)  ]"
      - "[ np.array([4.56], dtype=np.float32), np.array([-1.23], dtype=np.float32)  ]"
      - "[ np.array([4.56], dtype=np.float32), np.array([4.56], dtype=np.float32)  ]"
      - "[ np.linspace(-2, -1, 10, dtype=np.float32), np.linspace(3, 4, 10, dtype=np.float32) ]"
      - "[ np.linspace(1, 2, 10, dtype=np.float32), np.linspace(-4, -3, 10, dtype=np.float32) ]"
      - "[ np.linspace(-10, 10, 10, dtype=np.float32), np.linspace(-10, 10, 10, dtype=np.float32) ]"
      - "[ np.linspace(-20, -1, 32, dtype=np.float32), np.linspace(3, 40, 32, dtype=np.float32) ]"
      - "[ np.linspace(1, 20, 32, dtype=np.float32), np.linspace(-40, -3, 32, dtype=np.float32) ]"
      - "[ np.linspace(-10, 10, 32, dtype=np.float32), np.linspace(-10, 10, 32, dtype=np.float32) ]"
    test_dest_eq_vs2_without_mask:
      - "[ np.array([-1.23], dtype=np.float32), np.array([4.56], dtype=np.float32)  ]"
      - "[ np.array([4.56], dtype=np.float32), np.array([-1.23], dtype=np.float32)  ]"
      - "[ np.array([4.56], dtype=np.float32), np.array([4.56], dtype=np.float32)  ]"
      - "[ np.linspace(-2, -1, 10, dtype=np.float32), np.linspace(3, 4, 10, dtype=np.float32) ]"
      - "[ np.linspace(1, 2, 10, dtype=np.float32), np.linspace(-4, -3, 10, dtype=np.float32) ]"
      - "[ np.linspace(-10, 10, 10, dtype=np.float32), np.linspace(-10, 10, 10, dtype=np.float32) ]"
      - "[ np.linspace(-20, -1, 32, dtype=np.float32), np.linspace(3, 40, 32, dtype=np.float32) ]"
      - "[ np.linspace(1, 20, 32, dtype=np.float32), np.linspace(-40, -3, 32, dtype=np.float32) ]"
      - "[ np.linspace(-10, 10, 32, dtype=np.float32), np.linspace(-10, 10, 32, dtype=np.float32) ]"   
    test_basic_with_mask:
      - linspace_rvv_vv_with_mask(np.float32, 1)
      - linspace_rvv_vv_with_mask(np.float32, 4)
      - linspace_rvv_vv_with_mask(np.float32, 10)
      - linspace_rvv_vv_with_mask(np.float32, 32)


vfsgnjn_vv:
  <<: *default
  cases:
    <<: *cases_fsgnj

vfsgnjx_vv:
  <<: *default
  cases:
    <<: *cases_fsgnj

vmfeq_vv:
  <<: *default
  cases:
    <<: *cases_fsgnj
  check: &check_eq
    test_basic_without_mask: np.equal(result, golden).all()
    test_special_without_mask: np.equal(result, golden).all()
    test_vs1_eq_vs2_without_mask: np.equal(result, golden).all()
    test_dest_eq_vs1vs2_without_mask: np.equal(result, golden).all()
    test_dest_eq_vs1_without_mask: np.equal(result, golden).all()
    test_dest_eq_vs2_without_mask: np.equal(result, golden).all()
    test_basic_with_mask: np.equal(result, golden).all()

vmfne_vv:
  <<: *default
  cases:
    <<: *cases_fsgnj
  check:
    <<: *check_eq

vmflt_vv:
  <<: *default
  cases:
    <<: *cases_fsgnj
  check:
    <<: *check_eq

vmfle_vv:
  <<: *default
  cases:
    <<: *cases_fsgnj
  check:
    <<: *check_eq

vmfgt_vv:
  <<: *default
  cases:
    <<: *cases_fsgnj
  check:
    <<: *check_eq    

vmfge_vv:
  <<: *default
  cases:
    <<: *cases_fsgnj  
  check:
    <<: *check_eq      