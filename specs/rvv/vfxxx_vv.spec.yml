_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  templates:
    test_basic_without_mask: |
      test_{num}: 
        li TESTNUM, {num};   // {num} set automatically
        li t0, 4;
        fsrm t1, t0;         // set rounding mode as RMM
        li a0, {vlen} ; 
        vsetvli t0, a0, e{ebits},m{lmul},ta,ma;
        la a1, {vs1_data} ;  // vs1 data label
        la a2, {vs2_data} ;  // vs2 data label
        {ldins} v8, (a1) ; 
        {ldins} v16, (a2) ;
        li t0, 0;
        csrw vstart, t0;      // set vstart as 0
        {name} v24, v16, v8;  // {name} is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;          // test if vstart==0 after the instruction
        j fail;
      1:la a3, test_{num}_data; 
        {stins} v24, (a3);    // save the result data into test_{num}_data memory
        .pushsection .data, 1;
        .balign  ({ebits}/8)        
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;  // there are {vlen} sets of ({ebits}/8) bytes 0
        .popsection

    test_basic_without_mask_regression: |
      test_{num}: 
        li TESTNUM, {num};   // {num} set automatically
        li t0, 4;
        fsrm t1, t0;         // set rounding mode as RMM
        li a0, {vlen} ; 
        vsetvli t0, a0, e{ebits},m{lmul},ta,ma;
        la a1, {vs1_data} ;  // vs1 data label
        la a2, {vs2_data} ;  // vs2 data label
        {ldins} v8, (a1) ; 
        {ldins} v16, (a2) ;
        li t0, 0;
        csrw vstart, t0;      // set vstart as 0
        {name} v24, v16, v8;  // {name} is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;          // test if vstart==0 after the instruction
        j fail;
      1:la a3, test_{num}_data; 
        {stins} v24, (a3);    // save the result data into test_{num}_data memory
        .pushsection .data, 1; 
        .balign  ({ebits}/8)
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;  // there are {vlen} sets of ({ebits}/8) bytes 0
        .popsection


    test_special_without_mask: |
      test_{num}: 
        li TESTNUM, {num};   // {num} set automatically
        li t0, 4;
        fsrm t1, t0;         // set rounding mode as RMM
        li a0, {vlen} ; 
        vsetvli t0, a0, e{ebits},m{lmul},ta,ma;
        la a1, {vs1_data} ;  // vs1 data label
        la a2, {vs2_data} ;  // vs2 data label
        {ldins} v8, (a1) ; 
        {ldins} v16, (a2) ;
        li t0, 0;
        csrw vstart, t0;      // set vstart as 0
        {name} v24, v16, v8;  // {name} is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;          // test if vstart==0 after the instruction
        j fail;
      1:la a3, test_{num}_data; 
        {stins} v24, (a3);    // save the result data into test_{num}_data memory
        .pushsection .data, 1; 
        .balign  ({ebits}/8)
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;  // there are {vlen} sets of ({ebits}/8) bytes 0
        .popsection       
    test_vta_eq_tu_without_mask: |   
      test_{num}: 
        li TESTNUM, {num}; // {num} set automatically            
        li t0, 4;
        fsrm t1, t0;      //set rounding mode as RMM            
        li a0, {vs1_shape[0]} ; // vl of source data = vlmax
        vsetvli t0, a0, e{ebits},m{lmul},ta,ma;
        la a1, {vs1_data} ; // vs1 data label
        la a2, {vs2_data} ; // vs2 data label
        la a3, {orig_data}; // original data label of target register
        {ldins} v8, (a1) ; 
        {ldins} v16, (a2) ;
        {ldins} v24, (a3);
        li a0, {vlen} ;       // set vl of test instruction
        vsetvli t0, a0, e{ebits},m{lmul},tu,ma;
        li t0, 0;
        csrw vstart, t0;    // set vstart as 0
        {name} v24, v16, v8 ; // {name} is the test instruction            
      1:li a0, {vs1_shape[0]} ;
        vsetvli t0, a0, e{ebits},m{lmul},ta,ma;
        la a3, test_{num}_data; 
        {stins} v24, (a3);  // save the result data into test_{num}_data memory
        .pushsection .data, 1; 
        .balign  ({ebits}/8)
      test_{num}_data:
        .fill {vs1_shape[0]}, ({ebits}/8), 0;// there are {vs1_shape[0]} sets of ({ebits}/8) bytes 0
        .popsection   
    test_rounding_mode_without_mask: |   
      test_{num}: 
        li TESTNUM, {num};   // {num} set automatically
        li t0, {frm};
        fsrm t1, t0;         // set rounding mode 
        li a0, {vlen} ; 
        vsetvli t0, a0, e{ebits},m{lmul},ta,ma;
        la a1, {vs1_data} ;  // vs1 data label
        la a2, {vs2_data} ;  // vs2 data label
        {ldins} v8, (a1) ; 
        {ldins} v16, (a2) ;
        li t0, 0;
        csrw vstart, t0;      // set vstart as 0
        {name} v24, v16, v8;  // {name} is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;          // test if vstart==0 after the instruction
        j fail;
      1:la a3, test_{num}_data; 
        {stins} v24, (a3);    // save the result data into test_{num}_data memory
        .pushsection .data, 1; 
        .balign  ({ebits}/8)
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;  // there are {vlen} sets of ({ebits}/8) bytes 0
        .popsection

    test_vs1_eq_vs2_without_mask: |  
      test_{num}: 
        li TESTNUM, {num};   // {num} set automatically
        li t0, 4;
        fsrm t1, t0;         // set rounding mode as RMM
        li a0, {vlen} ; 
        vsetvli t0, a0, e{ebits},m{lmul},ta,ma;
        la a1, {vs1_data} ;  // vs1 data label
        {ldins} {vs1_name}, (a1) ; 
        li t0, 0;
        csrw vstart, t0;      // set vstart as 0
        {name} {vd_name}, {vs1_name}, {vs1_name};  // {name} is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;          // test if vstart==0 after the instruction
        j fail;
      1:la a3, test_{num}_data; 
        {stins} {vd_name}, (a3);    // save the result data into test_{num}_data memory
        .pushsection .data, 1; 
        .balign  ({ebits}/8)
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;  // there are {vlen} sets of ({ebits}/8) bytes 0
        .popsection    
    test_dest_eq_vs1_without_mask : | 
      test_{num}: 
        li TESTNUM, {num};   // {num} set automatically
        li t0, 4;
        fsrm t1, t0;         // set rounding mode as RMM
        li a0, {vlen} ; 
        vsetvli t0, a0, e{ebits},m{lmul},ta,ma;
        la a1, {vs1_data} ;  // vs1 data label
        la a2, {vs2_data} ;  // vs2 data label
        {ldins} {vs1_name}, (a1) ; 
        {ldins} {vs2_name}, (a2) ;
        li t0, 0;
        csrw vstart, t0;      // set vstart as 0
        {name} {vs1_name}, {vs2_name}, {vs1_name};  // {name} is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;          // test if vstart==0 after the instruction
        j fail;
      1:la a3, test_{num}_data; 
        {stins} {vs1_name}, (a3);    // save the result data into test_{num}_data memory
        .pushsection .data, 1; 
        .balign  ({ebits}/8)
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;  // there are {vlen} sets of ({ebits}/8) bytes 0
        .popsection                 
    test_dest_eq_vs2_without_mask: |  
      test_{num}: 
        li TESTNUM, {num};   // {num} set automatically
        li t0, 4;
        fsrm t1, t0;         // set rounding mode as RMM
        li a0, {vlen} ; 
        vsetvli t0, a0, e{ebits},m{lmul},ta,ma;
        la a1, {vs1_data} ;  // vs1 data label
        la a2, {vs2_data} ;  // vs2 data label
        {ldins} {vs1_name}, (a1) ; 
        {ldins} {vs2_name}, (a2) ;
        li t0, 0;
        csrw vstart, t0;      // set vstart as 0
        {name} {vs2_name}, {vs2_name}, {vs1_name};  // {name} is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;          // test if vstart==0 after the instruction
        j fail;
      1:la a3, test_{num}_data; 
        {stins} {vs2_name}, (a3);    // save the result data into test_{num}_data memory
        .pushsection .data, 1; 
        .balign  ({ebits}/8)
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;  // there are {vlen} sets of ({ebits}/8) bytes 0
        .popsection     
    test_dest_eq_vs1vs2_without_mask: |   
      test_{num}: 
        li TESTNUM, {num};   // {num} set automatically
        li t0, 4;
        fsrm t1, t0;         // set rounding mode as RMM
        li a0, {vlen} ; 
        vsetvli t0, a0, e{ebits},m{lmul},ta,ma;
        la a1, {vs1_data} ;  // vs1 data label
        {ldins} {vs1_name}, (a1) ; 
        li t0, 0;
        csrw vstart, t0;      // set vstart as 0
        {name} {vs1_name}, {vs1_name}, {vs1_name};  // {name} is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;          // test if vstart==0 after the instruction
        j fail;
      1:la a3, test_{num}_data; 
        {stins} {vs1_name}, (a3);    // save the result data into test_{num}_data memory
        .pushsection .data, 1; 
        .balign  ({ebits}/8)
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;  // there are {vlen} sets of ({ebits}/8) bytes 0
        .popsection    
    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num}; // num set automatically            
        li t0, 4;
        fsrm t1, t0;      //set rounding mode as RMM            
        li a0, {vlen} ;  // set vl of test instruction 
        vsetvli t0, a0, e{ebits},m{lmul},ta,ma;
        la a1, {vs1_data} ; // vs1 data label
        la a2, {vs2_data} ; // vs1 data label
        {ldins} v8, (a1) ; 
        {ldins} v16, (a2) ;        
        la a0, {mask_data} ;//v0 data label
        vle1.v v0, (a0);
        li t0, 0;
        csrw vstart, t0; //set vstart as 0 
        {name} v24, v16, v8, v0.t ; // name is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;    // test if vstart==0 after the instruction
        j fail;              
      1:vsetvli x0, x0, e{ebits},m{lmul},ta,mu;
        la a3, test_{num}_data; 
        {stins} v24, (a3), v0.t;# save the result data into test_{num}_data memory
        .pushsection .data, 1;
        .balign  ({ebits}/8)
      test_{num}_data:
          .fill {vlen}, ({ebits}/8), 0;# there are {vlen} sets of ({ebits}/8) bytes 0
          .popsection
    test_basic_with_mask_mu: |
      test_{num}:
        li TESTNUM, {num}; // num set automatically            
        li t0, 4;
        fsrm t1, t0;      //set rounding mode as RMM            
        li a0, {vlen} ;  // set vl of test instruction 
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        la a1, {vs1_data} ; // vs1 data label
        la a2, {vs2_data} ; // vs1 data label
        la a3, {orig_data}; // original data label of target register
        {ldins} v8, (a1) ; 
        {ldins} v16, (a2) ;
        {ldins} v24, (a3);         
        la a0, {mask_data} ;//v0 data label
        vle1.v v0, (a0);
        li t0, 0;
        csrw vstart, t0; //set vstart as 0 
        {name} v24, v16, v8, v0.t ; // name is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;    // test if vstart==0 after the instruction
        j fail;              
      1:vsetvli x0, x0, e{ebits},m{lmul},ta,ma;
        la a3, test_{num}_data; 
        {stins} v24, (a3);# save the result data into test_{num}_data memory
        .pushsection .data, 1;
        .balign  ({ebits}/8)
      test_{num}_data:
          .fill {vlen}, ({ebits}/8), 0;# there are {vlen} sets of ({ebits}/8) bytes 0
          .popsection            
    test_vstart_not_eq_zero_without_mask: |   
      test_{num}: 
        li TESTNUM, {num};   // {num} set automatically
        li t0, 4;
        fsrm t1, t0;         // set rounding mode as RMM
        li a0, {vlen} ; 
        vsetvli t0, a0, e{ebits},m{lmul},ta,ma;
        la a1, {vs1_data} ;  // vs1 data label
        la a2, {vs2_data} ;  // vs2 data label
        la a3, {orig_data}; // original data label of target register
        {ldins} v8, (a1) ; 
        {ldins} v16, (a2) ;
        {ldins} v24, (a3);
        li t0, {vstart};
        csrw vstart, t0;      // set vstart
        {name} v24, v16, v8;  // {name} is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;          // test if vstart==0 after the instruction
        j fail;
      1:la a3, test_{num}_data; 
        {stins} v24, (a3);    // save the result data into test_{num}_data memory
        .pushsection .data, 1; 
        .balign  ({ebits}/8)
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;  // there are {vlen} sets of ({ebits}/8) bytes 0
        .popsection 
    test_vstart_not_eq_zero_with_mask: | 
      test_{num}:
        li TESTNUM, {num}; // num set automatically            
        li t0, 4;
        fsrm t1, t0;      //set rounding mode as RMM            
        li a0, {vlen} ;  // set vl of test instruction 
        vsetvli t0, a0, e{ebits},m{lmul},ta,mu;
        la a1, {vs1_data} ; // vs1 data label
        la a2, {vs2_data} ; // vs1 data label
        la a3, {orig_data}; // original data label of target register
        {ldins} v8, (a1) ; 
        {ldins} v16, (a2) ;
        {ldins} v24, (a3);         
        la a0, {mask_data} ;//v0 data label
        vle1.v v0, (a0);
        li t0, {vstart};
        csrw vstart, t0; //set vstart
        {name} v24, v16, v8, v0.t ; // name is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;    // test if vstart==0 after the instruction
        j fail;              
      1:vsetvli x0, x0, e{ebits},m{lmul},ta,ma;
        la a3, test_{num}_data; 
        {stins} v24, (a3);# save the result data into test_{num}_data memory
        .pushsection .data, 1;
        .balign  ({ebits}/8)
      test_{num}_data:
          .fill {vlen}, ({ebits}/8), 0;# there are {vlen} sets of ({ebits}/8) bytes 0
          .popsection
    test_exception_wrong_sew_without_mask: |
      test_{num}: 
        li TESTNUM, {num}; // {num} set automatically            
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);          
        li a0, {vlen} ;     //vl
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, v16, v8 ; // {name} is the test instruction
        j fail;
      test_{num}_end:
    test_exception_lmul_vreg_no_without_mask: |
      test_{num}: 
        li TESTNUM, {num}; // {num} set automatically              
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);       
        li a0, {vlen} ;     // vl
        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        {name} {vd_name}, {vs2_name}, {vs1_name} ; // {name} is the test instruction
        j fail;
      test_{num}_end:
    # test_exception_vd_eq_v0_with_mask : | toolchain avoid this situation, code can't be compiled successfully.
    #   test_{num}: 
    #     li TESTNUM, {num}; // {num} set automatically              
    #     li t0, CAUSE_ILLEGAL_INSTRUCTION;
    #     la t1, _expected_cause;
    #     sw t0, 0(t1);
    #     la t0, test_{num}_end;
    #     la t1, _restore_addr;
    #     sw t0, 0(t1);             
    #     li a0, {vlen} ;     // vl
    #     vsetvli t0, a0, e{ebits},m{lmul},tu,mu; 
    #     {name} v0, v16, v8, v0.t ;
    #     j fail;
    #   test_{num}_end:

  basic_cases:
    test_basic_without_mask @ vs1,vs2,ebits,lmul,vlen,ldins,stins:
      - "[np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), 16, 1, np.random.randint(1,65), 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), 16, 2, np.random.randint(1,129), 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), 16, 4, np.random.randint(1,257), 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), 16, 8, np.random.randint(1,513), 'vle16.v', 'vse16.v' ]"      
      - "[np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), 16, 'f2', np.random.randint(1,33), 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), 16, 'f4', np.random.randint(1,17), 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), 32, 1, np.random.randint(1,33), 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), 32, 2, np.random.randint(1,65), 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), 32, 4, np.random.randint(1,129), 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), 32, 8, np.random.randint(1,257), 'vle32.v', 'vse32.v' ]" 
      - "[np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), 32, 'f2', np.random.randint(1,17), 'vle32.v', 'vse32.v' ]" 
      - "[np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), 64, 1, np.random.randint(1,17), 'vle64.v', 'vse64.v']"
      - "[np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), 64, 2, np.random.randint(1,33), 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), 64, 4, np.random.randint(1,65), 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), 64, 8, np.random.randint(1,129), 'vle64.v', 'vse64.v' ]"   

  cases:
    test_basic_without_mask  @ vs1,vs2,ebits,lmul,vlen,ldins,stins:
      - "[np.random.uniform(-40000, 40000, 1).astype(np.float16), np.random.uniform(-40000, 40000, 1).astype(np.float16), 16, 1, 1, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 10).astype(np.float16), np.random.uniform(-40000, 40000, 10).astype(np.float16), 16, 1, 10, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 63).astype(np.float16), np.random.uniform(-40000, 40000, 63).astype(np.float16), 16, 1, 63, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), 16, 1, 64, 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-40000, 40000, 1).astype(np.float16), np.random.uniform(-40000, 40000, 1).astype(np.float16), 16, 2, 1, 'vle16.v', 'vse16.v' ]"      
      - "[np.random.uniform(-40000, 40000, 25).astype(np.float16), np.random.uniform(-40000, 40000, 25).astype(np.float16), 16, 2, 25, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 127).astype(np.float16), np.random.uniform(-40000, 40000, 127).astype(np.float16), 16, 2, 127, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), 16, 2, 128, 'vle16.v', 'vse16.v' ]"                        
      - "[np.random.uniform(-40000, 40000, 1).astype(np.float16), np.random.uniform(-40000, 40000, 1).astype(np.float16), 16, 4, 1, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 45).astype(np.float16), np.random.uniform(-40000, 40000, 45).astype(np.float16), 16, 4, 45, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 255).astype(np.float16), np.random.uniform(-40000, 40000, 255).astype(np.float16), 16, 4, 255, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), 16, 4, 256, 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-40000, 40000, 1).astype(np.float16), np.random.uniform(-40000, 40000, 1).astype(np.float16), 16, 8, 1, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 83).astype(np.float16), np.random.uniform(-40000, 40000, 83).astype(np.float16), 16, 8, 83, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 511).astype(np.float16), np.random.uniform(-40000, 40000, 511).astype(np.float16), 16, 8, 511, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), 16, 8, 512, 'vle16.v', 'vse16.v' ]"       
      - "[np.random.uniform(-40000, 40000, 1).astype(np.float16), np.random.uniform(-40000, 40000, 1).astype(np.float16), 16, 'f2', 1, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 4).astype(np.float16), np.random.uniform(-40000, 40000, 4).astype(np.float16), 16, 'f2', 4, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 31).astype(np.float16), np.random.uniform(-40000, 40000, 31).astype(np.float16), 16, 'f2', 31, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), 16, 'f2', 32, 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-40000, 40000, 1).astype(np.float16), np.random.uniform(-40000, 40000, 1).astype(np.float16), 16, 'f4', 1, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 4).astype(np.float16), np.random.uniform(-40000, 40000, 4).astype(np.float16), 16, 'f4', 4, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 15).astype(np.float16), np.random.uniform(-40000, 40000, 15).astype(np.float16), 16, 'f4', 15, 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), 16, 'f4', 16, 'vle16.v', 'vse16.v' ]"        
      - "[np.random.uniform(-50000, 50000, 1).astype(np.float32), np.random.uniform(-50000, 50000, 1).astype(np.float32), 32, 1, 1, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 10).astype(np.float32), np.random.uniform(-50000, 50000, 10).astype(np.float32), 32, 1, 10, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 31).astype(np.float32), np.random.uniform(-50000, 50000, 31).astype(np.float32), 32, 1, 31, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), 32, 1, 32, 'vle32.v', 'vse32.v' ]"  
      - "[np.random.uniform(-50000, 50000, 1).astype(np.float32), np.random.uniform(-50000, 50000, 1).astype(np.float32), 32, 2, 1, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 13).astype(np.float32), np.random.uniform(-50000, 50000, 13).astype(np.float32), 32, 2, 13, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 63).astype(np.float32), np.random.uniform(-50000, 50000, 63).astype(np.float32), 32, 2, 63, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), 32, 2, 64, 'vle32.v', 'vse32.v' ]" 
      - "[np.random.uniform(-50000, 50000, 1).astype(np.float32), np.random.uniform(-50000, 50000, 1).astype(np.float32), 32, 4, 1, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 25).astype(np.float32), np.random.uniform(-50000, 50000, 25).astype(np.float32), 32, 4, 25, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 127).astype(np.float32), np.random.uniform(-50000, 50000, 127).astype(np.float32), 32, 4, 127, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), 32, 4, 128, 'vle32.v', 'vse32.v' ]" 
      - "[np.random.uniform(-50000, 50000, 1).astype(np.float32), np.random.uniform(-50000, 50000, 1).astype(np.float32), 32, 8, 1, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 53).astype(np.float32), np.random.uniform(-50000, 50000, 53).astype(np.float32), 32, 8, 53, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 255).astype(np.float32), np.random.uniform(-50000, 50000, 255).astype(np.float32), 32, 8, 255, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), 32, 8, 256, 'vle32.v', 'vse32.v' ]" 
      - "[np.random.uniform(-50000, 50000, 1).astype(np.float32), np.random.uniform(-50000, 50000, 1).astype(np.float32), 32, 'f2', 1, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 7).astype(np.float32), np.random.uniform(-50000, 50000, 7).astype(np.float32), 32, 'f2', 7, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 15).astype(np.float32), np.random.uniform(-50000, 50000, 15).astype(np.float32), 32, 'f2', 15, 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), 32, 'f2', 16, 'vle32.v', 'vse32.v' ]" 
      - "[np.random.uniform(-500000, 500000, 1).astype(np.float64), np.random.uniform(-500000, 500000, 1).astype(np.float64), 64, 1, 1, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 5).astype(np.float64), np.random.uniform(-500000, 500000, 5).astype(np.float64), 64, 1, 5, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 15).astype(np.float64), np.random.uniform(-500000, 500000, 15).astype(np.float64), 64, 1, 15, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), 64, 1, 16, 'vle64.v', 'vse64.v' ]"                                            
      - "[np.random.uniform(-500000, 500000, 1).astype(np.float64), np.random.uniform(-500000, 500000, 1).astype(np.float64), 64, 2, 1, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 10).astype(np.float64), np.random.uniform(-500000, 500000, 10).astype(np.float64), 64, 2, 10, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 31).astype(np.float64), np.random.uniform(-500000, 500000, 31).astype(np.float64), 64, 2, 31, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), 64, 2, 32, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 1).astype(np.float64), np.random.uniform(-500000, 500000, 1).astype(np.float64), 64, 4, 1, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 21).astype(np.float64), np.random.uniform(-500000, 500000, 21).astype(np.float64), 64, 4, 21, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 63).astype(np.float64), np.random.uniform(-500000, 500000, 63).astype(np.float64), 64, 4, 63, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), 64, 4, 64, 'vle64.v', 'vse64.v' ]"                                            
      - "[np.random.uniform(-500000, 500000, 1).astype(np.float64), np.random.uniform(-500000, 500000, 1).astype(np.float64), 64, 8, 1, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 45).astype(np.float64), np.random.uniform(-500000, 500000, 45).astype(np.float64), 64, 8, 45, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 127).astype(np.float64), np.random.uniform(-500000, 500000, 127).astype(np.float64), 64, 8, 127, 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), 64, 8, 128, 'vle64.v', 'vse64.v' ]" 
    test_special_without_mask @ vs1,vs2,ebits,lmul,vlen,ldins,stins:
      - "special_vv_fp16() + [ 16, 1, 32, 'vle16.v', 'vse16.v']"
      - "special_vv_fp32() + [ 32, 1, 32, 'vle32.v', 'vse32.v']"
      - "special_vv_fp64() + [ 64, 2, 32, 'vle64.v', 'vse64.v']"
    test_vta_eq_tu_without_mask @vs1,vs2,orig,ebits,lmul,vlen,ldins,stins:
      - "[np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), 16, 1, np.random.randint(1,65), 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), 16, 2, np.random.randint(1,129), 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), 16, 4, np.random.randint(1,257), 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), 16, 8, np.random.randint(1,513), 'vle16.v', 'vse16.v' ]"      
      - "[np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), 16, 'f2', np.random.randint(1,33), 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), 16, 'f4', np.random.randint(1,17), 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), 32, 1, np.random.randint(1,33), 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), 32, 2, np.random.randint(1,65), 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), 32, 4, np.random.randint(1,129), 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), 32, 8, np.random.randint(1,257), 'vle32.v', 'vse32.v' ]" 
      - "[np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), 32, 'f2', np.random.randint(1,17), 'vle32.v', 'vse32.v' ]" 
      - "[np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), 64, 1, np.random.randint(1,17), 'vle64.v', 'vse64.v']"
      - "[np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), 64, 2, np.random.randint(1,33), 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), 64, 4, np.random.randint(1,65), 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), 64, 8, np.random.randint(1,129), 'vle64.v', 'vse64.v' ]"
    # test_rounding_mode_without_mask @vs1,vs2,ebits,lmul,vlen,ldins,stins,frm:
    #   - "[np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), 16, 1, np.random.randint(1,65), 'vle16.v', 'vse16.v', 0 ]" 
    #   - "[np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), 16, 2, np.random.randint(1,129), 'vle16.v', 'vse16.v', 1 ]"
    #   - "[np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), 16, 4, np.random.randint(1,257), 'vle16.v', 'vse16.v',2 ]" 
    #   - "[np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), 16, 8, np.random.randint(1,513), 'vle16.v', 'vse16.v', 3 ]"      
    #   - "[np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), 16, 'f2', np.random.randint(1,33), 'vle16.v', 'vse16.v', 0 ]"
    #   - "[np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), 16, 'f4', np.random.randint(1,17), 'vle16.v', 'vse16.v', 1 ]" 
    #   - "[np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), 32, 1, np.random.randint(1,33), 'vle32.v', 'vse32.v', 2 ]"
    #   - "[np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), 32, 2, np.random.randint(1,65), 'vle32.v', 'vse32.v', 3 ]"
    #   - "[np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), 32, 4, np.random.randint(1,129), 'vle32.v', 'vse32.v', 0 ]"
    #   - "[np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), 32, 8, np.random.randint(1,257), 'vle32.v', 'vse32.v', 1 ]" 
    #   - "[np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), 32, 'f2', np.random.randint(1,17), 'vle32.v', 'vse32.v', 2 ]" 
    #   - "[np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), 64, 1, np.random.randint(1,17), 'vle64.v', 'vse64.v', 3 ]"
    #   - "[np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), 64, 2, np.random.randint(1,33), 'vle64.v', 'vse64.v', 0 ]"
    #   - "[np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), 64, 4, np.random.randint(1,65), 'vle64.v', 'vse64.v', 1 ]"
    #   - "[np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), 64, 8, np.random.randint(1,129), 'vle64.v', 'vse64.v', 2 ]"
    test_vs1_eq_vs2_without_mask @vs1,ebits,lmul,vlen,ldins,stins,vs1_name,vd_name @vs2=vs1:
      - "[np.random.uniform(-40000, 40000, 64).astype(np.float16), 16, 1, np.random.randint(1,65), 'vle16.v', 'vse16.v', 'v1', 'v2' ]" 
      - "[np.random.uniform(-40000, 40000, 128).astype(np.float16), 16, 2, np.random.randint(1,129), 'vle16.v', 'vse16.v', 'v2', 'v4' ]"
      - "[np.random.uniform(-40000, 40000, 256).astype(np.float16), 16, 4, np.random.randint(1,257), 'vle16.v', 'vse16.v', 'v4', 'v8' ]" 
      - "[np.random.uniform(-40000, 40000, 512).astype(np.float16), 16, 8, np.random.randint(1,513), 'vle16.v', 'vse16.v', 'v8', 'v16' ]"      
      - "[np.random.uniform(-40000, 40000, 32).astype(np.float16), 16, 'f2', np.random.randint(1,33), 'vle16.v', 'vse16.v', 'v2', 'v3' ]"
      - "[np.random.uniform(-40000, 40000, 16).astype(np.float16), 16, 'f4', np.random.randint(1,17), 'vle16.v', 'vse16.v', 'v3', 'v4' ]" 
      - "[np.random.uniform(-50000, 50000, 32).astype(np.float32), 32, 1, np.random.randint(1,33), 'vle32.v', 'vse32.v', 'v9', 'v10' ]"
      - "[np.random.uniform(-50000, 50000, 64).astype(np.float32), 32, 2, np.random.randint(1,65), 'vle32.v', 'vse32.v', 'v10', 'v12' ]"
      - "[np.random.uniform(-50000, 50000, 128).astype(np.float32), 32, 4, np.random.randint(1,129), 'vle32.v', 'vse32.v', 'v12', 'v16' ]"
      - "[np.random.uniform(-50000, 50000, 256).astype(np.float32), 32, 8, np.random.randint(1,257), 'vle32.v', 'vse32.v', 'v16', 'v24' ]" 
      - "[np.random.uniform(-50000, 50000, 16).astype(np.float32), 32, 'f2', np.random.randint(1,17), 'vle32.v', 'vse32.v', 'v11', 'v12' ]" 
      - "[np.random.uniform(-500000, 500000, 16).astype(np.float64), 64, 1, np.random.randint(1,17), 'vle64.v', 'vse64.v', 'v25', 'v26' ]"
      - "[np.random.uniform(-500000, 500000, 32).astype(np.float64), 64, 2, np.random.randint(1,33), 'vle64.v', 'vse64.v', 'v26', 'v28' ]"
      - "[np.random.uniform(-500000, 500000, 64).astype(np.float64), 64, 4, np.random.randint(1,65), 'vle64.v', 'vse64.v', 'v28', 'v0' ]"
      - "[np.random.uniform(-500000, 500000, 128).astype(np.float64), 64, 8, np.random.randint(1,129), 'vle64.v', 'vse64.v', 'v24', 'v0' ]"
    test_dest_eq_vs1_without_mask @vs1,vs2,ebits,lmul,vlen,ldins,stins,vs1_name,vs2_name:
      - "[np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), 16, 1, np.random.randint(1,65), 'vle16.v', 'vse16.v', 'v1', 'v2' ]" 
      - "[np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), 16, 2, np.random.randint(1,129), 'vle16.v', 'vse16.v', 'v2', 'v4' ]"
      - "[np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), 16, 4, np.random.randint(1,257), 'vle16.v', 'vse16.v', 'v4', 'v8' ]" 
      - "[np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), 16, 8, np.random.randint(1,513), 'vle16.v', 'vse16.v', 'v8', 'v16' ]"      
      - "[np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), 16, 'f2', np.random.randint(1,33), 'vle16.v', 'vse16.v', 'v2', 'v3' ]"
      - "[np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), 16, 'f4', np.random.randint(1,17), 'vle16.v', 'vse16.v', 'v3', 'v4' ]" 
      - "[np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), 32, 1, np.random.randint(1,33), 'vle32.v', 'vse32.v', 'v9', 'v10' ]"
      - "[np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), 32, 2, np.random.randint(1,65), 'vle32.v', 'vse32.v', 'v10', 'v12' ]"
      - "[np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), 32, 4, np.random.randint(1,129), 'vle32.v', 'vse32.v', 'v12', 'v16' ]"
      - "[np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), 32, 8, np.random.randint(1,257), 'vle32.v', 'vse32.v', 'v16', 'v24' ]" 
      - "[np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), 32, 'f2', np.random.randint(1,17), 'vle32.v', 'vse32.v', 'v11', 'v12' ]" 
      - "[np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), 64, 1, np.random.randint(1,17), 'vle64.v', 'vse64.v', 'v25', 'v26' ]"
      - "[np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), 64, 2, np.random.randint(1,33), 'vle64.v', 'vse64.v', 'v26', 'v28' ]"
      - "[np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), 64, 4, np.random.randint(1,65), 'vle64.v', 'vse64.v', 'v28', 'v0' ]"
      - "[np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), 64, 8, np.random.randint(1,129), 'vle64.v', 'vse64.v', 'v24', 'v0' ]"
    test_dest_eq_vs2_without_mask @vs1,vs2,ebits,lmul,vlen,ldins,stins,vs1_name,vs2_name:
      - "[np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), 16, 1, np.random.randint(1,65), 'vle16.v', 'vse16.v', 'v1', 'v2' ]" 
      - "[np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), 16, 2, np.random.randint(1,129), 'vle16.v', 'vse16.v', 'v2', 'v4' ]"
      - "[np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), 16, 4, np.random.randint(1,257), 'vle16.v', 'vse16.v', 'v4', 'v8' ]" 
      - "[np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), 16, 8, np.random.randint(1,513), 'vle16.v', 'vse16.v', 'v8', 'v16' ]"      
      - "[np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), 16, 'f2', np.random.randint(1,33), 'vle16.v', 'vse16.v', 'v2', 'v3' ]"
      - "[np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), 16, 'f4', np.random.randint(1,17), 'vle16.v', 'vse16.v', 'v3', 'v4' ]" 
      - "[np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), 32, 1, np.random.randint(1,33), 'vle32.v', 'vse32.v', 'v9', 'v10' ]"
      - "[np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), 32, 2, np.random.randint(1,65), 'vle32.v', 'vse32.v', 'v10', 'v12' ]"
      - "[np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), 32, 4, np.random.randint(1,129), 'vle32.v', 'vse32.v', 'v12', 'v16' ]"
      - "[np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), 32, 8, np.random.randint(1,257), 'vle32.v', 'vse32.v', 'v16', 'v24' ]" 
      - "[np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), 32, 'f2', np.random.randint(1,17), 'vle32.v', 'vse32.v', 'v11', 'v12' ]" 
      - "[np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), 64, 1, np.random.randint(1,17), 'vle64.v', 'vse64.v', 'v25', 'v26' ]"
      - "[np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), 64, 2, np.random.randint(1,33), 'vle64.v', 'vse64.v', 'v26', 'v28' ]"
      - "[np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), 64, 4, np.random.randint(1,65), 'vle64.v', 'vse64.v', 'v28', 'v0' ]"
      - "[np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), 64, 8, np.random.randint(1,129), 'vle64.v', 'vse64.v', 'v24', 'v0' ]"
    test_dest_eq_vs1vs2_without_mask @vs1,ebits,lmul,vlen,ldins,stins,vs1_name @ vs2=vs1:
      - "[np.random.uniform(-40000, 40000, 64).astype(np.float16), 16, 1, np.random.randint(1,65), 'vle16.v', 'vse16.v', 'v1' ]" 
      - "[np.random.uniform(-40000, 40000, 128).astype(np.float16), 16, 2, np.random.randint(1,129), 'vle16.v', 'vse16.v', 'v2' ]"
      - "[np.random.uniform(-40000, 40000, 256).astype(np.float16), 16, 4, np.random.randint(1,257), 'vle16.v', 'vse16.v', 'v4' ]" 
      - "[np.random.uniform(-40000, 40000, 512).astype(np.float16), 16, 8, np.random.randint(1,513), 'vle16.v', 'vse16.v', 'v8' ]"      
      - "[np.random.uniform(-40000, 40000, 32).astype(np.float16), 16, 'f2', np.random.randint(1,33), 'vle16.v', 'vse16.v', 'v5' ]"
      - "[np.random.uniform(-40000, 40000, 16).astype(np.float16), 16, 'f4', np.random.randint(1,17), 'vle16.v', 'vse16.v', 'v6' ]" 
      - "[np.random.uniform(-50000, 50000, 32).astype(np.float32), 32, 1, np.random.randint(1,33), 'vle32.v', 'vse32.v', 'v9' ]"
      - "[np.random.uniform(-50000, 50000, 64).astype(np.float32), 32, 2, np.random.randint(1,65), 'vle32.v', 'vse32.v', 'v10' ]"
      - "[np.random.uniform(-50000, 50000, 128).astype(np.float32), 32, 4, np.random.randint(1,129), 'vle32.v', 'vse32.v', 'v12' ]"
      - "[np.random.uniform(-50000, 50000, 256).astype(np.float32), 32, 8, np.random.randint(1,257), 'vle32.v', 'vse32.v', 'v16' ]" 
      - "[np.random.uniform(-50000, 50000, 16).astype(np.float32), 32, 'f2', np.random.randint(1,17), 'vle32.v', 'vse32.v', 'v11' ]" 
      - "[np.random.uniform(-500000, 500000, 16).astype(np.float64), 64, 1, np.random.randint(1,17), 'vle64.v', 'vse64.v', 'v25' ]"
      - "[np.random.uniform(-500000, 500000, 32).astype(np.float64), 64, 2, np.random.randint(1,33), 'vle64.v', 'vse64.v', 'v26' ]"
      - "[np.random.uniform(-500000, 500000, 64).astype(np.float64), 64, 4, np.random.randint(1,65), 'vle64.v', 'vse64.v', 'v28' ]"
      - "[np.random.uniform(-500000, 500000, 128).astype(np.float64), 64, 8, np.random.randint(1,129), 'vle64.v', 'vse64.v', 'v24' ]"
    test_basic_with_mask @vs1, vs2, mask, ebits, lmul, vlen, ldins, stins:
      - "[np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), random_mask(64), 16, 1, np.random.randint(1,65), 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), random_mask(128), 16, 2, np.random.randint(1,129), 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), random_mask(256), 16, 4, np.random.randint(1,257), 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), random_mask(512), 16, 8, np.random.randint(1,513), 'vle16.v', 'vse16.v' ]"      
      - "[np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), random_mask(32), 16, 'f2', np.random.randint(1,33), 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), random_mask(16), 16, 'f4', np.random.randint(1,17), 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), random_mask(32), 32, 1, np.random.randint(1,33), 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), random_mask(64), 32, 2, np.random.randint(1,65), 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), random_mask(128), 32, 4, np.random.randint(1,129), 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), random_mask(256), 32, 8, np.random.randint(1,257), 'vle32.v', 'vse32.v' ]" 
      - "[np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), random_mask(16), 32, 'f2', np.random.randint(1,17), 'vle32.v', 'vse32.v' ]" 
      - "[np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), random_mask(16), 64, 1, np.random.randint(1,17), 'vle64.v', 'vse64.v']"
      - "[np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), random_mask(32), 64, 2, np.random.randint(1,33), 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), random_mask(64), 64, 4, np.random.randint(1,65), 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), random_mask(128), 64, 8, np.random.randint(1,129), 'vle64.v', 'vse64.v' ]"
    test_basic_with_mask_mu @vs1, vs2, orig, mask, ebits, lmul, vlen, ldins, stins:
      - "[np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), random_mask(64), 16, 1, np.random.randint(1,65), 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), random_mask(128), 16, 2, np.random.randint(1,129), 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), random_mask(256), 16, 4, np.random.randint(1,257), 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), random_mask(512), 16, 8, np.random.randint(1,513), 'vle16.v', 'vse16.v' ]"      
      - "[np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), random_mask(32), 16, 'f2', np.random.randint(1,33), 'vle16.v', 'vse16.v' ]"
      - "[np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), random_mask(16), 16, 'f4', np.random.randint(1,17), 'vle16.v', 'vse16.v' ]" 
      - "[np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), random_mask(32), 32, 1, np.random.randint(1,33), 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), random_mask(64), 32, 2, np.random.randint(1,65), 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), random_mask(128), 32, 4, np.random.randint(1,129), 'vle32.v', 'vse32.v' ]"
      - "[np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), random_mask(256), 32, 8, np.random.randint(1,257), 'vle32.v', 'vse32.v' ]" 
      - "[np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), random_mask(16), 32, 'f2', np.random.randint(1,17), 'vle32.v', 'vse32.v' ]" 
      - "[np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), random_mask(16), 64, 1, np.random.randint(1,17), 'vle64.v', 'vse64.v']"
      - "[np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), random_mask(32), 64, 2, np.random.randint(1,33), 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), random_mask(64), 64, 4, np.random.randint(1,65), 'vle64.v', 'vse64.v' ]"
      - "[np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), random_mask(128), 64, 8, np.random.randint(1,129), 'vle64.v', 'vse64.v' ]"
    test_vstart_not_eq_zero_without_mask @vs1,vs2,orig,ebits,lmul,vlen,ldins,stins,vstart:
      - "[np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), 16, 1, np.random.randint(6,65), 'vle16.v', 'vse16.v', np.random.randint(1,6) ]" 
      - "[np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), 16, 2, np.random.randint(50,129), 'vle16.v', 'vse16.v',np.random.randint(1,50) ]"
      - "[np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), 16, 4, np.random.randint(150,257), 'vle16.v', 'vse16.v', np.random.randint(1,150) ]" 
      - "[np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), 16, 8, np.random.randint(370,513), 'vle16.v', 'vse16.v', np.random.randint(1,370) ]"      
      - "[np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), 16, 'f2', np.random.randint(15,33), 'vle16.v', 'vse16.v', np.random.randint(1,15) ]"
      - "[np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), 16, 'f4', np.random.randint(8,17), 'vle16.v', 'vse16.v', np.random.randint(1,8) ]" 
      - "[np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), 32, 1, np.random.randint(20,33), 'vle32.v', 'vse32.v', np.random.randint(1,20) ]"
      - "[np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), 32, 2, np.random.randint(35,65), 'vle32.v', 'vse32.v', np.random.randint(1,35) ]"
      - "[np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), 32, 4, np.random.randint(60,129), 'vle32.v', 'vse32.v', np.random.randint(1,60) ]"
      - "[np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), 32, 8, np.random.randint(100,257), 'vle32.v', 'vse32.v', np.random.randint(1,100) ]" 
      - "[np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), 32, 'f2', np.random.randint(6,17), 'vle32.v', 'vse32.v', np.random.randint(1,6) ]" 
      - "[np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), 64, 1, 5, 'vle64.v', 'vse64.v', 10]"
      - "[np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), 64, 2, 15, 'vle64.v', 'vse64.v', 20]"
      - "[np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), 64, 4, 25, 'vle64.v', 'vse64.v', 45 ]"
      - "[np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), 64, 8, 63, 'vle64.v', 'vse64.v', 73 ]"
    test_vstart_not_eq_zero_with_mask @vs1, vs2, orig, mask, ebits, lmul, vlen, ldins, stins, vstart:
      - "[np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), np.random.uniform(-40000, 40000, 64).astype(np.float16), random_mask(64), 16, 1, np.random.randint(6,65), 'vle16.v', 'vse16.v', np.random.randint(1,6) ]" 
      - "[np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), np.random.uniform(-40000, 40000, 128).astype(np.float16), random_mask(128), 16, 2, np.random.randint(50,129), 'vle16.v', 'vse16.v',np.random.randint(1,50) ]"
      - "[np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), np.random.uniform(-40000, 40000, 256).astype(np.float16), random_mask(256), 16, 4, np.random.randint(150,257), 'vle16.v', 'vse16.v', np.random.randint(1,150) ]" 
      - "[np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), np.random.uniform(-40000, 40000, 512).astype(np.float16), random_mask(512), 16, 8, np.random.randint(370,513), 'vle16.v', 'vse16.v', np.random.randint(1,370) ]"      
      - "[np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), np.random.uniform(-40000, 40000, 32).astype(np.float16), random_mask(32), 16, 'f2', np.random.randint(15,33), 'vle16.v', 'vse16.v', np.random.randint(1,15) ]"
      - "[np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), np.random.uniform(-40000, 40000, 16).astype(np.float16), random_mask(16), 16, 'f4', np.random.randint(8,17), 'vle16.v', 'vse16.v', np.random.randint(1,8) ]" 
      - "[np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), np.random.uniform(-50000, 50000, 32).astype(np.float32), random_mask(32), 32, 1, np.random.randint(20,33), 'vle32.v', 'vse32.v', np.random.randint(1,20) ]"
      - "[np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), np.random.uniform(-50000, 50000, 64).astype(np.float32), random_mask(64), 32, 2, np.random.randint(35,65), 'vle32.v', 'vse32.v', np.random.randint(1,35) ]"
      - "[np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), np.random.uniform(-50000, 50000, 128).astype(np.float32), random_mask(128), 32, 4, np.random.randint(60,129), 'vle32.v', 'vse32.v', np.random.randint(1,60) ]"
      - "[np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), np.random.uniform(-50000, 50000, 256).astype(np.float32), random_mask(256), 32, 8, np.random.randint(100,257), 'vle32.v', 'vse32.v', np.random.randint(1,100) ]" 
      - "[np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), np.random.uniform(-50000, 50000, 16).astype(np.float32), random_mask(16), 32, 'f2', np.random.randint(6,17), 'vle32.v', 'vse32.v', np.random.randint(1,6) ]" 
      - "[np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), np.random.uniform(-500000, 500000, 16).astype(np.float64), random_mask(16), 64, 1, 5, 'vle64.v', 'vse64.v', 10]"
      - "[np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), np.random.uniform(-500000, 500000, 32).astype(np.float64), random_mask(32), 64, 2, 15, 'vle64.v', 'vse64.v', 20]"
      - "[np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), np.random.uniform(-500000, 500000, 64).astype(np.float64), random_mask(64), 64, 4, 25, 'vle64.v', 'vse64.v', 45 ]"
      - "[np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), np.random.uniform(-500000, 500000, 128).astype(np.float64), random_mask(128), 64, 8, 63, 'vle64.v', 'vse64.v', 73 ]"
    test_exception_wrong_sew_without_mask  @ sew, lmul, vlen:
      - [ 8, 1, 50 ]
      - [ 8, 4, 200 ] 
      - [ 8, "f2", 15 ]
      - [ 128, 1, 3 ]
      - [ 128, 2, 10 ]
      - [ 128, 4, 20 ]
      - [ 256, 1, 2 ]
      - [ 256, 4, 10 ]
      - [ 256, 8, 25 ]
      - [ 512, 2, 2 ]
      - [ 512, 4, 5 ]
      - [ 512, 8, 11 ]
      - [ 1024, 1, 1 ]
      - [ 1024, 4, 3 ]
      - [ 1024, 8, 5 ]
    test_exception_lmul_vreg_no_without_mask  @ ebits, lmul, vlen, vs1_name, vs2_name, vd_name:
      - [ 16, 2, 50, "v1", "v2", "v4" ]
      - [ 32, 2, 35, "v6", "v3", "v8" ]
      - [ 64, 2, 15, "v10", "v18", "v11" ]
      - [ 64, 4, 30, "v3", "v4", "v8" ]
      - [ 16, 4, 77, "v12", "v15", "v20" ]
      - [ 32, 4, 37, "v24", "v28", "v27" ]
      - [ 32, 8, 111, "v7", "v8", "v16" ]
      - [ 16, 8, 201, "v16", "v25", "v24" ]
      - [ 64, 8, 33, "v0", "v8", "v27" ]
    # test_exception_vd_eq_v0_with_mask:
    #   - [ 16, 1, 33 ]
    #   - [ 16, 4, 111 ]
    #   - [ 32, 2, 25 ]
    #   - [ 32, 8, 176 ]
    #   - [ 64, "f2", 3 ]
    #   - [ 64, 1, 11 ]

  random_cases:
    test_basic_without_mask:
      matrix:
        ebits: [16, 32, 64]
        lmul: get_lmul(ebits)
        vlen: np.random.randint(1, get_vlmax(lmul, ebits, args.vlen) + 1)
        ldins: f'vle{ebits}.v'
        stins: f'vse{ebits}.v'
        vs1: random_float(ebits, vlen)
        vs2: random_float(ebits, vlen)
   

  basic_check:
    test_basic_without_mask: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True)

  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True)     
    test_special_without_mask: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True) 
    test_vta_eq_tu_without_mask: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True) 
    test_rounding_mode_without_mask: np.allclose( result, golden, rtol=1e-2, atol=0, equal_nan=True)
    test_vs1_eq_vs2_without_mask: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True)
    test_dest_eq_vs1_without_mask: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True)    
    test_dest_eq_vs2_without_mask: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True)
    test_dest_eq_vs1vs2_without_mask: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True)
    test_basic_with_mask: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True)
    test_basic_with_mask_mu: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True)
    test_vstart_not_eq_zero_without_mask: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True)
    test_vstart_not_eq_zero_with_mask: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True)
  
  random_check:
    test_basic_without_mask: np.allclose( result, golden, rtol=1e-3, atol=0, equal_nan=True)


vfadd_vv:
  <<: *default

vfsub_vv:
  <<: *default

vfmul_vv:
  <<: *default

vfdiv_vv:
  <<: *default
