_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_vmxxx_vi @ vs2, imm, vlen @ ebits=32, ldins='vle32.v': |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen};
        la a2, {vs2_data};
        la a3, test_{num}_data;

        vsetvli t0, a0, e{ebits},m1,tu,mu;
        {ldins} v2, (a2);
        {name} v3, v2, {imm};

        li t1, 8;
        remu t2, a0, t1;
        bnez t2, 1f;
        li t3,  {vlen} / 8;
        j 2f;
      1:
        li t3,  {vlen} / 8 + 1;
      2:
        vsetvli t0, t3, e8,m1,tu,mu;
        vse8.v v3, (a3);
        .pushsection .data, 1;
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;
        .popsection

    test_vmxxx_vi_with_mask @ vs2, imm, mask, vlen @ ebits=32, ldins='vle32.v': |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen};
        la a2, {vs2_data};
        la a3, test_{num}_data;
        la a4, {mask_data};

        li t1, 8;
        remu t2, a0, t1;
        bnez t2, 1f;
        li t3,  {vlen} / 8;
        j 2f;
      1:
        li t3,  {vlen} / 8 + 1;
      2:
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{ebits},m1,tu,mu;
        {ldins} v2, (a2);
        {name} v3, v2, {imm}, v0.t;

        vsetvli t0, t3, e8,m1,tu,mu;
        vse8.v v3, (a3);
        .pushsection .data, 1;
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;
        .popsection

  cases:
    test_vmxxx_vi:
      - '[np.array([1], dtype=np.int32), 1, 1]'
      - '[np.array([-4], dtype=np.int32), -4, 1]'
      - '[np.array([0x100, -3], dtype=np.int32), -3, 2]'
      - '[np.linspace(-5, 0xf, 8, dtype=np.int32), 13, 8]'
      - '[np.linspace(-14, 0x1f, 31, dtype=np.int32), -14, 31]'
      - '[np.linspace(-15, 0x20, 32, dtype=np.int32), -15, 32]'
    
    test_vmxxx_vi_with_mask:
      - '[np.array([1], dtype=np.int32), 1, np.array([0xa], dtype=np.uint8), 1]'
      - '[np.array([-4], dtype=np.int32), -4, np.array([0x5], dtype=np.uint8), 1]'
      - '[np.array([0x100, -3], dtype=np.int32), -3, np.array([0x3], dtype=np.uint8), 2]'
      - '[np.linspace(-5, 0xf, 8, dtype=np.int32), 13, np.array([0x5a], dtype=np.uint8), 8]'
      - '[np.linspace(-14, 0x1f, 31, dtype=np.int32), -14, np.linspace(0x0, 0xf, 4, dtype=np.uint8), 31]'
      - '[np.linspace(-15, 0x20, 32, dtype=np.int32), -15, np.linspace(0x0, 0xf, 4, dtype=np.uint8), 32]'

  check:
    test_vmxxx_vi: np.array_equal(result, golden)
    test_vmxxx_vi_with_mask: np.array_equal(result, golden)

vmadc_vi:
  <<: *default

  cases:
    test_vmxxx_vi:
      - '[np.array([4], dtype=np.uint32), 1, 1]'
      - '[np.array([1], dtype=np.uint32), 4, 1]'
      - '[np.array([0x100, 3], dtype=np.uint32), 8, 2]'
      - '[np.linspace(0, 0xffffff, 8, dtype=np.uint32), 13, 8]'
      - '[np.linspace(0xfffffff0, 0xffffffff, 31, dtype=np.uint32), 14, 31]'
      - '[np.linspace(0xfffffff0, 0xffffffff, 32, dtype=np.uint32), 15, 32]'

  check:
    test_vmxxx_vi: np.array_equal(result, golden)

vmseq_vi:
  <<: *default

vmsne_vi:
  <<: *default

vmsleu_vi: &unsigned
  <<: *default

  cases:
    test_vmxxx_vi:
      - '[np.array([1], dtype=np.uint32), 1, 1]'
      - '[np.array([4], dtype=np.uint32), 4, 1]'
      - '[np.array([0x100, 3], dtype=np.uint32), 3, 2]'
      - '[np.linspace(0, 0xf, 8, dtype=np.uint32), 13, 8]'
      - '[np.linspace(0x0, 0x1f, 31, dtype=np.uint32), 14, 31]'
      - '[np.linspace(0x0, 0x20, 32, dtype=np.uint32), 15, 32]'
    
    test_vmxxx_vi_with_mask:
      - '[np.array([1], dtype=np.uint32), 1, np.array([0xa], dtype=np.uint8), 1]'
      - '[np.array([4], dtype=np.uint32), 4, np.array([0x5], dtype=np.uint8), 1]'
      - '[np.array([0x100, 3], dtype=np.uint32), 3, np.array([0x3], dtype=np.uint8), 2]'
      - '[np.linspace(0, 0xf, 8, dtype=np.uint32), 13, np.array([0x5a], dtype=np.uint8), 8]'
      - '[np.linspace(0x0, 0x1f, 31, dtype=np.uint32), 14, np.linspace(0x0, 0xf, 4, dtype=np.uint8), 31]'
      - '[np.linspace(0x0, 0x20, 32, dtype=np.uint32), 15, np.linspace(0x0, 0xf, 4, dtype=np.uint8), 32]'

vmsle_vi:
  <<: *default

vmsgtu_vi:
  <<: *unsigned

vmsgt_vi:
  <<: *default
