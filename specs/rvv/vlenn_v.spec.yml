_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  _templates: &_templates
    test_vlx_v_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen}; 
        la a1, {rs1_data}; 
        la a3, test_{num}_data; 
        vsetvli t0, a0, e{ebits},m1,tu,mu;
        {name} v1, (a1); 
        {stins} v1, (a3);
        .pushsection .data, 1;
      test_{num}_data:
        .fill {vlen}, ({ebits} / 8), 0;
        .popsection

    test_vlx_v_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        vsetvli t1, a0, e{ebits},m1,tu,mu;
        vle1.v v0, (a4);
        {name} v1, (a1), v0.t;

        {stins} v1, (a3);
        .pushsection .data, 1;
      test_{num}_data:
        .fill {vlen}, ({ebits}  /8), 0;
        .popsection
  check:
    test_vlx_v_without_mask: np.array_equal(result, golden)
    test_vlx_v_with_mask: np.array_equal(result, golden)

vle1_v:
  <<: *default
  templates:
    <<: *_templates
    test_vlx_v_without_mask @ rs1, vlen, res_len : |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen}; 
        la a1, {rs1_data}; 
        la a3, test_{num}_data; 
        vsetvli t0, a0, e8,m8,tu,mu;
        {name} v1, (a1); 
        vse1.v v1, (a3);
        .pushsection .data, 1;
      test_{num}_data:
        .fill {res_len}, 1, 0;
        .popsection
  cases:
    test_vlx_v_without_mask:
      - '[ random_e1(1), 1, res_len_e1(1) ]'
      - '[ random_e1(63), 63, res_len_e1(63) ]'      
      - '[ random_e1(64), 64, res_len_e1(64) ]'
      - '[ random_e1(127), 127, res_len_e1(127) ]'      
      - '[ random_e1(128), 128, res_len_e1(128) ]'
      - '[ random_e1(255), 255, res_len_e1(255) ]'      
      - '[ random_e1(256), 256, res_len_e1(256) ]' 
      - '[ random_e1(510), 510, res_len_e1(510) ]'      
      - '[ random_e1(512), 512, res_len_e1(512) ]'       
      - '[ random_e1(1023), 1023, res_len_e1(1023) ]'            
      - '[ random_e1(1024), 1024, res_len_e1(1024) ]'            

vle8_v:
  templates:
    <<: *_templates
    test_vlx_v_without_mask @ rs1, vlen @ ebits=8, stins='vse8.v': |
      {inherit}

    test_vlx_v_with_mask @ rs1, vlen, mask @ ebits=8, stins='vse8.v': |
      {inherit}

  <<: *default

  cases:
    test_vlx_v_without_mask:
      - '[np.array([1], dtype=np.int8), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int8), 4]'
      - '[np.linspace(0, 0xff, 63, dtype=np.int8), 63]'
      - '[np.linspace(0, 0xff, 64, dtype=np.int8), 64]'
      - '[np.linspace(0, 0xff, 127, dtype=np.int8), 127]'
      - '[np.linspace(0, 0xff, 128, dtype=np.int8), 128]'

    test_vlx_v_with_mask :
      - '[np.array([1], dtype=np.int8), 1, np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64], dtype=np.int8), 4, np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 63, dtype=np.int8), 63, np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 64, dtype=np.int8), 64, np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'

vle16_v:
  templates:
    <<: *_templates
    test_vlx_v_without_mask @ rs1, vlen @ ebits=16, stins='vse16.v': |
      {inherit}

    test_vlx_v_with_mask @ rs1, vlen, mask @ ebits=16, stins='vse16.v': |
      {inherit}

  <<: *default

  cases:
    test_vlx_v_without_mask:
      - '[np.array([1], dtype=np.int16), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int16), 4]'
      - '[np.linspace(0, 0xffff, 63, dtype=np.int16), 63]'
      - '[np.linspace(0, 0xffff, 64, dtype=np.int16), 64]'

    test_vlx_v_with_mask :
      - '[np.array([1], dtype=np.int16), 1, np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64], dtype=np.int16), 4, np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xffff, 63, dtype=np.int16), 63, np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffff, 64, dtype=np.int16), 64, np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'

vle32_v:
  templates:
    <<: *_templates
    test_vlx_v_without_mask @ rs1, vlen @ ebits=32, stins='vse32.v': |
      {inherit}

    test_vlx_v_with_mask @ rs1, vlen, mask @ ebits=32, stins='vse32.v': |
      {inherit}

  <<: *default

  cases:
    test_vlx_v_without_mask:
      - '[np.array([1], dtype=np.int32), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int32), 4]'
      - '[np.linspace(0, 0xffffffff, 31, dtype=np.int32), 31]'
      - '[np.linspace(0, 0xffffffff, 32, dtype=np.int32), 32]'

    test_vlx_v_with_mask :
      - '[np.array([1], dtype=np.int32), 1, np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64], dtype=np.int32), 4, np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffff, 31, dtype=np.int32), 31, np.linspace(0x50, 0xff, 4, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffff, 32, dtype=np.int32), 32, np.linspace(0x50, 0xff, 4, dtype=np.uint8)]'

vle64_v:
  templates:
    <<: *_templates
    test_vlx_v_without_mask @ rs1, vlen @ ebits=64, stins='vse64.v': |
      {inherit}

    test_vlx_v_with_mask @ rs1, vlen, mask @ ebits=64, stins='vse64.v': |
      {inherit}

  <<: *default

  cases:
    test_vlx_v_without_mask:
      - '[np.array([1], dtype=np.int64), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int64), 4]'
      - '[np.linspace(0, 0xffffffffffffffff, 15, dtype=np.int64), 15]'
      - '[np.linspace(0, 0xffffffffffffffff, 16, dtype=np.int64), 16]'

    test_vlx_v_with_mask :
      - '[np.array([1], dtype=np.int64), 1, np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64], dtype=np.int64), 4, np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffffffffffff, 15, dtype=np.int64), 15, np.array([0x5a, 0x55], dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffffffffffff, 16, dtype=np.int64), 16, np.array([0x55, 0xaa], dtype=np.uint8)]'
