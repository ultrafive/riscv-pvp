_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_vv_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        li a4, {vxrm};
        csrw vxrm, a4;
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        la a1, {vs1_data};
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        {name} v24, v16, v8;
        la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_vv_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a4, {vxrm};
        csrw vxrm, a4;  
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        la a0, {mask_data};
        la a1, {vs1_data};
        la a2, {vs2_data};        
        la a6, {ori_data};
        vle{sew}.v v0, (a0);
        vle{sew}.v v8, (a1);
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a6);
        {name} v24, v16, v8, v0.t;
        la a3, test_{num}_data;
        vse{sew}.v v24, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_vx_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        li a4, {vxrm};
        csrw vxrm, a4;
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        li a1, {rs1};
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        {name} v24, v16, a1;
        la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_vx_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a4, {vxrm};
        csrw vxrm, a4;  
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        la a0, {mask_data};
        li a1, {rs1};
        la a2, {vs2_data};        
        la a6, {ori_data};
        vle{sew}.v  v0, (a0);
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a6);
        {name} v24, v16, a1, v0.t;
        la a3, test_{num}_data;
        vse{sew}.v v24, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_vi_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        li a4, {vxrm};
        csrw vxrm, a4;
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        {name} v24, v16, {uimm};
        la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_vi_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a4, {vxrm};
        csrw vxrm, a4;  
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        la a0, {mask_data};
        la a2, {vs2_data};        
        la a6, {ori_data};
        vle{sew}.v  v0, (a0);
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a6);
        {name} v24, v16, {uimm}, v0.t;
        la a3, test_{num}_data;
        vse{sew}.v v24, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection
  
           
  check:
    test_vv_without_mask: np.array_equal(result, golden)
    test_vv_with_mask   : np.array_equal(result, golden)
    test_vx_without_mask: np.array_equal(result, golden)
    test_vx_with_mask   : np.array_equal(result, golden)
    test_vi_without_mask: np.array_equal(result, golden)
    test_vi_with_mask   : np.array_equal(result, golden)

vssrl_vv:
  <<: *default
  cases:
    test_vv_without_mask @ ori, vs1, vs2, sew, vl, lmul, vxrm:
      - '[np.array([7],dtype=np.uint8 ), np.array([1],dtype=np.uint8 ), np.array([17],dtype=np.uint8 ), 8, 1, 1, 0]'
      - '[np.array([7],dtype=np.uint8 ), np.array([1],dtype=np.uint8 ), np.array([21],dtype=np.uint8 ), 8, 1, 1, 1]'
      - '[np.array([7],dtype=np.uint8 ), np.array([1],dtype=np.uint8 ), np.array([31],dtype=np.uint8 ), 8, 1, 1, 2]'
      - '[np.array([7],dtype=np.uint8 ), np.array([1],dtype=np.uint8 ), np.array([41],dtype=np.uint8 ), 8, 1, 1, 3]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), np.array([0,1,2,3],dtype=np.uint8 ), np.array([7,8,14,24],dtype=np.uint8 ),  8, 4, 1, 0]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), np.array([0,1,2,3],dtype=np.uint8 ), np.array([7,8,14,24],dtype=np.uint8 ),  8, 4, 1, 1]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), np.array([0,1,2,3],dtype=np.uint8 ), np.array([7,8,14,24],dtype=np.uint8 ),  8, 4, 1, 2]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), np.array([0,1,2,3],dtype=np.uint8 ), np.array([7,8,14,24],dtype=np.uint8 ),  8, 4, 1, 3]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([0,1,2,3],dtype=np.uint16), np.array([7,8,14,24],dtype=np.uint16), 16, 4, 1, 2]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([0,1,2,3],dtype=np.uint16), np.array([7,8,14,24],dtype=np.uint16), 16, 4, 1, 3]'
      - '[np.array([7,7,9,7],dtype=np.uint32), np.array([0,1,2,3],dtype=np.uint32), np.array([7,8,14,24],dtype=np.uint32), 32, 4, 1, 2]'
      - '[np.array([7,7,9,7],dtype=np.uint32), np.array([0,1,2,3],dtype=np.uint32), np.array([7,8,14,24],dtype=np.uint32), 32, 4, 1, 3]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([0,1,2,3],dtype=np.uint16), np.array([7,8,14,24],dtype=np.uint16), 16, 4, "f4", 2]'
      - '[np.array([7,7,9,7],dtype=np.uint16), np.array([0,1,2,3],dtype=np.uint16), np.array([7,8,14,24],dtype=np.uint16), 16, 4, "f2", 3]'
      - '[np.array([7,7,9,7],dtype=np.uint32), np.array([0,1,2,3],dtype=np.uint32), np.array([7,8,14,24],dtype=np.uint32), 32, 4, "f2", 3]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), np.linspace(0,0x40,64,dtype=np.uint8 ), np.linspace(0x20,0x60,64,dtype=np.uint8 ),  8, 64,1, 0]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), np.linspace(0,0x40,64,dtype=np.uint8 ), np.linspace(0x20,0x60,64,dtype=np.uint8 ),  8, 64,1, 1]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), np.linspace(0,0x40,64,dtype=np.uint8 ), np.linspace(0x20,0x60,64,dtype=np.uint8 ),  8, 64,1, 2]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), np.linspace(0,0x40,64,dtype=np.uint8 ), np.linspace(0x20,0x60,64,dtype=np.uint8 ),  8, 64,1, 3]'    
      - '[np.linspace(0x40,0x80,64,dtype=np.uint32), np.linspace(0,0x40,64,dtype=np.uint32), np.linspace(0x20,0x60,64,dtype=np.uint32), 32, 64,2, 0]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint32), np.linspace(0,0x40,64,dtype=np.uint32), np.linspace(0x20,0x60,64,dtype=np.uint32), 32, 64,2, 1]'
    test_vv_with_mask    @ ori, vs1, vs2, sew, vl, lmul, vxrm, mask:
      - '[np.array([7],dtype=np.uint8 ), np.array([1],dtype=np.uint8 ), np.array([17],dtype=np.uint8 ), 8, 1, 1, 0, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.uint8 ), np.array([1],dtype=np.uint8 ), np.array([21],dtype=np.uint8 ), 8, 1, 1, 1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.uint8 ), np.array([1],dtype=np.uint8 ), np.array([31],dtype=np.uint8 ), 8, 1, 1, 2, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.uint8 ), np.array([1],dtype=np.uint8 ), np.array([41],dtype=np.uint8 ), 8, 1, 1, 3, np.array([0x0],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), np.array([0,1,2,3],dtype=np.uint8 ), np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 0, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), np.array([0,1,2,3],dtype=np.uint8 ), np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), np.array([0,1,2,3],dtype=np.uint8 ), np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 2, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), np.array([0,1,2,3],dtype=np.uint8 ), np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 3, np.array([0x9],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint32), np.array([0,1,2,3],dtype=np.uint32), np.array([7,8,14,24],dtype=np.uint32),32, 4, 1, 2, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint32), np.array([0,1,2,3],dtype=np.uint32), np.array([7,8,14,24],dtype=np.uint32),32, 4, 1, 3, np.array([0x9],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), np.linspace(0,0x40,64,dtype=np.uint8), np.linspace(0x20,0x60,64,dtype=np.uint8 ), 8, 64,1, 0, np.array([0x00f0],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), np.linspace(0,0x40,64,dtype=np.uint8), np.linspace(0x20,0x60,64,dtype=np.uint8 ), 8, 64,1, 1, np.array([0xffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), np.linspace(0,0x40,64,dtype=np.uint8), np.linspace(0x20,0x60,64,dtype=np.uint8 ), 8, 64,1, 2, np.array([0xff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), np.linspace(0,0x40,64,dtype=np.uint8), np.linspace(0x20,0x60,64,dtype=np.uint8 ), 8, 64,1, 3, np.array([0xffffffffff0000ff],dtype=np.uint64)]'

vssrl_vx:
  <<: *default
  cases:
    test_vx_without_mask @ ori, rs1, vs2, sew, vl, lmul, vxrm:
      - '[np.array([7],dtype=np.uint8 ), 1, np.array([21],dtype=np.uint8 ), 8, 1, 1, 0]'
      - '[np.array([7],dtype=np.uint8 ), 2, np.array([31],dtype=np.uint8 ), 8, 1, 1, 1]'
      - '[np.array([7],dtype=np.uint8 ), 3, np.array([41],dtype=np.uint8 ), 8, 1, 1, 2]'
      - '[np.array([7],dtype=np.uint8 ), 4, np.array([51],dtype=np.uint8 ), 8, 1, 1, 3]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 1, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 0]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 2, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 1]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 3, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 2]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 4, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 3]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 3, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, "f4", 2]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 4, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, "f2", 3]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 1, np.linspace(0x20, 0x60,64,dtype=np.uint8 ),  8, 64,1, 0]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 3, np.linspace(0x20, 0x60,64,dtype=np.uint8 ),  8, 64,1, 1]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 5, np.linspace(0x20, 0x60,64,dtype=np.uint8 ),  8, 64,1, 2]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 7, np.linspace(0x20, 0x60,64,dtype=np.uint8 ),  8, 64,1, 3]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint16), 5, np.linspace(0x20, 0x60,64,dtype=np.uint16), 16, 64,1, 2]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint32), 7, np.linspace(0x20, 0x60,64,dtype=np.uint32), 32, 64,2, 3]'
    test_vx_with_mask    @ ori, rs1, vs2, sew, vl, lmul, vxrm, mask:
      - '[np.array([7],dtype=np.uint8 ), 0, np.array([21],dtype=np.uint8 ), 8, 1, 1, 0, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.uint8 ), 1, np.array([31],dtype=np.uint8 ), 8, 1, 1, 1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.uint8 ), 2, np.array([41],dtype=np.uint8 ), 8, 1, 1, 2, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.uint8 ), 3, np.array([51],dtype=np.uint8 ), 8, 1, 1, 3, np.array([0x0],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 1, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 0, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 2, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 3, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 2, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 4, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 3, np.array([0x9],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 2, np.linspace(0x20,0x60,64,dtype=np.uint8 ),  8, 64,1, 0, np.array([0x00f0],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 3, np.linspace(0x20,0x60,64,dtype=np.uint8 ),  8, 64,1, 1, np.array([0xffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 5, np.linspace(0x20,0x60,64,dtype=np.uint8 ),  8, 64,1, 2, np.array([0xff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 6, np.linspace(0x20,0x60,64,dtype=np.uint8 ),  8, 64,1, 3, np.array([0xffffffffff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint32), 5, np.linspace(0x20,0x60,64,dtype=np.uint32), 32, 64,2, 2, np.array([0xffffffffff0000ff],dtype=np.uint64)]'

vssrl_vi:
  <<: *default
  cases:
    test_vi_without_mask @ ori,uimm, vs2, sew, vl, lmul, vxrm:
      - '[np.array([7],dtype=np.uint8 ), 1, np.array([101],dtype=np.uint8 ), 8, 1, 1, 0]'
      - '[np.array([7],dtype=np.uint8 ), 2, np.array([201],dtype=np.uint8 ), 8, 1, 1, 1]'
      - '[np.array([7],dtype=np.uint8 ), 3, np.array([251],dtype=np.uint8 ), 8, 1, 1, 2]'
      - '[np.array([7],dtype=np.uint8 ), 4, np.array([111],dtype=np.uint8 ), 8, 1, 1, 3]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 1, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 0]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 2, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 1]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 3, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 2]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 4, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 3]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 1, np.linspace(0x20,0x60,64,dtype=np.uint8 ), 8, 64, 1, 0]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 3, np.linspace(0x20,0x60,64,dtype=np.uint8 ), 8, 64, 1, 1]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 5, np.linspace(0x20,0x60,64,dtype=np.uint8 ), 8, 64, 1, 2]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 7, np.linspace(0x20,0x60,64,dtype=np.uint8 ), 8, 64, 1, 3]'
    test_vi_with_mask    @ ori,uimm, vs2, sew, vl, lmul, vxrm, mask:
      - '[np.array([7],dtype=np.uint8 ), 0, np.array([201],dtype=np.uint8 ), 8, 1, 1, 0, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.uint8 ), 1, np.array([211],dtype=np.uint8 ), 8, 1, 1, 1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.uint8 ), 2, np.array([231],dtype=np.uint8 ), 8, 1, 1, 2, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.uint8 ), 3, np.array([151],dtype=np.uint8 ), 8, 1, 1, 3, np.array([0x0],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 1, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 0, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 2, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 3, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 2, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.uint8 ), 4, np.array([7,8,14,24],dtype=np.uint8 ), 8, 4, 1, 3, np.array([0x9],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 2, np.linspace(0x20,0x60,64,dtype=np.uint8 ),  8, 64,1, 0, np.array([0x00f0],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 3, np.linspace(0x20,0x60,64,dtype=np.uint8 ),  8, 64,1, 1, np.array([0xffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 5, np.linspace(0x20,0x60,64,dtype=np.uint8 ),  8, 64,1, 2, np.array([0xff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint8 ), 6, np.linspace(0x20,0x60,64,dtype=np.uint8 ),  8, 64,1, 3, np.array([0xffffffffff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint16), 5, np.linspace(0x20,0x60,64,dtype=np.uint16), 16, 64,1, 2, np.array([0xff000fffff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.uint32), 5, np.linspace(0x20,0x60,64,dtype=np.uint32), 32, 64,2, 2, np.array([0xffffffffff000000],dtype=np.uint64)]'

vssra_vv:
  <<: *default
  cases:
    test_vv_without_mask @ ori, vs1, vs2, sew, vl, lmul, vxrm:
      - '[np.array([7],dtype=np.int8 ), np.array([1],dtype=np.int8 ), np.array([-5],dtype=np.int8 ), 8, 1, 1, 0]'
      - '[np.array([7],dtype=np.int8 ), np.array([1],dtype=np.int8 ), np.array([55],dtype=np.int8 ), 8, 1, 1, 1]'
      - '[np.array([7],dtype=np.int8 ), np.array([2],dtype=np.int8 ), np.array([-5],dtype=np.int8 ), 8, 1, 1, 2]'
      - '[np.array([7],dtype=np.int8 ), np.array([1],dtype=np.int8 ), np.array([-9],dtype=np.int8 ), 8, 1, 1, 3]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), np.array([0,1,2,3],dtype=np.int8 ), np.array([-7,8,14,24],dtype=np.int8 ), 8, 4, 1, 0]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), np.array([0,1,2,3],dtype=np.int8 ), np.array([7,-8,14,24],dtype=np.int8 ), 8, 4, 1, 1]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), np.array([0,1,2,3],dtype=np.int8 ), np.array([7,8,-14,24],dtype=np.int8 ), 8, 4, 1, 2]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), np.array([0,1,2,3],dtype=np.int8 ), np.array([7,8,14,-24],dtype=np.int8 ), 8, 4, 1, 3]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), np.array([0,1,2,3],dtype=np.int8 ), np.array([7,8,-14,24],dtype=np.int8 ), 8, 4, "f4", 2]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), np.array([0,1,2,3],dtype=np.int8 ), np.array([7,8,14,-24],dtype=np.int8 ), 8, 4, "f2", 3]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), np.linspace(0,0x40,64,dtype=np.int8 ), np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 0]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), np.linspace(0,0x40,64,dtype=np.int8 ), np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 1]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), np.linspace(0,0x40,64,dtype=np.int8 ), np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 2]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), np.linspace(0,0x40,64,dtype=np.int8 ), np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 3]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int16), np.linspace(0,0x40,64,dtype=np.int16), np.linspace(0x20,0x60,64,dtype=np.int16), 16, 64, 1, 2]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int16), np.linspace(0,0x40,64,dtype=np.int16), np.linspace(0x20,0x60,64,dtype=np.int16), 16, 64, 1, 3]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int32), np.linspace(0,0x40,64,dtype=np.int32), np.linspace(0x20,0x60,64,dtype=np.int32), 32, 64, 2, 1]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int32), np.linspace(0,0x40,64,dtype=np.int32), np.linspace(0x20,0x60,64,dtype=np.int32), 32, 64, 2, 3]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int64), np.linspace(0,0x40,64,dtype=np.int64), np.linspace(0x20,0x60,64,dtype=np.int64), 64, 64, 4, 1]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int64), np.linspace(0,0x40,64,dtype=np.int64), np.linspace(0x20,0x60,64,dtype=np.int64), 64, 64, 4, 3]'
    test_vv_with_mask    @ ori, vs1, vs2, sew, vl, lmul, vxrm, mask:
      - '[np.array([7],dtype=np.int8 ), np.array([1],dtype=np.int8 ), np.array([5],dtype=np.int8 ), 8, 1, 1, 0, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.int8 ), np.array([1],dtype=np.int8 ), np.array([1],dtype=np.int8 ), 8, 1, 1, 1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.int8 ), np.array([1],dtype=np.int8 ), np.array([7],dtype=np.int8 ), 8, 1, 1, 2, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.int8 ), np.array([1],dtype=np.int8 ), np.array([9],dtype=np.int8 ), 8, 1, 1, 3, np.array([0x0],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), np.array([0,1,2,3],dtype=np.int8 ), np.array([7,-8,14,24],dtype=np.int8 ), 8, 4, 1, 0, np.array([0xf], dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), np.array([0,1,2,3],dtype=np.int8 ), np.array([7,8,14,-24],dtype=np.int8 ), 8, 4, 1, 1, np.array([0x5], dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), np.array([0,1,2,3],dtype=np.int8 ), np.array([-7,8,14,24],dtype=np.int8 ), 8, 4, 1, 2, np.array([0xa], dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), np.array([0,1,2,3],dtype=np.int8 ), np.array([7,8,-14,24],dtype=np.int8 ), 8, 4, 1, 3, np.array([0x9], dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), np.linspace(0,0x40,64,dtype=np.int8 ), np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 0, np.array([0x00f0],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), np.linspace(0,0x40,64,dtype=np.int8 ), np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 1, np.array([0xffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), np.linspace(0,0x40,64,dtype=np.int8 ), np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 2, np.array([0xff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), np.linspace(0,0x40,64,dtype=np.int8 ), np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 3, np.array([0xffffffffff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int32), np.linspace(0,0x40,64,dtype=np.int32), np.linspace(0x20,0x60,64,dtype=np.int32), 32, 64, 2, 0, np.array([0x00f0],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int64), np.linspace(0,0x40,64,dtype=np.int64), np.linspace(0x20,0x60,64,dtype=np.int64), 64, 64, 4, 1, np.array([0xffff],dtype=np.uint64)]'
      
vssra_vx:
  <<: *default
  cases:
    test_vx_without_mask @ ori, rs1, vs2, sew, vl, lmul, vxrm:
      - '[np.array([7],dtype=np.int8 ), 1, np.array([-65],dtype=np.int8 ), 8, 1, 1, 0]'
      - '[np.array([7],dtype=np.int8 ), 2, np.array([127],dtype=np.int8 ), 8, 1, 1, 1]'
      - '[np.array([7],dtype=np.int8 ), 3, np.array([111],dtype=np.int8 ), 8, 1, 1, 2]'
      - '[np.array([7],dtype=np.int8 ), 4, np.array([-11],dtype=np.int8 ), 8, 1, 1, 3]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 1, np.array([-7,8,14,24],dtype=np.int8 ), 8, 4, 1, 0]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 2, np.array([7,-8,14,24],dtype=np.int8 ), 8, 4, 1, 1]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 3, np.array([7,8,-14,24],dtype=np.int8 ), 8, 4, 1, 2]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 4, np.array([7,8,14,-24],dtype=np.int8 ), 8, 4, 1, 3]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 1, np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 0]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 3, np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 1]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 5, np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 2]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 7, np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 3]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int32), 1, np.linspace(0x20,0x60,64,dtype=np.int32), 32, 64, 2, 0]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int64), 3, np.linspace(0x20,0x60,64,dtype=np.int64), 64, 64, 4, 1]'
    test_vx_with_mask    @ ori, rs1, vs2, sew, vl, lmul, vxrm, mask:
      - '[np.array([7], dtype=np.int8 ), 0, np.array([1],dtype=np.int8 ), 8, 1, 1, 0, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7], dtype=np.int8 ), 1, np.array([1],dtype=np.int8 ), 8, 1, 1, 1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7], dtype=np.int8 ), 2, np.array([1],dtype=np.int8 ), 8, 1, 1, 2, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7], dtype=np.int8 ), 3, np.array([1],dtype=np.int8 ), 8, 1, 1, 3, np.array([0x0],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 1, np.array([7,8,-14,24],dtype=np.int8 ),  8, 4, 1, 0, np.array([0xf], dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 2, np.array([7,8,14,-24],dtype=np.int8 ),  8, 4, 1, 1, np.array([0x5], dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 3, np.array([-7,8,14,24],dtype=np.int8 ),  8, 4, 1, 2, np.array([0xa], dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 4, np.array([7,-8,14,24],dtype=np.int8 ),  8, 4, 1, 3, np.array([0x9], dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int32), 3, np.array([-7,8,14,24],dtype=np.int32), 32, 4, 1, 2, np.array([0xa], dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int64), 4, np.array([7,-8,14,24],dtype=np.int64), 64, 4, 1, 3, np.array([0x9], dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 2, np.linspace(0x20,0x60,64,dtype=np.int8 ), 8, 64,1, 0, np.array([0x00f0],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 3, np.linspace(0x20,0x60,64,dtype=np.int8 ), 8, 64,1, 1, np.array([0xffff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 5, np.linspace(0x20,0x60,64,dtype=np.int8 ), 8, 64,1, 2, np.array([0xff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 6, np.linspace(0x20,0x60,64,dtype=np.int8 ), 8, 64,1, 3, np.array([0xffffffffff0000ff],dtype=np.uint64)]'

vssra_vi:
  <<: *default
  cases:
    test_vi_without_mask @ ori,uimm, vs2, sew, vl, lmul, vxrm:
      - '[np.array([7],dtype=np.int8 ), 1, np.array([31],dtype=np.int8 ), 8, 1, 1, 0]'
      - '[np.array([7],dtype=np.int8 ), 2, np.array([41],dtype=np.int8 ), 8, 1, 1, 1]'
      - '[np.array([7],dtype=np.int8 ), 3, np.array([21],dtype=np.int8 ), 8, 1, 1, 2]'
      - '[np.array([7],dtype=np.int8 ), 4, np.array([15],dtype=np.int8 ), 8, 1, 1, 3]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 1, np.array([-7,8,14,24],  dtype=np.int8 ),  8, 4, 1, 0]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 2, np.array([7,-8,14,24],  dtype=np.int8 ),  8, 4, 1, 1]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 3, np.array([7,8,-14,24],  dtype=np.int8 ),  8, 4, 1, 2]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 4, np.array([7,8,14,-24],  dtype=np.int8 ),  8, 4, 1, 3]'
      - '[np.array([7,7,9,7],dtype=np.int32), 4, np.array([7,8,14,-24],  dtype=np.int32), 32, 4, 1, 3]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 1, np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 0]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 3, np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 1]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 5, np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 2]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 7, np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 3]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int16), 1, np.linspace(0x20,0x60,64,dtype=np.int16), 16, 64, 1, 0]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int32), 1, np.linspace(0x20,0x60,64,dtype=np.int32), 32, 64, 2, 0]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int64), 1, np.linspace(0x20,0x60,64,dtype=np.int64), 64, 64, 4, 0]'
    test_vi_with_mask    @ ori,uimm, vs2, sew, vl, lmul, vxrm, mask:
      - '[np.array([7],dtype=np.int8 ), 0, np.array([1],dtype=np.int8 ), 8, 1, 1, 0, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.int8 ), 1, np.array([1],dtype=np.int8 ), 8, 1, 1, 1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.int8 ), 2, np.array([1],dtype=np.int8 ), 8, 1, 1, 2, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7],dtype=np.int8 ), 3, np.array([1],dtype=np.int8 ), 8, 1, 1, 3, np.array([0x0],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 1, np.array([7,8,-14,24],dtype=np.int8 ),  8, 4, 1, 0, np.array([0xf],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 2, np.array([7,8,14,-24],dtype=np.int8 ),  8, 4, 1, 1, np.array([0x5],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 3, np.array([-7,8,14,24],dtype=np.int8 ),  8, 4, 1, 2, np.array([0xa],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int8 ), 4, np.array([7,-8,14,24],dtype=np.int8 ),  8, 4, 1, 3, np.array([0x9],dtype=np.uint64)]'
      - '[np.array([7,7,9,7],dtype=np.int16), 4, np.array([7,-8,14,24],dtype=np.int16), 16, 4, 1, 3, np.array([0x9],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int64), 2, np.linspace(0x20,0x60,64,dtype=np.int64), 64, 64, 4, 0, np.array([0xffffffffff000000],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 2, np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 0, np.array([0xffffffffff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 3, np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 1, np.array([0xff0000ffff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 5, np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 2, np.array([0xffffffffff0000ff],dtype=np.uint64)]'
      - '[np.linspace(0x40,0x80,64,dtype=np.int8 ), 6, np.linspace(0x20,0x60,64,dtype=np.int8 ),  8, 64, 1, 3, np.array([0xffff0000ff0000ff],dtype=np.uint64)]'
