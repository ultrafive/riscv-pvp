_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  _templates: &_templates
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        la x1, {rs1_data};
        li a0, {idx_shape[0]};
        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        la a1, {idx_data};
        {ldins_idx} v16, (a1);
        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        {prefix}{nfields}ei{ebits}.v {vreg}, (x1), v16;

        // save data for max 8 vregs (nf * lmul <= 8)
        li a0, VLEN / 8 * 8
        vsetvli t0, a0, e8,m8,tu,mu;
        la a1, test_{num}_data;
        vse8.v {vreg}, (a1);

        .pushsection .data, 1;
      test_{num}_data:
        .fill VLEN / 8 * 8, 1, 0;
        .popsection
    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        la x1, {rs1_data};
        li a0, {idx_shape[0]};
        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        la a1, {idx_data};
        {ldins_idx} v16, (a1);
        la a2, {mask_data};
        vle8.v v0, (a2);
        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        la a3, {orig_data};
        {ldins_orig} {vreg}, (a3);
        {prefix}{nfields}ei{ebits}.v {vreg}, (x1), v16, v0.t;

        // save data for max 8 vregs (nf * lmul <= 8)
        li a0, VLEN / 8 * 8
        vsetvli t0, a0, e8,m8,tu,mu;
        la a1, test_{num}_data;
        vse8.v {vreg}, (a1);

        .pushsection .data, 1;
      test_{num}_data:
        .fill VLEN / 8 * 8, 1, 0;
        .popsection

  check:
    test_basic_without_mask: np.array_equal(result, golden)
    test_basic_with_mask: np.array_equal(result, golden)

  cases:
    test_basic_without_mask:
      #sew=8
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),   1, 1,  2,  8, 'vse8.v',  np.linspace(0, 31,     1, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),   1, 1,  3,  8, 'vse8.v',  np.linspace(0, 31,     1, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),   1, 1,  4,  8, 'vse8.v',  np.linspace(0, 31,     1, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),   1, 1,  5,  8, 'vse8.v',  np.linspace(0, 31,     1, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),   1, 1,  6,  8, 'vse8.v',  np.linspace(0, 31,     1, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),   1, 1,  7,  8, 'vse8.v',  np.linspace(0, 31,     1, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),   1, 1,  8,  8, 'vse8.v',  np.linspace(0, 31,     1, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),  10, 1,  2,  8, 'vse8.v',  np.linspace(0, 31,    10, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),  10, 1,  3,  8, 'vse8.v',  np.linspace(0, 31,    10, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),  10, 1,  4,  8, 'vse8.v',  np.linspace(0, 31,    10, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),  10, 1,  5,  8, 'vse8.v',  np.linspace(0, 31,    10, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),  10, 1,  6,  8, 'vse8.v',  np.linspace(0, 31,    10, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),  10, 1,  7,  8, 'vse8.v',  np.linspace(0, 31,    10, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ),  10, 1,  8,  8, 'vse8.v',  np.linspace(0, 31,    10, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ), 128, 1,  2,  8, 'vse8.v',  np.linspace(0, 31,   128, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ), 128, 1,  3,  8, 'vse8.v',  np.linspace(0, 31,   128, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ), 128, 1,  4,  8, 'vse8.v',  np.linspace(0, 31,   128, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ), 128, 1,  5,  8, 'vse8.v',  np.linspace(0, 31,   128, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ), 128, 1,  6,  8, 'vse8.v',  np.linspace(0, 31,   128, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ), 128, 1,  7,  8, 'vse8.v',  np.linspace(0, 31,   128, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   536, dtype=np.int8 ), 128, 1,  8,  8, 'vse8.v',  np.linspace(0, 31,   128, dtype=np.uint8 )*8*4, 'vle8.v']"

      #sew=8, lmul=2
      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ),   1, 2,  2,  8, 'vse8.v',  np.linspace(0, 31,     1, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ), 129, 2,  2,  8, 'vse8.v',  np.linspace(0, 31,   129, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ), 256, 2,  2,  8, 'vse8.v',  np.linspace(0, 31,   256, dtype=np.uint8 )*8*4, 'vle8.v']"

      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ),   1, 2,  3,  8, 'vse8.v',  np.linspace(0, 31,     1, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ), 129, 2,  3,  8, 'vse8.v',  np.linspace(0, 31,   129, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ), 256, 2,  3,  8, 'vse8.v',  np.linspace(0, 31,   256, dtype=np.uint8 )*8*4, 'vle8.v']"

      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ),   1, 2,  4,  8, 'vse8.v',  np.linspace(0, 31,     1, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ), 129, 2,  4,  8, 'vse8.v',  np.linspace(0, 31,   129, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ), 256, 2,  4,  8, 'vse8.v',  np.linspace(0, 31,   256, dtype=np.uint8 )*8*4, 'vle8.v']"

      #sew=8, lmul=4
      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ),   1, 4,  2,  8, 'vse8.v',  np.linspace(0, 31,     1, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ), 129, 4,  2,  8, 'vse8.v',  np.linspace(0, 31,   129, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ), 257, 4,  2,  8, 'vse8.v',  np.linspace(0, 31,   257, dtype=np.uint8 )*8*4, 'vle8.v']"
      - "[ np.linspace( -1000, 1000,   555, dtype=np.int8 ), 512, 4,  2,  8, 'vse8.v',  np.linspace(0, 31,   512, dtype=np.uint8 )*8*4, 'vle8.v']"

      #sew=16
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1,  2, 16, 'vse16.v', np.linspace(0, 31,     1, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1,  3, 16, 'vse16.v', np.linspace(0, 31,     1, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1,  4, 16, 'vse16.v', np.linspace(0, 31,     1, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1,  5, 16, 'vse16.v', np.linspace(0, 31,     1, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1,  6, 16, 'vse16.v', np.linspace(0, 31,     1, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1,  7, 16, 'vse16.v', np.linspace(0, 31,     1, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1,  8, 16, 'vse16.v', np.linspace(0, 31,     1, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1,  2, 16, 'vse16.v', np.linspace(0, 31,    10, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1,  3, 16, 'vse16.v', np.linspace(0, 31,    10, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1,  4, 16, 'vse16.v', np.linspace(0, 31,    10, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1,  5, 16, 'vse16.v', np.linspace(0, 31,    10, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1,  6, 16, 'vse16.v', np.linspace(0, 31,    10, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1,  7, 16, 'vse16.v', np.linspace(0, 31,    10, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1,  8, 16, 'vse16.v', np.linspace(0, 31,    10, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1,  2, 16, 'vse16.v', np.linspace(0, 31,    64, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1,  3, 16, 'vse16.v', np.linspace(0, 31,    64, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1,  4, 16, 'vse16.v', np.linspace(0, 31,    64, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1,  5, 16, 'vse16.v', np.linspace(0, 31,    64, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1,  6, 16, 'vse16.v', np.linspace(0, 31,    64, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1,  7, 16, 'vse16.v', np.linspace(0, 31,    64, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1,  8, 16, 'vse16.v', np.linspace(0, 31,    64, dtype=np.uint16)*8*4, 'vle16.v']"

      #sew=16, lmul=2
      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16),   1, 2,  2, 16, 'vse16.v', np.linspace(0, 31,     1, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16),  65, 2,  2, 16, 'vse16.v', np.linspace(0, 31,    65, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16), 128, 2,  2, 16, 'vse16.v', np.linspace(0, 31,   128, dtype=np.uint16)*8*4, 'vle16.v']"

      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16),   1, 2,  3, 16, 'vse16.v', np.linspace(0, 31,     1, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16),  65, 2,  3, 16, 'vse16.v', np.linspace(0, 31,    65, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16), 128, 2,  3, 16, 'vse16.v', np.linspace(0, 31,   128, dtype=np.uint16)*8*4, 'vle16.v']"

      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16),   1, 2,  4, 16, 'vse16.v', np.linspace(0, 31,     1, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16),  65, 2,  4, 16, 'vse16.v', np.linspace(0, 31,    65, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16), 128, 2,  4, 16, 'vse16.v', np.linspace(0, 31,   128, dtype=np.uint16)*8*4, 'vle16.v']"

      #sew=16, lmul=4
      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16),   1, 4,  2, 16, 'vse16.v', np.linspace(0, 31,     1, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16),  65, 4,  2, 16, 'vse16.v', np.linspace(0, 31,    65, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16), 129, 4,  2, 16, 'vse16.v', np.linspace(0, 31,   129, dtype=np.uint16)*8*4, 'vle16.v']"
      - "[ np.linspace( -1000, 1000,   777, dtype=np.int16), 256, 4,  2, 16, 'vse16.v', np.linspace(0, 31,   256, dtype=np.uint16)*8*4, 'vle16.v']"

      #sew=32
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1,  2, 32, 'vse32.v', np.linspace(0, 31,     1, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1,  3, 32, 'vse32.v', np.linspace(0, 31,     1, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1,  4, 32, 'vse32.v', np.linspace(0, 31,     1, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1,  5, 32, 'vse32.v', np.linspace(0, 31,     1, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1,  6, 32, 'vse32.v', np.linspace(0, 31,     1, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1,  7, 32, 'vse32.v', np.linspace(0, 31,     1, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1,  8, 32, 'vse32.v', np.linspace(0, 31,     1, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1,  2, 32, 'vse32.v', np.linspace(0, 31,    10, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1,  3, 32, 'vse32.v', np.linspace(0, 31,    10, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1,  4, 32, 'vse32.v', np.linspace(0, 31,    10, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1,  5, 32, 'vse32.v', np.linspace(0, 31,    10, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1,  6, 32, 'vse32.v', np.linspace(0, 31,    10, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1,  7, 32, 'vse32.v', np.linspace(0, 31,    10, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1,  8, 32, 'vse32.v', np.linspace(0, 31,    10, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1,  2, 32, 'vse32.v', np.linspace(0, 31,    32, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1,  3, 32, 'vse32.v', np.linspace(0, 31,    32, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1,  4, 32, 'vse32.v', np.linspace(0, 31,    32, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1,  5, 32, 'vse32.v', np.linspace(0, 31,    32, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1,  6, 32, 'vse32.v', np.linspace(0, 31,    32, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1,  7, 32, 'vse32.v', np.linspace(0, 31,    32, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1,  8, 32, 'vse32.v', np.linspace(0, 31,    32, dtype=np.uint32)*8*4, 'vle32.v']"

      #sew=32, lmul=2
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 2,  2, 32, 'vse32.v', np.linspace(0, 31,     1, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  33, 2,  2, 32, 'vse32.v', np.linspace(0, 31,    33, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  64, 2,  2, 32, 'vse32.v', np.linspace(0, 31,    64, dtype=np.uint32)*8*4, 'vle32.v']"

      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 2,  3, 32, 'vse32.v', np.linspace(0, 31,     1, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  33, 2,  3, 32, 'vse32.v', np.linspace(0, 31,    33, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  64, 2,  3, 32, 'vse32.v', np.linspace(0, 31,    64, dtype=np.uint32)*8*4, 'vle32.v']"

      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 2,  4, 32, 'vse32.v', np.linspace(0, 31,     1, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  33, 2,  4, 32, 'vse32.v', np.linspace(0, 31,    33, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  64, 2,  4, 32, 'vse32.v', np.linspace(0, 31,    64, dtype=np.uint32)*8*4, 'vle32.v']"

      #sew=32, lmul=4
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 4,  2, 32, 'vse32.v', np.linspace(0, 31,     1, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  33, 4,  2, 32, 'vse32.v', np.linspace(0, 31,    33, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  65, 4,  2, 32, 'vse32.v', np.linspace(0, 31,    65, dtype=np.uint32)*8*4, 'vle32.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32), 128, 4,  2, 32, 'vse32.v', np.linspace(0, 31,   128, dtype=np.uint32)*8*4, 'vle32.v']"

      #sew=64
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1,  2, 64, 'vse64.v', np.linspace(0, 31,     1, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1,  3, 64, 'vse64.v', np.linspace(0, 31,     1, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1,  4, 64, 'vse64.v', np.linspace(0, 31,     1, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1,  5, 64, 'vse64.v', np.linspace(0, 31,     1, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1,  6, 64, 'vse64.v', np.linspace(0, 31,     1, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1,  7, 64, 'vse64.v', np.linspace(0, 31,     1, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1,  8, 64, 'vse64.v', np.linspace(0, 31,     1, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1,  2, 64, 'vse64.v', np.linspace(0, 31,    10, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1,  3, 64, 'vse64.v', np.linspace(0, 31,    10, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1,  4, 64, 'vse64.v', np.linspace(0, 31,    10, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1,  5, 64, 'vse64.v', np.linspace(0, 31,    10, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1,  6, 64, 'vse64.v', np.linspace(0, 31,    10, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1,  7, 64, 'vse64.v', np.linspace(0, 31,    10, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1,  8, 64, 'vse64.v', np.linspace(0, 31,    10, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1,  2, 64, 'vse64.v', np.linspace(0, 31,    16, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1,  3, 64, 'vse64.v', np.linspace(0, 31,    16, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1,  4, 64, 'vse64.v', np.linspace(0, 31,    16, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1,  5, 64, 'vse64.v', np.linspace(0, 31,    16, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1,  6, 64, 'vse64.v', np.linspace(0, 31,    16, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1,  7, 64, 'vse64.v', np.linspace(0, 31,    16, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1,  8, 64, 'vse64.v', np.linspace(0, 31,    16, dtype=np.uint64)*8*4, 'vle64.v']"

      #sew=64, lmul=2
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 2,  2, 64, 'vse64.v', np.linspace(0, 31,     1, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  17, 2,  2, 64, 'vse64.v', np.linspace(0, 31,    17, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  32, 2,  2, 64, 'vse64.v', np.linspace(0, 31,    32, dtype=np.uint64)*8*4, 'vle64.v']"

      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 2,  3, 64, 'vse64.v', np.linspace(0, 31,     1, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  17, 2,  3, 64, 'vse64.v', np.linspace(0, 31,    17, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  32, 2,  3, 64, 'vse64.v', np.linspace(0, 31,    32, dtype=np.uint64)*8*4, 'vle64.v']"

      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 2,  4, 64, 'vse64.v', np.linspace(0, 31,     1, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  17, 2,  4, 64, 'vse64.v', np.linspace(0, 31,    17, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  32, 2,  4, 64, 'vse64.v', np.linspace(0, 31,    32, dtype=np.uint64)*8*4, 'vle64.v']"

      #sew=64, lmul=4
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 4,  2, 64, 'vse64.v', np.linspace(0, 31,     1, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  17, 4,  2, 64, 'vse64.v', np.linspace(0, 31,    17, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  33, 4,  2, 64, 'vse64.v', np.linspace(0, 31,    33, dtype=np.uint64)*8*4, 'vle64.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  64, 4,  2, 64, 'vse64.v', np.linspace(0, 31,    64, dtype=np.uint64)*8*4, 'vle64.v']"

    test_basic_with_mask:
      #sew=8
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),   1, 1, random_mask(1),   np.zeros(   1*2, dtype=np.int8 ),  2, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,   1, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),   1, 1, random_mask(1),   np.zeros(   1*3, dtype=np.int8 ),  3, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,   1, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),   1, 1, random_mask(1),   np.zeros(   1*4, dtype=np.int8 ),  4, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,   1, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),   1, 1, random_mask(1),   np.zeros(   1*5, dtype=np.int8 ),  5, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,   1, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),   1, 1, random_mask(1),   np.zeros(   1*6, dtype=np.int8 ),  6, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,   1, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),   1, 1, random_mask(1),   np.zeros(   1*7, dtype=np.int8 ),  7, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,   1, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),   1, 1, random_mask(1),   np.zeros(   1*8, dtype=np.int8 ),  8, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,   1, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),  10, 1, random_mask(10),  np.zeros(  10*2, dtype=np.int8 ),  2, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,  10, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),  10, 1, random_mask(10),  np.zeros(  10*3, dtype=np.int8 ),  3, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,  10, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),  10, 1, random_mask(10),  np.zeros(  10*4, dtype=np.int8 ),  4, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,  10, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),  10, 1, random_mask(10),  np.zeros(  10*5, dtype=np.int8 ),  5, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,  10, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),  10, 1, random_mask(10),  np.zeros(  10*6, dtype=np.int8 ),  6, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,  10, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),  10, 1, random_mask(10),  np.zeros(  10*7, dtype=np.int8 ),  7, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,  10, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ),  10, 1, random_mask(10),  np.zeros(  10*8, dtype=np.int8 ),  8, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31,  10, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ), 128, 1, random_mask(128), np.zeros( 128*2, dtype=np.int8 ),  2, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31, 128, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ), 128, 1, random_mask(128), np.zeros( 128*3, dtype=np.int8 ),  3, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31, 128, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ), 128, 1, random_mask(128), np.zeros( 128*4, dtype=np.int8 ),  4, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31, 128, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ), 128, 1, random_mask(128), np.zeros( 128*5, dtype=np.int8 ),  5, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31, 128, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ), 128, 1, random_mask(128), np.zeros( 128*6, dtype=np.int8 ),  6, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31, 128, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ), 128, 1, random_mask(128), np.zeros( 128*7, dtype=np.int8 ),  7, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31, 128, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int8 ), 128, 1, random_mask(128), np.zeros( 128*8, dtype=np.int8 ),  8, 8,  'vle8.v', 'vse8.v' , np.linspace(0, 31, 128, dtype=np.uint8 )*8*4,  'vle8.v' ]"
      #sew=16                                                                                                                              
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1, random_mask(1),  np.zeros(   1*2, dtype=np.int16 ),  2, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,   1, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1, random_mask(1),  np.zeros(   1*3, dtype=np.int16 ),  3, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,   1, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1, random_mask(1),  np.zeros(   1*4, dtype=np.int16 ),  4, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,   1, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1, random_mask(1),  np.zeros(   1*5, dtype=np.int16 ),  5, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,   1, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1, random_mask(1),  np.zeros(   1*6, dtype=np.int16 ),  6, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,   1, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1, random_mask(1),  np.zeros(   1*7, dtype=np.int16 ),  7, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,   1, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),   1, 1, random_mask(1),  np.zeros(   1*8, dtype=np.int16 ),  8, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,   1, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1, random_mask(10), np.zeros(  10*2, dtype=np.int16 ),  2, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  10, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1, random_mask(10), np.zeros(  10*3, dtype=np.int16 ),  3, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  10, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1, random_mask(10), np.zeros(  10*4, dtype=np.int16 ),  4, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  10, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1, random_mask(10), np.zeros(  10*5, dtype=np.int16 ),  5, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  10, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1, random_mask(10), np.zeros(  10*6, dtype=np.int16 ),  6, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  10, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1, random_mask(10), np.zeros(  10*7, dtype=np.int16 ),  7, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  10, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  10, 1, random_mask(10), np.zeros(  10*8, dtype=np.int16 ),  8, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  10, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1, random_mask(64), np.zeros(  64*2, dtype=np.int16 ),  2, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  64, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1, random_mask(64), np.zeros(  64*3, dtype=np.int16 ),  3, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  64, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1, random_mask(64), np.zeros(  64*4, dtype=np.int16 ),  4, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  64, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1, random_mask(64), np.zeros(  64*5, dtype=np.int16 ),  5, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  64, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1, random_mask(64), np.zeros(  64*6, dtype=np.int16 ),  6, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  64, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1, random_mask(64), np.zeros(  64*7, dtype=np.int16 ),  7, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  64, dtype=np.uint16)*8*4,  'vle16.v']"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int16),  64, 1, random_mask(64), np.zeros(  64*8, dtype=np.int16 ),  8, 16, 'vle8.v', 'vse16.v', np.linspace(0, 31,  64, dtype=np.uint16)*8*4,  'vle16.v']"
      #sew=32
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1, random_mask(1),  np.zeros(   1*2, dtype=np.int32 ),  2, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,   1, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1, random_mask(1),  np.zeros(   1*3, dtype=np.int32 ),  3, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,   1, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1, random_mask(1),  np.zeros(   1*4, dtype=np.int32 ),  4, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,   1, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1, random_mask(1),  np.zeros(   1*5, dtype=np.int32 ),  5, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,   1, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1, random_mask(1),  np.zeros(   1*6, dtype=np.int32 ),  6, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,   1, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1, random_mask(1),  np.zeros(   1*7, dtype=np.int32 ),  7, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,   1, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),   1, 1, random_mask(1),  np.zeros(   1*8, dtype=np.int32 ),  8, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,   1, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1, random_mask(10), np.zeros(  10*2, dtype=np.int32 ),  2, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  10, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1, random_mask(10), np.zeros(  10*3, dtype=np.int32 ),  3, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  10, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1, random_mask(10), np.zeros(  10*4, dtype=np.int32 ),  4, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  10, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1, random_mask(10), np.zeros(  10*5, dtype=np.int32 ),  5, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  10, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1, random_mask(10), np.zeros(  10*6, dtype=np.int32 ),  6, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  10, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1, random_mask(10), np.zeros(  10*7, dtype=np.int32 ),  7, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  10, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  10, 1, random_mask(10), np.zeros(  10*8, dtype=np.int32 ),  8, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  10, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1, random_mask(32), np.zeros(  32*2, dtype=np.int32 ),  2, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  32, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1, random_mask(32), np.zeros(  32*3, dtype=np.int32 ),  3, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  32, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1, random_mask(32), np.zeros(  32*4, dtype=np.int32 ),  4, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  32, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1, random_mask(32), np.zeros(  32*5, dtype=np.int32 ),  5, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  32, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1, random_mask(32), np.zeros(  32*6, dtype=np.int32 ),  6, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  32, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1, random_mask(32), np.zeros(  32*7, dtype=np.int32 ),  7, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  32, dtype=np.uint32)*8*4,  'vle32.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int32),  32, 1, random_mask(32), np.zeros(  32*8, dtype=np.int32 ),  8, 32, 'vle8.v', 'vse32.v', np.linspace(0, 31,  32, dtype=np.uint32)*8*4,  'vle32.v' ]"
      #sew=64
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1, random_mask(1),  np.zeros(   1*2, dtype=np.int64 ),  2, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,   1, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1, random_mask(1),  np.zeros(   1*3, dtype=np.int64 ),  3, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,   1, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1, random_mask(1),  np.zeros(   1*4, dtype=np.int64 ),  4, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,   1, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1, random_mask(1),  np.zeros(   1*5, dtype=np.int64 ),  5, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,   1, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1, random_mask(1),  np.zeros(   1*6, dtype=np.int64 ),  6, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,   1, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1, random_mask(1),  np.zeros(   1*7, dtype=np.int64 ),  7, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,   1, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),   1, 1, random_mask(1),  np.zeros(   1*8, dtype=np.int64 ),  8, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,   1, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1, random_mask(10), np.zeros(  10*2, dtype=np.int64 ),  2, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  10, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1, random_mask(10), np.zeros(  10*3, dtype=np.int64 ),  3, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  10, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1, random_mask(10), np.zeros(  10*4, dtype=np.int64 ),  4, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  10, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1, random_mask(10), np.zeros(  10*5, dtype=np.int64 ),  5, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  10, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1, random_mask(10), np.zeros(  10*6, dtype=np.int64 ),  6, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  10, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1, random_mask(10), np.zeros(  10*7, dtype=np.int64 ),  7, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  10, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  10, 1, random_mask(10), np.zeros(  10*8, dtype=np.int64 ),  8, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  10, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1, random_mask(16), np.zeros(  16*2, dtype=np.int64 ),  2, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  16, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1, random_mask(16), np.zeros(  16*3, dtype=np.int64 ),  3, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  16, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1, random_mask(16), np.zeros(  16*4, dtype=np.int64 ),  4, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  16, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1, random_mask(16), np.zeros(  16*5, dtype=np.int64 ),  5, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  16, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1, random_mask(16), np.zeros(  16*6, dtype=np.int64 ),  6, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  16, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1, random_mask(16), np.zeros(  16*7, dtype=np.int64 ),  7, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  16, dtype=np.uint64)*8*4,  'vle64.v' ]"
      - "[ np.linspace( -1000, 1000,   666, dtype=np.int64),  16, 1, random_mask(16), np.zeros(  16*8, dtype=np.int64 ),  8, 64, 'vle8.v', 'vse64.v', np.linspace(0, 31,  16, dtype=np.uint64)*8*4,  'vle64.v' ]"

vluxsegxeix_v:
  <<: *default
  templates:
    <<: *_templates
    test_basic_without_mask @ rs1, vlen, lmul, nfields, ebits, stins, idx, ldins_idx @ prefix='vluxseg', vreg='v8', VLEN=1024 : |
      {inherit}
    test_basic_with_mask @ rs1, vlen, lmul, mask, orig, nfields, ebits, ldins_orig, stins, idx, ldins_idx @ prefix='vluxseg', vreg='v8', VLEN=1024: |
      {inherit}

vloxsegxeix_v:
  <<: *default
  templates:
    <<: *_templates
    test_basic_without_mask @ rs1, vlen, lmul, nfields, ebits, stins, idx, ldins_idx @ prefix='vloxseg', vreg='v8', VLEN=1024 : |
      {inherit}
    test_basic_with_mask @ rs1, vlen, lmul, mask, orig, nfields, ebits, ldins_orig, stins, idx, ldins_idx @ prefix='vloxseg', vreg='v8', VLEN=1024: |
      {inherit}
