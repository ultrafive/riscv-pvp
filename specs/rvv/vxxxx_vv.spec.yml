_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_vxxxx_vv_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        vsetvli t0, a0, e{ebits},m1,tu,mu;
        la a1, {vs1_data};
        la a2, {vs2_data};
        la a3, test_{num}_data;
        la a4, {vd_data};

        {ldins} v1, (a1);
        {ldins} v2, (a2);
        {ldins} v3, (a4);

        {name} v3, v1, v2;
        {stins} v3, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection
  
    test_vxxxx_vv_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};
        la a1, {vs1_data};
        la a2, {vs2_data};
        la a4, {mask_data};
        la a3, {vd_data};        

        vsetvli t0, a0, e{ebits},m1,tu,mu;
        vle1.v v0, (a4);
        {ldins} v1, (a1);
        {ldins} v2, (a2);
        {ldins} v3, (a3);

        {name} v3, v1, v2, v0.t;
        la a3, test_{num}_data;
        {stins} v3, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection

  cases:
    test_vxxxx_vv_without_mask @ vd, vs1, vs2, vl @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - '[np.array([-1], dtype=np.int32), np.array([4], dtype=np.int32), np.array([4], dtype=np.int32), 1]'
      - '[np.array([-1], dtype=np.int32),  np.array([-2], dtype=np.int32), np.array([3], dtype=np.int32), 1]'
      - '[np.linspace(0, 0xff, 16, dtype=np.int32), np.linspace(0, 0xffff, 16, dtype=np.int32), np.linspace(0x1, 0x10000, 16, dtype=np.int32), 16]'
      - '[np.linspace(-255, 0xffff, 31, dtype=np.int32), np.linspace(-65535, 0xffffffff, 31, dtype=np.int32), np.linspace(0x1, 0xffffffff, 31, dtype=np.int32), 31]'
      - '[np.linspace(-255, 0xffff, 32, dtype=np.int32), np.linspace(0, 0xffffffff, 32, dtype=np.int32), np.linspace(0x1, 0xffffffff, 32, dtype=np.int32), 32]'

    test_vxxxx_vv_with_mask @ vd, vs1, vs2, mask, vl @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - '[np.array([1], dtype=np.int32), np.array([4], dtype=np.int32), np.array([4], dtype=np.int32), np.array([0x5a], dtype=np.uint8), 1]'
      - '[np.linspace(0, 0xff, 16, dtype=np.int32), np.linspace(0, 0xffff, 16, dtype=np.int32), np.linspace(0x1, 0x10000, 16, dtype=np.int32), np.array([0x5a, 0xa5], dtype=np.uint8), 16]'
      - '[np.linspace(0, 0xffff, 31, dtype=np.int32), np.linspace(0, 0xffffffff, 31, dtype=np.int32), np.linspace(0x1, 0xffffffff, 31, dtype=np.int32), np.linspace(0, 255, 4, dtype=np.uint8), 31]'
      - '[np.linspace(0, 0xffff, 32, dtype=np.int32), np.linspace(0, 0xffffffff, 32, dtype=np.int32), np.linspace(0x1, 0xffffffff, 32, dtype=np.int32), np.linspace(0, 255, 4, dtype=np.uint8), 32]'

  check:
    test_vxxxx_vv_without_mask: np.array_equal(result, golden)
    test_vxxxx_vv_with_mask: np.array_equal(result, golden)

vmacc_vv:
  <<: *default

vnmsac_vv:
  <<: *default

vmadd_vv:
  <<: *default

vnmsub_vv:
  <<: *default

