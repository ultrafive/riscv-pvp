_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  _templates: &_templates
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        la x1, {rs1_data};
        li a0, {rs1_shape[0]};
        vsetvli t0, a0, e{ebits},m1,tu,mu;
        {name} v2, (x1);
        la a2, test_{num}_data;
        {stins} v2, (a2);
        .pushsection .data,1;
      test_{num}_data:
        .fill {rs1_shape[0]}, ({ebits}/8), 0;
        .popsection
    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        la x1, {rs1_data};
        li a0, {rs1_shape[0]};
        vsetvli t0, a0, e{ebits},m1,tu,mu;
        la a2, {mask_data};
        {ldins} v0, (a2);        
        la a3, {orig_data};
        {ldins} v2, (a3);
        {name} v2, (x1), v0.t;
        la a2, test_{num}_data;
        {stins} v2, (a2);
        .pushsection .data,1;
      test_{num}_data:
        .fill {rs1_shape[0]}, ({ebits}/8), 0;
        .popsection 
    test_exception_misaligned_base: |
      test_{num}:
        li t0, 4;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};
        li a0, {vlen};
        vsetvli t0, a0, e{ebits},m1,tu,mu;
        la a1, {rs1_data};
        addi a1, a1, {offset};
        {name} v1, (a1);
        j fail;
      test_{num}_end:
        


vle8ff_v:
  <<: *default
  templates:
    <<: *_templates
    test_basic_without_mask @ rs1 @ ebits=8, stins='vse8.v': |
      {inherit}
    test_basic_with_mask @ rs1, mask, orig, vlen @ ebits=8, ldins='vle8.v', stins='vse8.v': |
      {inherit}
  cases:
    test_basic_without_mask:
      - "[ np.linspace( -1000, 1000, 1, dtype=np.int8 ) ]"
      - "[ np.linspace( -1000, 1000, 10, dtype=np.int8 )]"
      - "[ np.linspace( -1000, 1000, 128, dtype=np.int8 ) ]"      
    test_basic_with_mask:
      - "[ np.linspace( -1000, 1000, 1, dtype=np.int8 ), random_mask(1), np.zeros(1, dtype=np.int8), 1 ]"
      - "[ np.linspace( -1000, 1000, 10, dtype=np.int8 ), random_mask(10), np.zeros(10, dtype=np.int8), 10 ]"
      - "[ np.linspace( -1000, 1000, 128, dtype=np.int8 ), random_mask(128), np.zeros(128, dtype=np.int8), 128 ]"              
  check:
    test_basic_without_mask: np.equal( result, golden ).all()
    test_basic_with_mask: np.equal( result, golden ).all()


vle16ff_v:
  <<: *default
  templates:
    <<: *_templates
    test_basic_without_mask @ rs1 @ ebits=16, stins='vse16.v': |
      {inherit}
    test_basic_with_mask @ rs1, mask, orig, vlen @ ebits=16, ldins='vle16.v', stins='vse16.v': |
      {inherit}
    test_exception_misaligned_base @ rs1, vlen, offset @ ebits=16: |
      {inherit}
  cases:
    test_basic_without_mask:
      - "[ np.linspace( -1000, 1000, 1, dtype=np.int16 ) ]"
      - "[ np.linspace( -1000, 1000, 10, dtype=np.int16 )]"
      - "[ np.linspace( -1000, 1000, 64, dtype=np.int16 ) ]"      
    test_basic_with_mask:
      - "[ np.linspace( -1000, 1000, 1, dtype=np.int16 ), random_mask(1), np.zeros(1, dtype=np.int16), 1 ]"
      - "[ np.linspace( -1000, 1000, 10, dtype=np.int16 ), random_mask(10), np.zeros(10, dtype=np.int16), 10 ]"
      - "[ np.linspace( -1000, 1000, 64, dtype=np.int16 ), random_mask(64), np.zeros(64, dtype=np.int16), 64 ]"
    test_exception_misaligned_base:
      - "[ np.linspace( -1000, 1000, 1, dtype=np.int16 ), 1, 1]"      
      - "[ np.linspace( -1000, 1000, 1, dtype=np.int16 ), 10, 1]"   
      - "[ np.linspace( -1000, 1000, 1, dtype=np.int16 ), 64, 1]"           
                         
  check:
    test_basic_without_mask: np.equal( result, golden ).all()
    test_basic_with_mask: np.equal( result, golden ).all()

vle32ff_v:
  <<: *default
  templates:
    <<: *_templates
    test_basic_without_mask @ rs1 @ ebits=32, stins='vse32.v': |
      {inherit}
    test_basic_with_mask @ rs1, mask, orig, vlen @ ebits=32, ldins='vle32.v', stins='vse32.v': |
      {inherit}
  cases:
    test_basic_without_mask:
      - "[ np.linspace( -1000, 1000, 1, dtype=np.int32 ) ]"
      - "[ np.linspace( -1000, 1000, 10, dtype=np.int32 )]"
      - "[ np.linspace( -1000, 1000, 32, dtype=np.int32 ) ]"      
    test_basic_with_mask:
      - "[ np.linspace( -1000, 1000, 1, dtype=np.int32 ), random_mask(1), np.zeros(1, dtype=np.int32), 1 ]"
      - "[ np.linspace( -1000, 1000, 10, dtype=np.int32 ), random_mask(10), np.zeros(10, dtype=np.int32), 10 ]"
      - "[ np.linspace( -1000, 1000, 32, dtype=np.int32 ), random_mask(32), np.zeros(32, dtype=np.int32), 32 ]"              
  check:
    test_basic_without_mask: np.equal( result, golden ).all()
    test_basic_with_mask: np.equal( result, golden ).all()
    
vle64ff_v:
  <<: *default
  templates:
    <<: *_templates
    test_basic_without_mask @ rs1 @ ebits=64, stins='vse64.v': |
      {inherit}
    test_basic_with_mask @ rs1, mask, orig, vlen @ ebits=64, ldins='vle64.v', stins='vse64.v': |
      {inherit}
  cases:
    test_basic_without_mask:
      - "[ np.linspace( -1000, 1000, 1, dtype=np.int64 ) ]"
      - "[ np.linspace( -1000, 1000, 10, dtype=np.int64 )]"
      - "[ np.linspace( -1000, 1000, 16, dtype=np.int64 ) ]"      
    test_basic_with_mask:
      - "[ np.linspace( -1000, 1000, 1, dtype=np.int64 ), random_mask(1), np.zeros(1, dtype=np.int64), 1 ]"
      - "[ np.linspace( -1000, 1000, 10, dtype=np.int64 ), random_mask(10), np.zeros(10, dtype=np.int64), 10 ]"
      - "[ np.linspace( -1000, 1000, 16, dtype=np.int64 ), random_mask(16), np.zeros(16, dtype=np.int64), 16 ]"              
  check:
    test_basic_without_mask: np.equal( result, golden ).all()
    test_basic_with_mask: np.equal( result, golden ).all()    
