_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_vwmxxxx_vv_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {vs1_data};
        la a2, {vs2_data};
        la a3, {vd_data};

        vsetvli t0, a0, e{stebits}, m1,tu,mu;
        {vdldins} v2, (a3);

        vsetvli t0, a0, e{ebits}, m1,tu,mu;
        {ldins} v1, (a1);
        {ldins} v3, (a2);
        {name} v2, v1, v3;

        la a3, test_{num}_data;
        vsetvli t0, a0, e{stebits}, m1,tu,mu;
        {stins} v2, (a3);

        .pushsection .data, 1;
        .balign ({stebits}/8)
      test_{num}_data:
        .fill {vl}, ({stebits}/8), 0;
        .popsection

    test_vwmxxxx_vv_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};
        la a1, {vs1_data};
        la a2, {vs2_data};
        la a4, {mask_data};
        la a3, {vd_data};

        vsetvli t0, a0, e{stebits}, m1,tu,mu;
        {vdldins} v2, (a3);     

        vsetvli t0, a0, e{ebits}, m1, tu, mu;
        vle1.v v0, (a4);
        {ldins} v1, (a1);
        {ldins} v3, (a2);

        {name} v2, v1, v3, v0.t;
        la a3, test_{num}_data;

        vsetvli t0, a0, e{stebits}, m1, tu, mu;
        {stins} v2, (a3);

        .pushsection .data, 1;
        .balign ({stebits}/8)
      test_{num}_data:
        .fill {vl}, ({stebits}/8), 0;
        .popsection

  check:
    test_vwmxxxx_vv_without_mask: np.array_equal(result, golden)
    test_vwmxxxx_vv_with_mask: np.array_equal(result, golden)

vwmaccu_vv:
  <<: *default

  cases:
    test_vwmxxxx_vv_without_mask @ vd, vs1, vs2, vl @ ebits=32, stebits=64, vdldins='vle64.v', ldins='vle32.v', stins='vse64.v':
      - '[np.array([1], dtype=np.uint64), np.array([4], dtype=np.uint32), np.array([4], dtype=np.uint32), 1]'
      - '[np.array([0xff], dtype=np.uint64),  np.array([2], dtype=np.uint32), np.array([3], dtype=np.uint32), 1]'
      - '[np.linspace(0, 0xff, 8, dtype=np.uint64), np.linspace(0, 0xffff, 8, dtype=np.uint32), np.linspace(0x1, 0x10000, 8, dtype=np.uint32), 8]'
      - '[np.linspace(0xff, 0xffff, 15, dtype=np.uint64), np.linspace(0xffff, 0xffffffff, 15, dtype=np.uint32), np.linspace(0x1, 0xffffffff, 15, dtype=np.uint32), 15]'
      - '[np.linspace(0x1000, 0xffff, 16, dtype=np.uint64), np.linspace(0, 0xffffffff, 16, dtype=np.uint32), np.linspace(0x1, 0xffffffff, 16, dtype=np.uint32), 16]'

    test_vwmxxxx_vv_with_mask @ vd, vs1, vs2, mask, vl @ ebits=32, stebits=64, vdldins='vle64.v', ldins='vle32.v', stins='vse64.v':
      - '[np.array([1], dtype=np.uint64), np.array([4], dtype=np.uint32), np.array([4], dtype=np.uint32), np.array([0x1], dtype=np.uint8), 1]'
      - '[np.array([0xff], dtype=np.uint64),  np.array([2], dtype=np.uint32), np.array([3], dtype=np.uint32), np.array([0x0], dtype=np.uint8), 1]'
      - '[np.linspace(0, 0xff, 8, dtype=np.uint64), np.linspace(0, 0xffff, 8, dtype=np.uint32), np.linspace(0x1, 0x10000, 8, dtype=np.uint32), np.array([0x5a], dtype=np.uint8), 8]'
      - '[np.linspace(0xff, 0xffff, 15, dtype=np.uint64), np.linspace(0xfff, 0xffffffff, 15, dtype=np.uint32), np.linspace(0x1, 0xffffffff, 15, dtype=np.uint32), np.array([0x55, 0xaa], dtype=np.uint8), 15]'
      - '[np.linspace(0xff, 0xffff, 16, dtype=np.uint64), np.linspace(0, 0xffffffff, 16, dtype=np.uint32), np.linspace(0x1, 0xffffffff, 16, dtype=np.uint32), np.array([0x55, 0xaa], dtype=np.uint8), 16]'

vwmacc_vv:
  <<: *default

  cases:
    test_vwmxxxx_vv_without_mask @ vd, vs1, vs2, vl @ ebits=32, stebits=64, vdldins='vle64.v', ldins='vle32.v', stins='vse64.v':
      - '[np.array([-1], dtype=np.int64), np.array([4], dtype=np.int32), np.array([4], dtype=np.int32), 1]'
      - '[np.array([-1], dtype=np.int64),  np.array([-2], dtype=np.int32), np.array([3], dtype=np.int32), 1]'
      - '[np.linspace(0, 0xff, 8, dtype=np.int64), np.linspace(0, 0xffff, 8, dtype=np.int32), np.linspace(0x1, 0x10000, 8, dtype=np.int32), 8]'
      - '[np.linspace(-255, 0xffff, 15, dtype=np.int64), np.linspace(-65535, 0xffffffff, 15, dtype=np.int32), np.linspace(0x1, 0xffffffff, 15, dtype=np.int32), 15]'
      - '[np.linspace(-255, 0xffff, 16, dtype=np.int64), np.linspace(0, 0xffffffff, 16, dtype=np.int32), np.linspace(0x1, 0xffffffff, 16, dtype=np.int32), 16]'

    test_vwmxxxx_vv_with_mask @ vd, vs1, vs2, mask, vl @ ebits=32, stebits=64, vdldins='vle64.v', ldins='vle32.v', stins='vse64.v':
      - '[np.array([-1], dtype=np.int64), np.array([4], dtype=np.int32), np.array([4], dtype=np.int32), np.array([0x1], dtype=np.uint8), 1]'
      - '[np.array([-1], dtype=np.int64),  np.array([-2], dtype=np.int32), np.array([3], dtype=np.int32), np.array([0x0], dtype=np.uint8), 1]'
      - '[np.linspace(0, 0xff, 8, dtype=np.int64), np.linspace(0, 0xffff, 8, dtype=np.int32), np.linspace(0x1, 0x10000, 8, dtype=np.int32), np.array([0x5a], dtype=np.uint8), 8]'
      - '[np.linspace(-255, 0xffff, 15, dtype=np.int64), np.linspace(-65535, 0xffffffff, 15, dtype=np.int32), np.linspace(0x1, 0xffffffff, 15, dtype=np.int32), np.array([0x55, 0xaa], dtype=np.uint8), 15]'
      - '[np.linspace(-255, 0xffff, 16, dtype=np.int64), np.linspace(0, 0xffffffff, 16, dtype=np.int32), np.linspace(0x1, 0xffffffff, 16, dtype=np.int32), np.array([0x55, 0xaa], dtype=np.uint8), 16]'

vwmaccsu_vv:
  <<: *default

  cases:
    test_vwmxxxx_vv_without_mask @ vd, vs1, vs2, vl @ ebits=32, stebits=64, vdldins='vle64.v', ldins='vle32.v', stins='vse64.v':
      - '[np.array([1], dtype=np.int64), np.array([-4], dtype=np.int32), np.array([4], dtype=np.uint32), 1]'
      - '[np.array([0xff], dtype=np.int64),  np.array([2], dtype=np.int32), np.array([3], dtype=np.uint32), 1]'
      - '[np.linspace(0, 0xff, 8, dtype=np.int64), np.linspace(0, 0xffff, 8, dtype=np.int32), np.linspace(0x1, 0x10000, 8, dtype=np.uint32), 8]'
      - '[np.linspace(0xff, 0xffff, 15, dtype=np.int64), np.linspace(0x10000000, 0xffffffff, 15, dtype=np.int32), np.linspace(0x1, 0xffffffff, 15, dtype=np.uint32), 15]'
      - '[np.linspace(0x1000, 0xffff, 16, dtype=np.int64), np.linspace(0x10000000, 0xffffffff, 16, dtype=np.int32), np.linspace(0x1, 0xffffffff, 16, dtype=np.uint32), 16]'

    test_vwmxxxx_vv_with_mask @ vd, vs1, vs2, mask, vl @ ebits=32, stebits=64, vdldins='vle64.v', ldins='vle32.v', stins='vse64.v':
      - '[np.array([1], dtype=np.int64), np.array([-4], dtype=np.int32), np.array([4], dtype=np.uint32), np.array([0x1], dtype=np.uint8), 1]'
      - '[np.array([0xff], dtype=np.int64),  np.array([2], dtype=np.int32), np.array([3], dtype=np.uint32), np.array([0x0], dtype=np.uint8), 1]'
      - '[np.linspace(0, 0xff, 8, dtype=np.int64), np.linspace(0, 0xffff, 8, dtype=np.int32), np.linspace(0x1, 0x10000, 8, dtype=np.uint32), np.array([0x5a], dtype=np.uint8), 8]'
      - '[np.linspace(0xff, 0xffff, 15, dtype=np.int64), np.linspace(0x10000000, 0xffffffff, 15, dtype=np.int32), np.linspace(0x1, 0xffffffff, 15, dtype=np.uint32), np.array([0x55, 0xaa], dtype=np.uint8), 15]'
      - '[np.linspace(0xff, 0xffff, 16, dtype=np.int64), np.linspace(0x10000000, 0xffffffff, 16, dtype=np.int32), np.linspace(0x1, 0xffffffff, 16, dtype=np.uint32), np.array([0x55, 0xaa], dtype=np.uint8), 16]'