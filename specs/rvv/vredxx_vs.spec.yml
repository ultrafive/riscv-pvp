_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  templates:
    test_basic_without_mask: |
      test_{num}:
          li TESTNUM, {num};
          li a0, 1 ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs1_data} ;
          {ldins} v1, (a1) ;
          li a0, {vs2_shape[0]} ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a2, {vs2_data};
          la a3, {orig_data} ;
          {ldins} v2, (a2) ;
          {ldins} v3, (a3) ;
          {name} v3, v2, v1 ;
          la a4, test_{num}_data ;
          {stins} v3, (a4);
          .pushsection .data, 1;
          .balign ({ebits}/8)
      test_{num}_data:
          .fill {vs2_shape[0]}, ({ebits}/8), 0;
          .popsection
    test_special_without_mask: |
      test_{num}:
          li TESTNUM, {num};
          li a0, 1 ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs1_data} ;
          {ldins} v1, (a1) ;
          li a0, {vs2_shape[0]} ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a2, {vs2_data};
          la a3, {orig_data} ;
          {ldins} v2, (a2) ;
          {ldins} v3, (a3) ;
          {name} v3, v2, v1 ;
          la a4, test_{num}_data ;
          {stins} v3, (a4);
          .pushsection .data, 1;
          .balign ({ebits}/8)
      test_{num}_data:
          .fill {vs2_shape[0]}, ({ebits}/8), 0;
          .popsection
    test_vs1_eq_vs2_without_mask: |
      test_{num}:
          li TESTNUM, {num};
          li a0, {vs2_shape[0]} ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a2, {vs2_data};
          la a3, {orig_data} ;
          {ldins} v2, (a2) ;
          {ldins} v3, (a3) ;
          {name} v3, v2, v2 ;
          la a4, test_{num}_data ;
          {stins} v3, (a4);
          .pushsection .data, 1;
          .balign ({ebits}/8)
      test_{num}_data:
          .fill {vs2_shape[0]}, ({ebits}/8), 0;
          .popsection
    test_dest_eq_vs1vs2_without_mask: |
      test_{num}:
          li TESTNUM, {num};
          li a0, {vs2_shape[0]} ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a2, {vs2_data};
          {ldins} v2, (a2) ;
          {name} v2, v2, v2 ;
          la a4, test_{num}_data ;
          {stins} v2, (a4);
          .pushsection .data, 1;
          .balign ({ebits}/8)
      test_{num}_data:
          .fill {vs2_shape[0]}, ({ebits}/8), 0;
          .popsection
    test_dest_eq_vs1_without_mask: |
      test_{num}:
          li TESTNUM, {num};
          li a0, {vs2_shape[0]} ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs1_data} ;
          la a2, {vs2_data};
          {ldins} v1, (a1) ;
          {ldins} v2, (a2) ;
          {name} v1, v2, v1 ;
          la a4, test_{num}_data ;
          {stins} v1, (a4);
          .pushsection .data, 1;
          .balign ({ebits}/8)
      test_{num}_data:
          .fill {vs2_shape[0]}, ({ebits}/8), 0;
          .popsection
    test_dest_eq_vs2_without_mask: |
      test_{num}:
          li TESTNUM, {num};
          li a0, 1 ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs1_data} ;
          {ldins} v1, (a1) ;
          li a0, {vs2_shape[0]} ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a2, {vs2_data};
          {ldins} v2, (a2) ;
          {name} v2, v2, v1 ;
          la a4, test_{num}_data ;
          {stins} v2, (a4);
          .pushsection .data, 1;
          .balign ({ebits}/8)
      test_{num}_data:
          .fill {vs2_shape[0]}, ({ebits}/8), 0;
          .popsection
    test_basic_with_mask: |
      test_{num}:
          li TESTNUM, {num};
          li a0, 1 ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs1_data} ;
          {ldins} v1, (a1) ;
          li a0, {vs2_shape[0]} ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a2, {vs2_data};
          la a3, {orig_data};
          la a0, {mask_data};
          {ldins} v2, (a2) ;
          {ldins} v3, (a3) ;
          {ldins} v0, (a0) ;
          {name} v3, v2, v1, v0.t ;
          la a4, test_{num}_data ;
          {stins} v3, (a4);
          .pushsection .data, 1;
          .balign ({ebits}/8)
      test_{num}_data:
          .fill {vs2_shape[0]}, ({ebits}/8), 0;
          .popsection

  cases:
    test_basic_without_mask @orig, vs1, vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - linspace_rvv_vvv(np.int32, 1)
      - linspace_rvv_vvv(np.int32, 4)
      - linspace_rvv_vvv(np.int32, 10)
      - linspace_rvv_vvv(np.int32, 32)
    test_vs1_eq_vs2_without_mask @orig, vs1 @ vs2=vs1, ebits=32, ldins='vle32.v', stins='vse32.v':
      - linspace_rvv_vv(np.int32, 1)
      - linspace_rvv_vv(np.int32, 4)
      - linspace_rvv_vv(np.int32, 10)
      - linspace_rvv_vv(np.int32, 32)
    test_dest_eq_vs1vs2_without_mask @ vs1 @ orig=vs1, vs2=vs1, ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[np.linspace(-127, 0xffff, 1, dtype=np.int32)]"
      - "[np.linspace(-127, 0xffff, 4, dtype=np.int32)]"
      - "[np.linspace(-127, 0xffff, 10, dtype=np.int32)]"
      - "[np.linspace(-127, 0xffff, 32, dtype=np.int32)]"
    test_dest_eq_vs1_without_mask @ vs1, vs2 @ orig=vs1, ebits=32, ldins='vle32.v', stins='vse32.v':
      - linspace_rvv_vv(np.int32, 1)
      - linspace_rvv_vv(np.int32, 4)
      - linspace_rvv_vv(np.int32, 10)
      - linspace_rvv_vv(np.int32, 32)
    test_dest_eq_vs2_without_mask @ vs1, vs2 @ orig=vs2, ebits=32, ldins='vle32.v', stins='vse32.v':
      - linspace_rvv_vv(np.int32, 1)
      - linspace_rvv_vv(np.int32, 4)
      - linspace_rvv_vv(np.int32, 10)
      - linspace_rvv_vv(np.int32, 32)
    test_basic_with_mask @ vs1, vs2, mask, orig, vl @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - linspace_rvv_vv_with_mask(np.int32, 1)
      - linspace_rvv_vv_with_mask(np.int32, 4)
      - linspace_rvv_vv_with_mask(np.int32, 10)
      - linspace_rvv_vv_with_mask(np.int32, 32)
  check:
    test_basic_without_mask: np.array_equal(result, golden)
    test_vs1_eq_vs2_without_mask: np.array_equal(result, golden)
    test_dest_eq_vs1vs2_without_mask: np.array_equal(result, golden)
    test_dest_eq_vs1_without_mask: np.array_equal(result, golden)
    test_dest_eq_vs2_without_mask: np.array_equal(result, golden)
    test_basic_with_mask: np.array_equal(result, golden)

vredsum_vs:
  <<: *default

vredmax_vs:
  <<: *default


vredmin_vs:
  <<: *default

vredand_vs:
  <<: *default

vredor_vs:
  <<: *default

vredxor_vs:
  <<: *default

__: &u_default
  <<: *default
  cases:
    test_basic_without_mask @orig, vs1, vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - linspace_rvv_vvv(np.uint32, 1)
      - linspace_rvv_vvv(np.uint32, 4)
      - linspace_rvv_vvv(np.uint32, 10)
      - linspace_rvv_vvv(np.uint32, 32)
    test_vs1_eq_vs2_without_mask @orig, vs1 @ vs2=vs1, ebits=32, ldins='vle32.v', stins='vse32.v':
      - linspace_rvv_vv(np.uint32, 1)
      - linspace_rvv_vv(np.uint32, 4)
      - linspace_rvv_vv(np.uint32, 10)
      - linspace_rvv_vv(np.uint32, 32)
    test_dest_eq_vs1vs2_without_mask @ vs1 @ orig=vs1, vs2=vs1, ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[np.linspace(-127, 0xffff, 1, dtype=np.uint32)]"
      - "[np.linspace(-127, 0xffff, 4, dtype=np.uint32)]"
      - "[np.linspace(-127, 0xffff, 10, dtype=np.uint32)]"
      - "[np.linspace(-127, 0xffff, 32, dtype=np.uint32)]"
    test_dest_eq_vs1_without_mask @ vs1, vs2 @ orig=vs1, ebits=32, ldins='vle32.v', stins='vse32.v':
      - linspace_rvv_vv(np.uint32, 1)
      - linspace_rvv_vv(np.uint32, 4)
      - linspace_rvv_vv(np.uint32, 10)
      - linspace_rvv_vv(np.uint32, 32)
    test_dest_eq_vs2_without_mask @ vs1, vs2 @ orig=vs2, ebits=32, ldins='vle32.v', stins='vse32.v':
      - linspace_rvv_vv(np.uint32, 1)
      - linspace_rvv_vv(np.uint32, 4)
      - linspace_rvv_vv(np.uint32, 10)
      - linspace_rvv_vv(np.uint32, 32)
    test_basic_with_mask @ vs1, vs2, mask, orig, vl @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - linspace_rvv_vv_with_mask(np.uint32, 1)
      - linspace_rvv_vv_with_mask(np.uint32, 4)
      - linspace_rvv_vv_with_mask(np.uint32, 10)
      - linspace_rvv_vv_with_mask(np.uint32, 32)

vredmaxu_vs:
  <<: *u_default

vredminu_vs:
  <<: *u_default