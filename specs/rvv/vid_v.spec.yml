_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"
  
  templates:
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};

        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        {name} v8;
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        vse{ebits}.v v8, (a3);
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection
    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vl};

        la a4, {mask_data};
        li a5, ({vl} + 7) /8;
        vsetvli t0, a5, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        {name} v8;
        la a3, test_{num}_data;
        
        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        vse{ebits}.v v8, (a3), v0.t;
        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill {vl}, ({ebits}/8), 0;
        .popsection


  cases:
    test_basic_without_mask @ vl, lmul, ebits:
      - '[1,    1, 8 ]'
      - '[4,    1, 8 ]'
      - '[7,    1, 8 ]'
      - '[8,    1, 8 ]'
      - '[9,    1, 8 ]'
      - '[15,   1, 8 ]'
      - '[16,   1, 8 ]'
      - '[17,   1, 8 ]'
      - '[31,   1, 8 ]'
      - '[32,   1, 8 ]'
      - '[33,   1, 8 ]'
      - '[64,   1, 8 ]'
      - '[65,   1, 8 ]'
      - '[127,  1, 8 ]'
      - '[128,  1, 8 ]'
      - '[129,  2, 8 ]'
      - '[255,  2, 8 ]'
      - '[256,  2, 8 ]'
      - '[257,  4, 8 ]'
      - '[511,  4, 8 ]'
      - '[512,  4, 8 ]'
      - '[513,  8, 8 ]'
      - '[1023, 8, 8 ]'
      - '[1024, 8, 8 ]'
      - '[1,    1, 16]'
      - '[4,    1, 16]'
      - '[7,    1, 16]'
      - '[8,    1, 16]'
      - '[9,    1, 16]'
      - '[15,   1, 16]'
      - '[16,   1, 16]'
      - '[17,   1, 16]'
      - '[31,   1, 16]'
      - '[32,   1, 16]'
      - '[33,   1, 16]'
      - '[64,   1, 16]'
      - '[65,   2, 16]'
      - '[127,  2, 16]'
      - '[128,  2, 16]'
      - '[129,  4, 16]'
      - '[255,  4, 16]'
      - '[256,  4, 16]'
      - '[257,  8, 16]'
      - '[511,  8, 16]'
      - '[512,  8, 16]'
      - '[1,    1, 32]'
      - '[3,    1, 32]'
      - '[4,    1, 32]'
      - '[5,    1, 32]'
      - '[7,    1, 32]'
      - '[8,    1, 32]'
      - '[9,    1, 32]'
      - '[15,   1, 32]'
      - '[16,   1, 32]'
      - '[17,   1, 32]'
      - '[31,   1, 32]'
      - '[32,   1, 32]'
      - '[33,   2, 32]'
      - '[64,   2, 32]'
      - '[65,   4, 32]'
      - '[127,  4, 32]'
      - '[128,  4, 32]'
      - '[129,  8, 32]'
      - '[255,  8, 32]'
      - '[256,  8, 32]'
      - '[1,    1, 64]'
      - '[3,    1, 64]'
      - '[4,    1, 64]'
      - '[5,    1, 64]'
      - '[7,    1, 64]'
      - '[8,    1, 64]'
      - '[9,    1, 64]'
      - '[15,   1, 64]'
      - '[16,   1, 64]'
      - '[17,   2, 64]'
      - '[31,   2, 64]'
      - '[32,   2, 64]'
      - '[33,   4, 64]'
      - '[64,   4, 64]'
      - '[65,   8, 64]'
      - '[127,  8, 64]'
      - '[128,  8, 64]'
    test_basic_with_mask @ vl, lmul, ebits, mask:
      - '[1,    1, 8 , random_mask(1   )]'
      - '[4,    1, 8 , random_mask(4   )]'
      - '[7,    1, 8 , random_mask(7   )]'
      - '[8,    1, 8 , random_mask(8   )]'
      - '[9,    1, 8 , random_mask(9   )]'
      - '[15,   1, 8 , random_mask(15  )]'
      - '[16,   1, 8 , random_mask(16  )]'
      - '[17,   1, 8 , random_mask(17  )]'
      - '[31,   1, 8 , random_mask(31  )]'
      - '[32,   1, 8 , random_mask(32  )]'
      - '[33,   1, 8 , random_mask(33  )]'
      - '[64,   1, 8 , random_mask(64  )]'
      - '[65,   1, 8 , random_mask(65  )]'
      - '[127,  1, 8 , random_mask(127 )]'
      - '[128,  1, 8 , random_mask(128 )]'
      - '[129,  2, 8 , random_mask(129 )]'
      - '[255,  2, 8 , random_mask(255 )]'
      - '[256,  2, 8 , random_mask(256 )]'
      - '[257,  4, 8 , random_mask(257 )]'
      - '[511,  4, 8 , random_mask(511 )]'
      - '[512,  4, 8 , random_mask(512 )]'
      - '[513,  8, 8 , random_mask(513 )]'
      - '[1023, 8, 8 , random_mask(1023)]'
      - '[1024, 8, 8 , random_mask(1024)]'
      - '[1,    1, 16, random_mask(1   )]'
      - '[4,    1, 16, random_mask(4   )]'
      - '[7,    1, 16, random_mask(7   )]'
      - '[8,    1, 16, random_mask(8   )]'
      - '[9,    1, 16, random_mask(9   )]'
      - '[15,   1, 16, random_mask(15  )]'
      - '[16,   1, 16, random_mask(16  )]'
      - '[17,   1, 16, random_mask(17  )]'
      - '[31,   1, 16, random_mask(31  )]'
      - '[32,   1, 16, random_mask(32  )]'
      - '[33,   1, 16, random_mask(33  )]'
      - '[64,   1, 16, random_mask(64  )]'
      - '[65,   2, 16, random_mask(65  )]'
      - '[127,  2, 16, random_mask(127 )]'
      - '[128,  2, 16, random_mask(128 )]'
      - '[129,  4, 16, random_mask(129 )]'
      - '[255,  4, 16, random_mask(255 )]'
      - '[256,  4, 16, random_mask(256 )]'
      - '[257,  8, 16, random_mask(257 )]'
      - '[511,  8, 16, random_mask(511 )]'
      - '[512,  8, 16, random_mask(512 )]'
      - '[1,    1, 32, random_mask(1   )]'
      - '[3,    1, 32, random_mask(3   )]'
      - '[4,    1, 32, random_mask(4   )]'
      - '[5,    1, 32, random_mask(5   )]'
      - '[7,    1, 32, random_mask(7   )]'
      - '[8,    1, 32, random_mask(8   )]'
      - '[9,    1, 32, random_mask(9   )]'
      - '[15,   1, 32, random_mask(15  )]'
      - '[16,   1, 32, random_mask(16  )]'
      - '[17,   1, 32, random_mask(17  )]'
      - '[31,   1, 32, random_mask(31  )]'
      - '[32,   1, 32, random_mask(32  )]'
      - '[33,   2, 32, random_mask(33  )]'
      - '[64,   2, 32, random_mask(64  )]'
      - '[65,   4, 32, random_mask(65  )]'
      - '[127,  4, 32, random_mask(127 )]'
      - '[128,  4, 32, random_mask(128 )]'
      - '[129,  8, 32, random_mask(129 )]'
      - '[255,  8, 32, random_mask(255 )]'
      - '[256,  8, 32, random_mask(256 )]'
      - '[1,    1, 64, random_mask(1   )]'
      - '[3,    1, 64, random_mask(3   )]'
      - '[4,    1, 64, random_mask(4   )]'
      - '[5,    1, 64, random_mask(5   )]'
      - '[7,    1, 64, random_mask(7   )]'
      - '[8,    1, 64, random_mask(8   )]'
      - '[9,    1, 64, random_mask(9   )]'
      - '[15,   1, 64, random_mask(15  )]'
      - '[16,   1, 64, random_mask(16  )]'
      - '[17,   2, 64, random_mask(17  )]'
      - '[31,   2, 64, random_mask(31  )]'
      - '[32,   2, 64, random_mask(32  )]'
      - '[33,   4, 64, random_mask(33  )]'
      - '[64,   4, 64, random_mask(64  )]'
      - '[65,   8, 64, random_mask(65  )]'
      - '[127,  8, 64, random_mask(127 )]'
      - '[128,  8, 64, random_mask(128 )]'

  check:
    test_basic_without_mask: np.array_equal(result, golden)
    test_basic_with_mask: np.array_equal(result, golden)

vid_v:
  <<: *default
