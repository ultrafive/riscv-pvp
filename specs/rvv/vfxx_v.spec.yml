_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  templates:
    test_basic_without_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {name} v2, v1 ; 
          la a3, test_{num}_data; 
          {stins} v2, (a3); 
          .pushsection .data, 1; 
          .balign ({ebits}/8)
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits}/8), 0; 
          .popsection     
    test_special_without_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {name} v2, v1 ; 
          la a3, test_{num}_data; 
          {stins} v2, (a3); 
          .pushsection .data, 1; 
          .balign ({ebits}/8)
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits}/8), 0; 
          .popsection
    test_dest_eq_vs2_without_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {name} v1, v1 ; 
          la a3, test_{num}_data; 
          {stins} v1, (a3); 
          .pushsection .data, 1; 
          .balign ({ebits}/8)
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits}/8), 0; 
          .popsection
    test_basic_with_mask: |
      test_{num}: 
          li TESTNUM, {num};          
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs2_data} ; 
          la a0, {mask_data} ; 
          la a3, {orig_data} ; 
          {ldins} v1, (a1) ; 
          vle1.v v0, (a0) ; 
          {ldins} v3, (a3) ; 
          {name} v3, v1, v0.t ; 
          la a3, test_{num}_data ; 
          {stins} v3, (a3); 
          .pushsection .data, 1; 
          .balign ({ebits}/8)
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits}/8), 0; 
          .popsection

vfsqrt_v:
  <<: *default
  cases:
    test_basic_without_mask @ vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[np.linspace( 1, 1e10, 1, dtype=np.float32)]"
      - "[np.linspace( 1, 1e10, 10, dtype=np.float32)]"
      - "[np.linspace( 1, 1e10, 32, dtype=np.float32)]"
      - "[np.zeros( 1, dtype=np.float32 )]"
      - "[np.zeros( 10, dtype=np.float32 )]"
      - "[np.zeros( 32, dtype=np.float32 )]"                         
    test_special_without_mask @ vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[np.linspace( -1e10, -1, 32, dtype=np.float32)]"  
      - "[np.array( [np.float32('nan')] )]"
      - "[np.array( [np.float32('+inf')] )]"
      - "[np.array( [np.float32('-inf')] )]"                                   
    test_dest_eq_vs2_without_mask @ vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[np.linspace( 1, 1e10, 1, dtype=np.float32)]"
      - "[np.linspace( 1, 1e10, 10, dtype=np.float32)]"
      - "[np.linspace( 1, 1e10, 32, dtype=np.float32)]"
      - "[np.zeros( 1, dtype=np.float32 )]"
      - "[np.zeros( 10, dtype=np.float32 )]"
      - "[np.zeros( 32, dtype=np.float32 )]"      
    test_basic_with_mask @ vs2, mask, orig, vl @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[np.linspace( 0, 1e10, 1, dtype=np.float32), random_mask(1), np.linspace( 100, 127, 1, dtype=np.float32), 1 ]"
      - "[np.linspace( 0, 1e10, 10, dtype=np.float32), random_mask(10), np.linspace( 100, 127, 10, dtype=np.float32), 10 ]"
      - "[np.linspace( 0, 1e10, 32, dtype=np.float32), random_mask(32), np.linspace( 100, 127, 32, dtype=np.float32), 32 ]" 
                            
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_dest_eq_vs2_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
 
vfclass_v:
  <<: *default
  cases:
    test_basic_without_mask @ vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[np.linspace( -1e10, 1e10, 1, dtype=np.float32)]"
      - "[np.linspace( -1e10, 1e10, 10, dtype=np.float32)]"
      - "[np.linspace( -1e10, 1e10, 32, dtype=np.float32)]"                        
    test_special_without_mask @ vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[ np.array( [np.float32('-inf')]*32 ) ] "
      - "[ np.array( [np.float32('-10')]*32 ) ] "
      - "[ np.frombuffer( struct.pack('I', 0x80000080), dtype=np.float32 ) ] "        
      - "[ np.array( [np.float32('-0')]*32 ) ] "
      - "[ np.array( [np.float32('+0')]*32 ) ] "
      - "[ np.frombuffer( struct.pack('I', 0x00000080), dtype=np.float32 ) ] "                   
      - "[ np.array( [np.float32('10')]*32 ) ] "    
      - "[ np.array( [np.float32('+inf')]*32 )]"
      - "[ np.frombuffer( struct.pack('I', 0x7F800001), dtype=np.float32 ) ] "  
      - "[ np.frombuffer( struct.pack('I', 0x7FC00000), dtype=np.float32 ) ] "             
                                  
    test_dest_eq_vs2_without_mask @ vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[np.linspace( -1e10, 1e10, 1, dtype=np.float32)]"
      - "[np.linspace( -1e10, 1e10, 10, dtype=np.float32)]"
      - "[np.linspace( -1e10, 1e10, 32, dtype=np.float32)]"        
    test_basic_with_mask @ vs2, mask, orig, vl @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[np.linspace( -1e10, 1e10, 1, dtype=np.float32), random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint32), 1 ]"
      - "[np.linspace( -1e10, 1e10, 10, dtype=np.float32), random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint32), 10 ]"
      - "[np.linspace( -1e10, 1e10, 32, dtype=np.float32), random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint32), 32 ]" 
                            
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_dest_eq_vs2_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)

vfrsqrt7_v:
  <<: *default
  cases:
    test_basic_without_mask @ vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[np.linspace( 1, 1e10, 1, dtype=np.float32)]"
      - "[np.linspace( 1, 1e10, 10, dtype=np.float32)]"
      - "[np.linspace( 1, 1e10, 32, dtype=np.float32)]"                      
    test_special_without_mask @ vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[ np.array( [np.float32('-inf')]*32 ) ] "
      - "[ np.array( [np.float32('-10')]*32 ) ] "
      - "[ np.frombuffer( struct.pack('I', 0x80000080), dtype=np.float32 ) ] "        
      - "[ np.array( [np.float32('-0')]*32 ) ] "
      - "[ np.array( [np.float32('+0')]*32 ) ] "
      - "[ np.frombuffer( struct.pack('I', 0x00000080), dtype=np.float32 ) ] "                   
      - "[ np.array( [np.float32('10')]*32 ) ] "    
      - "[ np.array( [np.float32('+inf')]*32 )]"
      - "[ np.frombuffer( struct.pack('I', 0x7F800001), dtype=np.float32 ) ] "  
      - "[ np.frombuffer( struct.pack('I', 0x7FC00000), dtype=np.float32 ) ] "                                   
    test_dest_eq_vs2_without_mask @ vs2 @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[np.linspace( 1, 1e10, 1, dtype=np.float32)]"
      - "[np.linspace( 1, 1e10, 10, dtype=np.float32)]"
      - "[np.linspace( 1, 1e10, 32, dtype=np.float32)]"     
    test_basic_with_mask @ vs2, mask, orig, vl @ ebits=32, ldins='vle32.v', stins='vse32.v':
      - "[np.linspace( 1, 1e10, 1, dtype=np.float32), random_mask(1), np.linspace( 100, 127, 1, dtype=np.float32), 1 ]"
      - "[np.linspace( 1, 1e10, 10, dtype=np.float32), random_mask(10), np.linspace( 100, 127, 10, dtype=np.float32), 10 ]"
      - "[np.linspace( 1, 1e10, 32, dtype=np.float32), random_mask(32), np.linspace( 100, 127, 32, dtype=np.float32), 32 ]" 
                            
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_dest_eq_vs2_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)