_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  _templates: &_templates
    test_vlsx_v_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen};
        la a1, {vs1_data}; 
        li a2, {rs2};
        la a3, test_{num}_data;

        vsetvli t0, a0, e{ebits},m1,tu,mu;

        {name} v1, (a1), a2;
        {stins} v1, (a3);

        .pushsection .data, 1;
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;
        .popsection

    test_vlsx_v_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        li a0, {vlen};
        la a1, {vs1_data};
        li a2, {rs2};
        la a4, {mask_data};

        li t0, {vlen};
        li t1, 8;
        remu t2, t0, t1;
        bnez t2, 1f;
        li t3,  {vlen} / 8;
        j 2f;
      1:
        li t3,  {vlen} / 8 + 1;
      2:
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        la a3, test_{num}_data;
        vsetvli t0, a0, e{ebits},m1,tu,mu;
        {name} v1, (a1), a2, v0.t;
        {stins} v1, (a3); 

        .pushsection .data, 1;
      test_{num}_data:
        .fill {vlen}, ({ebits}/8), 0;
        .popsection
  check:
    test_vlsx_v_without_mask: np.array_equal(result, golden)
    test_vlsx_v_with_mask: np.array_equal(result, golden)


vlse8_v:
  templates:
    <<: *_templates
    test_vlsx_v_without_mask @ vs1, rs2, vlen @ ebits=8, stins='vse8.v': |
      {inherit}

    test_vlsx_v_with_mask @ vs1, rs2, vlen, mask @ ebits=8, stins='vse8.v': |
      {inherit}
  
  <<: *default

  cases:
    test_vlsx_v_without_mask:
      - '[np.linspace(-128,  127,  64, dtype=np.int8),  0,  64]'
      - '[np.linspace(   0,    0, 128, dtype=np.int8),  0, 128]'
      - '[np.linspace(0xff, 0xff, 400, dtype=np.int8),  4,  80]'
      - '[np.linspace(-128,  127, 768, dtype=np.int8),  6, 128]'

    test_vlsx_v_with_mask:
      - '[np.linspace(   0,    0, 128, dtype=np.int8),  0,  32, np.array([0x5a, 0x55, 0xaa, 0x5a], dtype=np.uint8)]'
      - '[np.linspace(-128,  127, 256, dtype=np.int8),  2, 128, np.linspace(0, 255, 16, dtype=np.uint8)]'
      - '[np.linspace(-128,  127, 256, dtype=np.int8),  4,  64, np.linspace(0, 255, 8, dtype=np.uint8)]'

vlse16_v:
  templates:
    <<: *_templates
    test_vlsx_v_without_mask @ vs1, rs2, vlen @ ebits=16, stins='vse16.v': |
      {inherit}

    test_vlsx_v_with_mask @ vs1, rs2, vlen, mask @ ebits=16, stins='vse16.v': |
      {inherit}
  
  <<: *default

  cases:
    test_vlsx_v_without_mask:
      - '[np.linspace(-32767,  32767,  64, dtype=np.int16),  0, 64]'
      - '[np.linspace(     0,      0,  64, dtype=np.int16),  0, 64]'
      - '[np.linspace(0xffff, 0xffff, 512, dtype=np.int16),  4, 64]'
      - '[np.linspace(-32768,  32767, 512, dtype=np.int16),  6, 64]'

    test_vlsx_v_with_mask:
      - '[np.linspace(     0,      0, 128, dtype=np.int16),  0, 32, np.array([0x5a, 0x55, 0xaa, 0x5a], dtype=np.uint8)]'
      - '[np.linspace(-32768,  32767, 128, dtype=np.int16),  2, 64, np.linspace(1, 255, 8, dtype=np.uint8)]'
      - '[np.linspace(-32768,  32767, 256, dtype=np.int16),  4, 64, np.linspace(1, 255, 8, dtype=np.uint8)]'
     
vlse32_v:
  templates:
    <<: *_templates
    test_vlsx_v_without_mask @ vs1, rs2, vlen @ ebits=32, stins='vse32.v': |
      {inherit}

    test_vlsx_v_with_mask @ vs1, rs2, vlen, mask  @ ebits=32, stins='vse32.v': |
      {inherit}
  
  <<: *default

  cases:
    test_vlsx_v_without_mask:
      - '[np.linspace(-32768,  32767,  32, dtype=np.int32),  0, 15]'
      - '[np.linspace(     0,      0,  32, dtype=np.int32),  0, 31]'
      - '[np.linspace(0xffff, 0xffff, 128, dtype=np.int32),  4, 32]'
      - '[np.linspace(0,  0xffffffff, 256, dtype=np.int32),  8, 32]'

    test_vlsx_v_with_mask:
      - '[np.linspace(     0,      0, 128, dtype=np.int32),  0, 32, np.array([0x5a, 0x55, 0xaa, 0x5a], dtype=np.uint8)]'
      - '[np.linspace(-32768,  32767, 256, dtype=np.int32),  8, 31, np.linspace(1, 255, 4, dtype=np.uint8)]'
      - '[np.linspace(0,  0xffffffff, 256, dtype=np.int32), 16, 32, np.linspace(1, 255, 4, dtype=np.uint8)]'

vlse64_v:
  templates:
    <<: *_templates
    test_vlsx_v_without_mask @ vs1, rs2, vlen @ ebits=64, stins='vse64.v': |
      {inherit}

    test_vlsx_v_with_mask @ vs1, rs2, vlen, mask @ ebits=64, stins='vse64.v': |
      {inherit}
  
  <<: *default

  cases:
    test_vlsx_v_without_mask:
      - '[np.linspace(    -32768,      32767,  32, dtype=np.int64),  0, 3]'
      - '[np.linspace(         0,          0,  32, dtype=np.int64),  0, 15]'
      - '[np.linspace(0xffffffff, 0xffffffff, 256, dtype=np.int64),  8, 16]'
      - '[np.linspace(         0, 0xffffffff, 256, dtype=np.int64), 16, 16]'

    test_vlsx_v_with_mask:
      - '[np.linspace(         0,          0, 128, dtype=np.int64),  0, 15, np.array([0x5a, 0x55, 0xaa, 0x5a], dtype=np.uint8)]'
      - '[np.linspace(    -32768,      32767, 256, dtype=np.int64),  8, 16, np.linspace(1, 255, 2, dtype=np.uint8)]'
      - '[np.linspace(         0, 0xffffffff, 256, dtype=np.int64), 16, 16, np.linspace(1, 255, 2, dtype=np.uint8)]'

