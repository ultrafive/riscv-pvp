_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  templates:
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen};
        la a1, {vs3_data};
        la a2, test_{num}_data;  

        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        {ldins} v8, (a1);
        
        {inst_name} v8, (a2);

        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill ({vlen}*{nfields}), ({ebits}/8), 0;
        .popsection
    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen};
        la a1, {vs3_data};
        la a2, test_{num}_data;
        la a4, {mask_data};
        
        li a5, ({vlen} + 7)/8;
        vsetvli t0, a5, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;        
        {ldins} v8, (a1);

        {inst_name} v8, (a2), v0.t;

        .pushsection .data, 1;
        .balign ({ebits}/8)
      test_{num}_data:
        .fill ({vlen}*{nfields}), ({ebits}/8), 0;
        .popsection

  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True )
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True )    

vssegxex_v:
  <<: *default
  cases:
    test_basic_without_mask @ ebits, lmul, nfields, ldins, inst_name, vlen, vs3:
      setup: |
        params_yml = []
        for ebits in [ 8, 16, 32, 64 ]:
            for lmul in get_lmul_seg(ebits):
                for nfields in get_nfields(lmul):
                    ldins = f'vlseg{nfields}e{ebits}.v'
                    inst_name = f'vsseg{nfields}e{ebits}.v'
                    for vlen in get_vl(lmul, ebits, args.vlen):
                        vs3 = np.linspace( -1000, 1000, vlen*nfields, dtype=get_intdtype(ebits))
                        params_yml.append([ebits, lmul, nfields, ldins, inst_name, vlen, vs3])

    test_basic_with_mask:
      matrix:
        ebits: [ 8, 16, 32, 64]
        lmul: get_lmul_seg(ebits)     
        nfields: get_nfields(lmul)
        ldins: f'vlseg{nfields}e{ebits}.v'
        inst_name: f'vsseg{nfields}e{ebits}.v'
        vlen: get_vl(lmul, ebits, args.vlen)
        vs3: np.linspace( -1000, 1000, vlen*nfields, dtype=get_intdtype(ebits))
        mask: random_mask(vlen)
        orig: np.zeros(vlen*nfields, dtype=get_intdtype(ebits))


                                                                                                                                              


