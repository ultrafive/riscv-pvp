_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  _templates: &_templates
    test_vxext_vfx_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen}; 
        la a1, {vs2_data}; 
        la a3, test_{num}_data;

        vsetvli t0, a0, e{eewbits},{emul},tu,mu;
        {ldins} v4, (a1)

        vsetvli t0, a0, e{sewbits},m1,tu,mu;
        {name} v1, v4; 
        {stins} v1, (a3);
        .pushsection .data, 1;
      test_{num}_data:
        .fill {vlen}, ({sewbits} / 8), 0;
        .popsection

    test_vxext_vfx_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen}; 
        la a1, {vs2_data}; 
        la a3, test_{num}_data;
        la a4, {mask_data};

        vsetvli t0, a0, e{eewbits},{emul},tu,mu;
        {ldins} v4, (a1)

        li t1, 8;
        remu t2, a0, t1;
        bnez t2, 1f;
        li t3,  {vlen} / 8;
        j 2f;
      1:
        li t3,  {vlen} / 8 + 1;
      2:
        vsetvli t0, t3, e8, m1, tu, mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{sewbits},m1,tu,mu;
        {name} v1, v4, v0.t; 
        {stins} v1, (a3);
        .pushsection .data, 1;
      test_{num}_data:
        .fill {vlen}, ({sewbits} / 8), 0;
        .popsection

  check:
    test_vxext_vfx_without_mask: np.array_equal(result, golden)
    test_vxext_vfx_with_mask: np.array_equal(result, golden)

vzext_vf2:
  templates:
    <<: *_templates
    test_vxext_vfx_without_mask @ vs2, vlen @ sewbits=16, eewbits=8, ldins='vle16.v', stins='vse16.v', emul='mf2' : |
      {inherit}

    test_vxext_vfx_with_mask @ vs2, mask, vlen @ sewbits=16, eewbits=8, ldins='vle16.v', stins='vse16.v', emul='mf2' : |
      {inherit}

  <<: *default

  cases:
    test_vxext_vfx_without_mask:
      - '[np.array([1], dtype=np.uint8), 1]'
      - '[np.array([1, 0, 16, 64], dtype=np.uint8), 4]'
      - '[np.linspace(0, 0xffff, 31, dtype=np.uint8), 31]'
      - '[np.linspace(0, 0xffff, 32, dtype=np.uint8), 32]'
      - '[np.linspace(0, 0xffff, 63, dtype=np.uint8), 63]'
      - '[np.linspace(0, 0xffff, 64, dtype=np.uint8), 64]'
      
    
    test_vxext_vfx_with_mask:
      - '[np.array([1], dtype=np.uint8), np.array([0x5a], dtype=np.uint8), 1]'
      - '[np.array([1, 0, 16, 64], dtype=np.uint8), np.array([0x55], dtype=np.uint8), 4]'
      - '[np.linspace(0, 0xffff, 31, dtype=np.uint8), np.linspace(0, 255, 4, dtype=np.uint8), 31]'
      - '[np.linspace(0, 0xffff, 32, dtype=np.uint8), np.linspace(0, 255, 4, dtype=np.uint8), 32]'
      - '[np.linspace(0, 0xffff, 63, dtype=np.uint8), np.linspace(0, 255, 8, dtype=np.uint8), 63]'
      - '[np.linspace(0, 0xffff, 64, dtype=np.uint8), np.linspace(0, 255, 8, dtype=np.uint8), 64]'

vzext_vf4:
  templates:
    <<: *_templates
    test_vxext_vfx_without_mask @ vs2, vlen @ sewbits=32, eewbits=8, ldins='vle32.v', stins='vse32.v', emul='mf4' : |
      {inherit}

    test_vxext_vfx_with_mask @ vs2, mask, vlen @ sewbits=32, eewbits=8, ldins='vle32.v', stins='vse32.v', emul='mf4' : |
      {inherit}

  <<: *default

  cases:
    test_vxext_vfx_without_mask:
      - '[np.array([1], dtype=np.uint8), 1]'
      - '[np.array([1, 0, 16, 64], dtype=np.uint8), 4]'
      - '[np.linspace(0, 0xffff, 31, dtype=np.uint8), 31]'
      - '[np.linspace(0, 0xffff, 32, dtype=np.uint8), 32]'
    
    test_vxext_vfx_with_mask:
      - '[np.array([1], dtype=np.uint8), np.array([0x5a], dtype=np.uint8), 1]'
      - '[np.array([1, 0, 16, 64], dtype=np.uint8), np.array([0x55], dtype=np.uint8), 4]'
      - '[np.linspace(0, 0xffff, 31, dtype=np.uint8), np.linspace(0, 255, 4, dtype=np.uint8), 31]'
      - '[np.linspace(0, 0xffff, 32, dtype=np.uint8), np.linspace(0, 255, 4, dtype=np.uint8), 32]'

vzext_vf8:
  templates:
    <<: *_templates
    test_vxext_vfx_without_mask @ vs2, vlen @ sewbits=64, eewbits=8, ldins='vle64.v', stins='vse64.v', emul='mf8' : |
      {inherit}

    test_vxext_vfx_with_mask @ vs2, mask, vlen @ sewbits=64, eewbits=8, ldins='vle64.v', stins='vse64.v', emul='mf8' : |
      {inherit}

  <<: *default

  cases:
    test_vxext_vfx_without_mask:
      - '[np.array([1], dtype=np.uint8), 1]'
      - '[np.array([1, 0, 16, 64], dtype=np.uint8), 4]'
      - '[np.linspace(0, 0xffff, 15, dtype=np.uint8), 15]'
      - '[np.linspace(0, 0xffff, 16, dtype=np.uint8), 16]'
      
    
    test_vxext_vfx_with_mask:
      - '[np.array([1], dtype=np.uint8), np.array([0x5a], dtype=np.uint8), 1]'
      - '[np.array([1, 0, 16, 64], dtype=np.uint8), np.array([0x55], dtype=np.uint8), 4]'
      - '[np.linspace(0, 0xffff, 15, dtype=np.uint8), np.linspace(0, 255, 4, dtype=np.uint8), 15]'
      - '[np.linspace(0, 0xffff, 16, dtype=np.uint8), np.linspace(0, 255, 4, dtype=np.uint8), 16]'

vsext_vf2:
  templates:
    <<: *_templates
    test_vxext_vfx_without_mask @ vs2, vlen @ sewbits=16, eewbits=8, ldins='vle16.v', stins='vse16.v', emul='mf2' : |
      {inherit}

    test_vxext_vfx_with_mask @ vs2, mask, vlen @ sewbits=16, eewbits=8, ldins='vle16.v', stins='vse16.v', emul='mf2' : |
      {inherit}

  <<: *default

  cases:
    test_vxext_vfx_without_mask:
      - '[np.array([1], dtype=np.int8), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int8), 4]'
      - '[np.linspace(-128, 127, 31, dtype=np.int8), 31]'
      - '[np.linspace(-128, 127, 32, dtype=np.int8), 32]'
      - '[np.linspace(-128, 127, 63, dtype=np.int8), 63]'
      - '[np.linspace(-128, 127, 64, dtype=np.int8), 64]'

    test_vxext_vfx_with_mask:
      - '[np.array([1], dtype=np.int8), np.array([0x5a], dtype=np.uint8), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int8), np.array([0x55], dtype=np.uint8), 4]'
      - '[np.linspace(-128, 127, 31, dtype=np.int8), np.linspace(0, 255, 4, dtype=np.uint8), 31]'
      - '[np.linspace(-128, 127, 32, dtype=np.int8), np.linspace(0, 255, 4, dtype=np.uint8), 32]'
      - '[np.linspace(-128, 127, 63, dtype=np.int8), np.linspace(0, 255, 8, dtype=np.uint8), 63]'
      - '[np.linspace(-128, 127, 64, dtype=np.int8), np.linspace(0, 255, 8, dtype=np.uint8), 64]'

vsext_vf4:
  templates:
    <<: *_templates
    test_vxext_vfx_without_mask @ vs2, vlen @ sewbits=32, eewbits=8, ldins='vle32.v', stins='vse32.v', emul='mf4' : |
      {inherit}

    test_vxext_vfx_with_mask @ vs2, mask, vlen @ sewbits=32, eewbits=8, ldins='vle32.v', stins='vse32.v', emul='mf4' : |
      {inherit}

  <<: *default

  cases:
    test_vxext_vfx_without_mask:
      - '[np.array([1], dtype=np.int8), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int8), 4]'
      - '[np.linspace(-128, 127, 31, dtype=np.int8), 31]'
      - '[np.linspace(-128, 127, 32, dtype=np.int8), 32]'
    
    test_vxext_vfx_with_mask:
      - '[np.array([1], dtype=np.int8), np.array([0x5a], dtype=np.uint8), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int8), np.array([0x55], dtype=np.uint8), 4]'
      - '[np.linspace(-128, 127, 31, dtype=np.int8), np.linspace(0, 255, 4, dtype=np.uint8), 31]'
      - '[np.linspace(-128, 127, 32, dtype=np.int8), np.linspace(0, 255, 4, dtype=np.uint8), 32]'

vsext_vf8:
  templates:
    <<: *_templates
    test_vxext_vfx_without_mask @ vs2, vlen @ sewbits=64, eewbits=8, ldins='vle64.v', stins='vse64.v', emul='mf8' : |
      {inherit}

    test_vxext_vfx_with_mask @ vs2, mask, vlen @ sewbits=64, eewbits=8, ldins='vle64.v', stins='vse64.v', emul='mf8' : |
      {inherit}

  <<: *default

  cases:
    test_vxext_vfx_without_mask:
      - '[np.array([1], dtype=np.int8), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int8), 4]'
      - '[np.linspace(-128, 127, 15, dtype=np.int8), 15]'
      - '[np.linspace(-128, 127, 16, dtype=np.int8), 16]'
    
    test_vxext_vfx_with_mask:
      - '[np.array([1], dtype=np.int8), np.array([0x5a], dtype=np.uint8), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int8), np.array([0x55], dtype=np.uint8), 4]'
      - '[np.linspace(-128, 127, 15, dtype=np.int8), np.linspace(0, 255, 4, dtype=np.uint8), 15]'
      - '[np.linspace(-128, 127, 16, dtype=np.int8), np.linspace(0, 255, 4, dtype=np.uint8), 16]'
