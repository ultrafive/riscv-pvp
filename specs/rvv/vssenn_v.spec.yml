_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  _templates: &_templates
    test_vssx_v_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen};

        la a1, {vs3_data};
        li a2, {rs2}; 
        la a3, test_{num}_data;

        vsetvli t0, a0, e{ebits},m1,tu,mu;
        {ldins} v1, (a1);
        {name} v1, (a3), a2;

        .pushsection .data, 1;
      test_{num}_data:
      .fill ({vlen} - 1) * {rs2} + 1, ({ebits}/8), 0;
      .popsection

    test_vssx_v_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen};
        la a1, {vs3_data};
        li a2, {rs2};
        la a3, test_{num}_data;
        la a4, {mask_data};

        li t1, 8;
        remu t2, a0, t1;
        bnez t2, 1f;
        li t3,  {vlen} / 8;
        j 2f;
      1:
        li t3,  {vlen} / 8 + 1;
      2:
        vsetvli t0, t3, e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{ebits},m1,tu,mu;
        {ldins} v1, (a1);
        {name} v1, (a3), a2, v0.t;

        .pushsection .data, 1;
      test_{num}_data:
        .fill ({vlen} - 1) * {rs2} + 1 , ({ebits}/8), 0;
        .popsection

  check:
    test_vssx_v_without_mask: np.array_equal(result, golden)
    test_vssx_v_with_mask: np.array_equal(result, golden)

vsse8_v:
  templates:
    <<: *_templates
    test_vssx_v_without_mask @ vs3, rs2, vlen @ ebits=8, ldins='vle8.v': |
      {inherit}

    test_vssx_v_with_mask @ vs3, rs2, mask, vlen @ ebits=8, ldins='vle8.v': |
      {inherit}

  <<: *default

  cases:
    test_vssx_v_without_mask:
      - '[np.linspace(-128, 127, 64, dtype=np.int8), 0, 64]'
      - '[np.linspace(0, 0, 128, dtype=np.int8), 0, 128]'
      - '[np.linspace(0xff, 0xff, 120, dtype=np.uint8), 4, 80]'
      - '[np.linspace(-128, 127, 128, dtype=np.int8), 6, 128]'

    test_vssx_v_with_mask:
      - '[np.array([1], dtype=np.int8), 0, np.array([0x5a], dtype=np.uint8), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int8), 6, np.array([0x5a], dtype=np.uint8), 4]'
      - '[np.linspace(1, 256, 64, dtype=np.int8), 4, np.linspace(0, 255, 8, dtype=np.uint8), 64]'
      - '[np.linspace(-128, 127, 128, dtype=np.int8), 6, np.linspace(0, 255, 16, dtype=np.uint8), 128]'

vsse16_v:
  templates:
    <<: *_templates
    test_vssx_v_without_mask @ vs3, rs2, vlen @ ebits=16, ldins='vle16.v': |
      {inherit}

    test_vssx_v_with_mask @ vs3, rs2, mask, vlen @ ebits=16, ldins='vle16.v': |
      {inherit}

  <<: *default

  cases:
    test_vssx_v_without_mask:
      - '[np.linspace(-32767, 32768, 32, dtype=np.int16), 0, 32]'
      - '[np.linspace(0, 0, 128, dtype=np.int16), 0, 63]'
      - '[np.linspace(0xffff, 0xffff, 64, dtype=np.uint16), 4, 64]'
      - '[np.linspace(-32767, 32768, 128, dtype=np.int16), 6, 64]'

    test_vssx_v_with_mask:
      - '[np.array([1], dtype=np.int16), 0, np.array([0x5a], dtype=np.uint8), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int16), 6, np.array([0x5a], dtype=np.uint8), 4]'
      - '[np.linspace(1, 0x1ff, 63, dtype=np.int16), 4, np.linspace(0, 255, 8, dtype=np.uint8), 63]'
      - '[np.linspace(-32767, 32768, 128, dtype=np.int16), 6, np.linspace(0, 255, 8, dtype=np.uint8), 64]'


vsse32_v:
  templates:
    <<: *_templates
    test_vssx_v_without_mask @ vs3, rs2, vlen @ ebits=32, ldins='vle32.v': |
      {inherit}

    test_vssx_v_with_mask @ vs3, rs2, mask, vlen @ ebits=32, ldins='vle32.v': |
      {inherit}

  <<: *default

  cases:
    test_vssx_v_without_mask:
      - '[np.linspace(-65536, 65535, 8, dtype=np.int32), 0, 8]'
      - '[np.linspace(0, 0, 15, dtype=np.int32), 0, 15]'
      - '[np.linspace(0xffff, 0xffff, 32, dtype=np.uint32), 4, 32]'
      - '[np.linspace(0, 0xffff, 32, dtype=np.int32), 8, 32]'

    test_vssx_v_with_mask:
      - '[np.array([1], dtype=np.int32), 0, np.array([0x5a], dtype=np.uint8), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int32), 4, np.array([0x5a], dtype=np.uint8), 4]'
      - '[np.linspace(1, 0x1ff, 15, dtype=np.int32), 8, np.linspace(0, 255, 2, dtype=np.uint8), 15]'
      - '[np.linspace(0, 0xffff, 32, dtype=np.int32), 16, np.linspace(0, 255, 4, dtype=np.uint8), 32]'

vsse64_v:
  templates:
    <<: *_templates
    test_vssx_v_without_mask @ vs3, rs2, vlen @ ebits=64, ldins='vle64.v': |
      {inherit}

    test_vssx_v_with_mask @ vs3, rs2, mask, vlen @ ebits=64, ldins='vle64.v': |
      {inherit}

  <<: *default

  cases:
    test_vssx_v_without_mask:
      - '[np.linspace(-65536, 65535, 3, dtype=np.int64), 0, 3]'
      - '[np.linspace(0, 0, 8, dtype=np.int64), 0, 8]'
      - '[np.linspace(0xffff, 0xffff, 16, dtype=np.uint64), 8, 16]'
      - '[np.linspace(0, 0xffff, 32, dtype=np.int64), 16, 16]'

    test_vssx_v_with_mask:
      - '[np.array([1], dtype=np.int64), 0, np.array([0x5a], dtype=np.uint8), 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int64), 8, np.array([0x5a], dtype=np.uint8), 4]'
      - '[np.linspace(1, 0x1ff, 15, dtype=np.int64), 8, np.linspace(0, 255, 2, dtype=np.uint8), 15]'
      - '[np.linspace(0, 0xffff, 32, dtype=np.int64), 16, np.linspace(0, 255, 4, dtype=np.uint8), 16]'
