_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  _templates: &_templates
    test_vsx_v_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        {ldins} v8, (a1);
        {name} v8, (a3);

        .pushsection .data, 1;
      test_{num}_data:
        .fill {vlen}, ({ebits} / 8), 0;
        .popsection

    test_vsx_v_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vlen};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t0, {vlen};
        li t1, 8;
        remu t2, t0, t1;
        bnez t2, 1f;
        li t3,  {vlen} / 8;
        j 2f;
      1:
        li t3,  {vlen} / 8 + 1;
      2:
        vsetvli t0, t3 , e8,m1,tu,mu;
        vle8.v v0, (a4);

        vsetvli t0, a0, e{ebits},m{lmul},tu,mu;
        {ldins} v8, (a1);

        {name} v8, (a3), v0.t;
        .pushsection .data, 1;
      test_{num}_data:
        .fill {vlen}, ({ebits} / 8), 0;
        .popsection

  check:
    test_vsx_v_without_mask: np.array_equal(result, golden)
    test_vsx_v_with_mask: np.array_equal(result, golden)

vse8_v:
  templates:
    <<: *_templates
    test_vsx_v_without_mask @ rs1, vlen, lmul @ ebits=8, ldins='vle8.v': |
      {inherit}

    test_vsx_v_with_mask @ rs1, vlen, lmul, mask @ ebits=8, ldins='vle8.v': |
      {inherit}

  <<: *default

  cases:
    test_vsx_v_without_mask:
      - '[np.array([1],               dtype=np.int8), 1,      1 ]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,      1 ]'
      - '[np.linspace(0, 0xff, 63,    dtype=np.int8), 63,     1 ]'
      - '[np.linspace(0, 0xff, 64,    dtype=np.int8), 64,     1 ]'
      - '[np.linspace(0, 0xff, 127,   dtype=np.int8), 127,    1 ]'
      - '[np.linspace(0, 0xff, 128,   dtype=np.int8), 128,    1 ]'
      - '[np.linspace(0, 0xff, 4,     dtype=np.int8), 4,      4 ]'
      - '[np.linspace(0, 0xff, 33,    dtype=np.int8), 33,     2 ]'
      - '[np.linspace(0, 0xff, 127,   dtype=np.int8), 127,    4 ]'
      - '[np.linspace(0, 0xff, 512,   dtype=np.int8), 512,    4 ]'
      - '[np.linspace(0, 0xff, 1024,  dtype=np.int8), 1024,   8 ]'

      - '[np.array([1],               dtype=np.int8), 1,    "f2"]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,    "f2"]'
      - '[np.linspace(0, 0xff, 63,    dtype=np.int8), 63,   "f2"]'
      - '[np.linspace(0, 0xff, 64,    dtype=np.int8), 64,   "f2"]'

      - '[np.array([1],               dtype=np.int8), 1,    "f4"]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,    "f4"]'
      - '[np.linspace(0, 0xff, 31,    dtype=np.int8), 31,   "f4"]'
      - '[np.linspace(0, 0xff, 32,    dtype=np.int8), 32,   "f4"]'

      - '[np.array([1],               dtype=np.int8), 1,    "f8"]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,    "f8"]'
      - '[np.linspace(0, 0xff, 15,    dtype=np.int8), 15,   "f8"]'
      - '[np.linspace(0, 0xff, 16,    dtype=np.int8), 16,   "f8"]'
      

    test_vsx_v_with_mask:
      - '[np.array([1],               dtype=np.int8), 1,      1 , np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,      1 , np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 63,    dtype=np.int8), 63,     1 , np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 64,    dtype=np.int8), 64,     1 , np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 4,     dtype=np.int8), 4,      4 , np.linspace(0x50, 0xff, 1, dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 33,    dtype=np.int8), 33,     2 , np.linspace(0x50, 0xff, 5, dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 127,   dtype=np.int8), 127,    4 , np.linspace(0x50, 0xff, 16, dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 512,   dtype=np.int8), 512,    4 , np.linspace(0x50, 0xff, 64, dtype=np.uint8)]'

      - '[np.array([1],               dtype=np.int8), 1,    "f2", np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,    "f2", np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 63,    dtype=np.int8), 63,   "f2", np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 64,    dtype=np.int8), 64,   "f2", np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'

      - '[np.array([1],               dtype=np.int8), 1,    "f4", np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,    "f4", np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 31,    dtype=np.int8), 31,   "f4", np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 32,    dtype=np.int8), 32,   "f4", np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'

      - '[np.array([1],               dtype=np.int8), 1,    "f8", np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64],    dtype=np.int8), 4,    "f8", np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 15,    dtype=np.int8), 15,   "f8", np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'
      - '[np.linspace(0, 0xff, 16,    dtype=np.int8), 16,   "f8", np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'
vse16_v:
  templates:
    <<: *_templates
    test_vsx_v_without_mask @ rs1, vlen, lmul @ ebits=16, ldins='vle16.v': |
      {inherit}

    test_vsx_v_with_mask @ rs1, vlen, lmul, mask @ ebits=16, ldins='vle16.v': |
      {inherit}

  <<: *default

  cases:
    test_vsx_v_without_mask:
      - '[np.array([1],                 dtype=np.int16), 1,      1 ]'
      - '[np.array([1, 1, -1, 64],      dtype=np.int16), 4,      1 ]'
      - '[np.linspace(0, 0xffff, 63,    dtype=np.int16), 63,     1 ]'
      - '[np.linspace(0, 0xffff, 64,    dtype=np.int16), 64,     1 ]'
      - '[np.linspace(0, 0xffff, 4,     dtype=np.int16), 4,      4 ]'
      - '[np.linspace(0, 0xffff, 33,    dtype=np.int16), 33,     2 ]'
      - '[np.linspace(0, 0xffff, 127,   dtype=np.int16), 127,    4 ]'
      - '[np.linspace(0, 0xffff, 256,   dtype=np.int16), 256,    4 ]'
      - '[np.linspace(0, 0xffff, 512,   dtype=np.int16), 512,    8 ]'

      - '[np.array([1],                 dtype=np.int16), 1,    "f2"]'
      - '[np.array([1, 1, -1, 64],      dtype=np.int16), 4,    "f2"]'
      - '[np.linspace(0, 0xffff, 31,    dtype=np.int16), 31,   "f2"]'
      - '[np.linspace(0, 0xffff, 32,    dtype=np.int16), 32,   "f2"]'

      - '[np.array([1],                 dtype=np.int16), 1,    "f4"]'
      - '[np.array([1, 1, -1, 64],      dtype=np.int16), 4,    "f4"]'
      - '[np.linspace(0, 0xffff, 15,    dtype=np.int16), 15,   "f4"]'
      - '[np.linspace(0, 0xffff, 16,    dtype=np.int16), 16,   "f4"]'

    test_vsx_v_with_mask :
      - '[np.array([1],                 dtype=np.int16), 1,      1 , np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64],      dtype=np.int16), 4,      1 , np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xffff, 63,    dtype=np.int16), 63,     1 , np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffff, 64,    dtype=np.int16), 64,     1 , np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffff, 4,     dtype=np.int16), 4,      4 , np.linspace(0x50, 0xff, 1, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffff, 33,    dtype=np.int16), 33,     2 , np.linspace(0x50, 0xff, 5, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffff, 127,   dtype=np.int16), 127,    4 , np.linspace(0x50, 0xff, 16, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffff, 256,   dtype=np.int16), 256,    4 , np.linspace(0x50, 0xff, 64, dtype=np.uint8)]'

      - '[np.array([1],                 dtype=np.int16), 1,    "f2", np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64],      dtype=np.int16), 4,    "f2", np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xffff, 31,    dtype=np.int16), 31,   "f2", np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffff, 32,    dtype=np.int16), 32,   "f2", np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'

      - '[np.array([1],                 dtype=np.int16), 1,    "f4", np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64],      dtype=np.int16), 4,    "f4", np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xffff, 15,    dtype=np.int16), 15,   "f4", np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffff, 16,    dtype=np.int16), 16,   "f4", np.linspace(0x50, 0xff, 8, dtype=np.uint8)]'

vse32_v:
  templates:
    <<: *_templates
    test_vsx_v_without_mask @ rs1, vlen, lmul @ ebits=32, ldins='vle32.v': |
      {inherit}

    test_vsx_v_with_mask @ rs1, vlen, lmul, mask @ ebits=32, ldins='vle32.v': |
      {inherit}

  <<: *default

  cases:
    test_vsx_v_without_mask:
      - '[np.array([1], dtype=np.int32),                     1,      1 ]'
      - '[np.array([1, 1, -1, 64], dtype=np.int32),          4,      1 ]'
      - '[np.linspace(0, 0xffffffff, 31,    dtype=np.int32), 31,     1 ]'
      - '[np.linspace(0, 0xffffffff, 32,    dtype=np.int32), 32,     1 ]'
      - '[np.linspace(0, 0xffffffff, 4,     dtype=np.int32), 4,      4 ]'
      - '[np.linspace(0, 0xffffffff, 33,    dtype=np.int32), 33,     2 ]'
      - '[np.linspace(0, 0xffffffff, 127,   dtype=np.int32), 127,    4 ]'
      - '[np.linspace(0, 0xffffffff, 128,   dtype=np.int32), 128,    4 ]'
      - '[np.linspace(0, 0xffffffff, 256,   dtype=np.int32), 256,    8 ]'

      - '[np.array([1], dtype=np.int32),                     1,    "f2"]'
      - '[np.array([1, 1, -1, 64], dtype=np.int32),          4,    "f2"]'
      - '[np.linspace(0, 0xffffffff, 15,    dtype=np.int32), 15,   "f2"]'
      - '[np.linspace(0, 0xffffffff, 16,    dtype=np.int32), 16,   "f2"]'


    test_vsx_v_with_mask :
      - '[np.array([1],                     dtype=np.int32), 1,      1 , np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64],          dtype=np.int32), 4,      1 , np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffff, 31,    dtype=np.int32), 31,     1 , np.linspace(0x50, 0xff, 4, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffff, 32,    dtype=np.int32), 32,     1 , np.linspace(0x50, 0xff, 4, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffff, 4,     dtype=np.int32), 4,      4 , np.linspace(0x50, 0xff, 1, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffff, 33,    dtype=np.int32), 33,     2 , np.linspace(0x50, 0xff, 5, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffff, 127,   dtype=np.int32), 127,    4 , np.linspace(0x50, 0xff, 16, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffff, 128,   dtype=np.int32), 128,    4 , np.linspace(0x50, 0xff, 64, dtype=np.uint8)]'

      - '[np.array([1],                     dtype=np.int32), 1,    "f2", np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64],          dtype=np.int32), 4,    "f2", np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffff, 15,    dtype=np.int32), 15,   "f2", np.linspace(0x50, 0xff, 4, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffff, 16,    dtype=np.int32), 16,   "f2", np.linspace(0x50, 0xff, 4, dtype=np.uint8)]'

vse64_v:
  templates:
    <<: *_templates
    test_vsx_v_without_mask @ rs1, vlen, lmul @ ebits=64, ldins='vle64.v': |
      {inherit}

    test_vsx_v_with_mask @ rs1, vlen, lmul, mask @ ebits=64, ldins='vle64.v': |
      {inherit}

  <<: *default

  cases:
    test_vsx_v_without_mask:
      - '[np.array([1], dtype=np.int64), 1, 1]'
      - '[np.array([1, 1, -1, 64], dtype=np.int64), 4, 1]'
      - '[np.linspace(0, 0xffffffffffffffff, 15, dtype=np.int64), 15, 1]'
      - '[np.linspace(0, 0xffffffffffffffff, 16, dtype=np.int64), 16, 1]'
      - '[np.linspace(0, 0xffffffffffffffff, 4,     dtype=np.int64), 4,    4]'
      - '[np.linspace(0, 0xffffffffffffffff, 31,    dtype=np.int64), 31,   2]'
      - '[np.linspace(0, 0xffffffffffffffff, 32,    dtype=np.int64), 32,   4]'
      - '[np.linspace(0, 0xffffffffffffffff, 64,    dtype=np.int64), 64,   4]'
      - '[np.linspace(0, 0xffffffffffffffff, 128,   dtype=np.int64), 128,  8]'

    test_vsx_v_with_mask :
      - '[np.array([1],                             dtype=np.int64), 1,    1, np.array([0xa], dtype=np.uint8)]'
      - '[np.array([1, 1, -1, 64],                  dtype=np.int64), 4,    1, np.array([0x5], dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffffffffffff, 15,    dtype=np.int64), 15,   1, np.array([0x5a, 0x55], dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffffffffffff, 16,    dtype=np.int64), 16,   1, np.array([0x55, 0xaa], dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffffffffffff, 4,     dtype=np.int64), 4,    4, np.linspace(0x50, 0xff, 1, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffffffffffff, 31,    dtype=np.int64), 31,   2, np.linspace(0x50, 0xff, 5, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffffffffffff, 32,    dtype=np.int64), 32,   4, np.linspace(0x50, 0xff, 16, dtype=np.uint8)]'
      - '[np.linspace(0, 0xffffffffffffffff, 64,    dtype=np.int64), 64,   4, np.linspace(0x50, 0xff, 64, dtype=np.uint8)]'