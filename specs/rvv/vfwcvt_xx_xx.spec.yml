_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  _templates: &_templates
    test_basic_without_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li t0, {frm};
          fsrm t1, t0; 
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {name} v2, v1 ; 
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;
          la a3, test_{num}_data; 
          {stins} v2, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits_vd}/8), 0; 
          .popsection     
    test_special_without_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li t0, {frm};
          fsrm t1, t0; 
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {name} v2, v1 ; 
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;
          la a3, test_{num}_data; 
          {stins} v2, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits_vd}/8), 0; 
          .popsection 
    test_basic_with_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li t0, {frm};
          fsrm t1, t0;            
          li a0, {vs2_shape[0]} ;
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;
          la a3, {orig_data} ;  
          {ldins_vd} v4, (a3) ;            
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs2_data} ; 
          la a0, {mask_data} ; 
          {ldins} v1, (a1) ; 
          vle1.v v0, (a0) ;
          {name} v4, v1, v0.t ;
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu; 
          la a3, test_{num}_data ; 
          {stins} v4, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits_vd}/8), 0; 
          .popsection

  templates: 
    <<: *_templates
    test_basic_without_mask @ vs2, frm @ ebits=32, ebits_vd=64, ldins='vle32.v', stins='vse64.v': |
      {inherit}
    test_special_without_mask @ vs2, frm @ ebits=32, ebits_vd=64, ldins='vle32.v', stins='vse64.v': |
      {inherit}
    test_basic_with_mask @ vs2, frm, mask, orig, vlen @ ebits=32, ebits_vd=64, ldins='vle32.v', ldins_vd='vle64.v', stins='vse64.v': |
      {inherit}

vfwcvt_xu_f_v:
  <<: *default
  cases:
    test_basic_without_mask:
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.float32), 0]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.float32), 0]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.float32), 0]"
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.float32), 1]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.float32), 1]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.float32), 1]"
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.float32), 2]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.float32), 2]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.float32), 2]"
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.float32), 3]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.float32), 3]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.float32), 3]"
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.float32), 4]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.float32), 4]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.float32), 4]"                  
    test_special_without_mask:
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 0 ]"
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 1 ]"
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 2 ]"
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 3 ]"
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 4 ]"
      - "[np.linspace( -1e20, 1e20, 32, dtype=np.float32), 0]"  
      - "[np.linspace( -1e20, 1e20, 32, dtype=np.float32), 1]" 
      - "[np.linspace( -1e20, 1e20, 32, dtype=np.float32), 2]" 
      - "[np.linspace( -1e20, 1e20, 32, dtype=np.float32), 3]" 
      - "[np.linspace( -1e20, 1e20, 32, dtype=np.float32), 4]"                                                 
    test_basic_with_mask:
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.float32), 0, random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint64), 1 ]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.float32), 0, random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint64), 10 ]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.float32), 0, random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint64), 32 ]" 
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.float32), 1, random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint64), 1 ]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.float32), 1, random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint64), 10 ]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.float32), 1, random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint64), 32 ]" 
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.float32), 2, random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint64), 1 ]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.float32), 2, random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint64), 10 ]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.float32), 2, random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint64), 32 ]" 
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.float32), 3, random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint64), 1 ]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.float32), 3, random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint64), 10 ]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.float32), 3, random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint64), 32 ]" 
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.float32), 4, random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint64), 1 ]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.float32), 4, random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint64), 10 ]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.float32), 4, random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint64), 32 ]"                              
  check:
    test_basic_without_mask: np.equal( result, golden ).all()
    test_special_without_mask: np.equal( result, golden ).all()
    test_basic_with_mask: np.equal( result, golden ).all()

vfwcvt_x_f_v:
  <<: *default
  cases:
    test_basic_without_mask:
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.float32), 0]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.float32), 0]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.float32), 0]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.float32), 1]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.float32), 1]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.float32), 1]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.float32), 2]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.float32), 2]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.float32), 2]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.float32), 3]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.float32), 3]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.float32), 3]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.float32), 4]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.float32), 4]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.float32), 4]"                  
    test_special_without_mask:
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 0 ]"
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 1 ]"
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 2 ]"
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 3 ]"
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 4 ]"  
      - "[np.linspace( -1e20, 1e20, 32, dtype=np.float32), 0]"     
      - "[np.linspace( -1e20, 1e20, 32, dtype=np.float32), 1]"  
      - "[np.linspace( -1e20, 1e20, 32, dtype=np.float32), 2]"  
      - "[np.linspace( -1e20, 1e20, 32, dtype=np.float32), 3]"  
      - "[np.linspace( -1e20, 1e20, 32, dtype=np.float32), 4]"                                                      
    test_basic_with_mask:
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.float32), 0, random_mask(1), np.linspace( 1, 127, 1, dtype=np.int64), 1 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.float32), 0, random_mask(10), np.linspace( 1, 127, 10, dtype=np.int64), 10 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.float32), 0, random_mask(32), np.linspace( 1, 127, 32, dtype=np.int64), 32 ]" 
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.float32), 1, random_mask(1), np.linspace( 1, 127, 1, dtype=np.int64), 1 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.float32), 1, random_mask(10), np.linspace( 1, 127, 10, dtype=np.int64), 10 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.float32), 1, random_mask(32), np.linspace( 1, 127, 32, dtype=np.int64), 32 ]" 
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.float32), 2, random_mask(1), np.linspace( 1, 127, 1, dtype=np.int64), 1 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.float32), 2, random_mask(10), np.linspace( 1, 127, 10, dtype=np.int64), 10 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.float32), 2, random_mask(32), np.linspace( 1, 127, 32, dtype=np.int64), 32 ]" 
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.float32), 3, random_mask(1), np.linspace( 1, 127, 1, dtype=np.int64), 1 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.float32), 3, random_mask(10), np.linspace( 1, 127, 10, dtype=np.int64), 10 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.float32), 3, random_mask(32), np.linspace( 1, 127, 32, dtype=np.int64), 32 ]" 
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.float32), 4, random_mask(1), np.linspace( 1, 127, 1, dtype=np.int64), 1 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.float32), 4, random_mask(10), np.linspace( 1, 127, 10, dtype=np.int64), 10 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.float32), 4, random_mask(32), np.linspace( 1, 127, 32, dtype=np.int64), 32 ]"
  check:
    test_basic_without_mask: np.equal( result, golden ).all()
    test_special_without_mask: np.equal( result, golden ).all()
    test_basic_with_mask: np.equal( result, golden ).all()

vfwcvt_rtz_xu_f_v:
  <<: *default
  cases:
    test_basic_without_mask:
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.float32), 0]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.float32), 0]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.float32), 0]"                 
    test_special_without_mask:
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 0 ]"
      - "[np.linspace( -1e20, 1e20, 32, dtype=np.float32), 0]"                                  
    test_basic_with_mask:
      - "[np.linspace( 0, 18446744073709551615, 1, dtype=np.float32), 0, random_mask(1), np.linspace( 100, 127, 1, dtype=np.uint64), 1 ]"
      - "[np.linspace( 0, 18446744073709551615, 10, dtype=np.float32), 0, random_mask(10), np.linspace( 100, 127, 10, dtype=np.uint64), 10 ]"
      - "[np.linspace( 0, 18446744073709551615, 32, dtype=np.float32), 0, random_mask(32), np.linspace( 100, 127, 32, dtype=np.uint64), 32 ]" 
  check:
    test_basic_without_mask: np.equal( result, golden ).all()
    test_special_without_mask: np.equal( result, golden ).all()
    test_basic_with_mask: np.equal( result, golden ).all()

vfwcvt_rtz_x_f_v:
  <<: *default
  cases:
    test_basic_without_mask:
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.float32), 0]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.float32), 0]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.float32), 0]"                 
    test_special_without_mask:
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 0 ]"
      - "[np.linspace( -1e20, 1e20, 32, dtype=np.float32), 0]"                                   
    test_basic_with_mask:
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 1, dtype=np.float32), 0, random_mask(1), np.linspace( 1, 127, 1, dtype=np.int64), 1 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 10, dtype=np.float32), 0, random_mask(10), np.linspace( 1, 127, 10, dtype=np.int64), 10 ]"
      - "[np.linspace( -9223372036854775808, 9223372036854775807, 32, dtype=np.float32), 0, random_mask(32), np.linspace( 1, 127, 32, dtype=np.int64), 32 ]" 
  check:
    test_basic_without_mask: np.equal( result, golden ).all()
    test_special_without_mask: np.equal( result, golden ).all()
    test_basic_with_mask: np.equal( result, golden ).all()  

vfwcvt_f_xu_v:
  <<: *default
  cases:
    test_basic_without_mask:
      - "[np.linspace( 0, 4294967295, 1, dtype=np.uint32), 0]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.uint32), 0]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.uint32), 0]"                 
    test_special_without_mask:
      - "[ linspace_rvv_v_special(np.uint32, 0, 32), 0 ]"                            
    test_basic_with_mask:
      - "[np.linspace( 0, 4294967295, 1, dtype=np.uint32), 0, random_mask(1), np.linspace( -127, 128, 1, dtype=np.float64), 1 ]"
      - "[np.linspace( 0, 4294967295, 10, dtype=np.uint32), 0, random_mask(10), np.linspace( -127, 128, 10, dtype=np.float64), 10 ]"
      - "[np.linspace( 0, 4294967295, 32, dtype=np.uint32), 0, random_mask(32), np.linspace( -127, 128, 32, dtype=np.float64), 32 ]" 
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 

vfwcvt_f_x_v:
  <<: *default
  cases:
    test_basic_without_mask:
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.int32), 0]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.int32), 0]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.int32), 0]"                 
    test_special_without_mask:
      - "[ linspace_rvv_v_special(np.int32, 0, 32), 0 ]"                            
    test_basic_with_mask:
      - "[np.linspace( -2147483648, 2147483647, 1, dtype=np.int32), 0, random_mask(1), np.linspace( 1, 127, 1, dtype=np.float64), 1 ]"
      - "[np.linspace( -2147483648, 2147483647, 10, dtype=np.int32), 0, random_mask(10), np.linspace( 1, 127, 10, dtype=np.float64), 10 ]"
      - "[np.linspace( -2147483648, 2147483647, 32, dtype=np.int32), 0, random_mask(32), np.linspace( 1, 127, 32, dtype=np.float64), 32 ]" 
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 

vfwcvt_f_f_v:
  <<: *default
  cases:
    test_basic_without_mask:
      - "[np.linspace( -3e38, 3e38, 1, dtype=np.float32), 0]"
      - "[np.linspace( -3e38, 3e38, 10, dtype=np.float32), 0]"
      - "[np.linspace( -3e38, 3e38, 32, dtype=np.float32), 0]"                 
    test_special_without_mask:
      - "[ linspace_rvv_v_special(np.float32, 0, 32), 0 ]"                            
    test_basic_with_mask:
      - "[np.linspace( -3e38, 3e38, 1, dtype=np.float32), 0, random_mask(1), np.linspace( 1, 127, 1, dtype=np.float64), 1 ]"
      - "[np.linspace( -3e38, 3e38, 10, dtype=np.float32), 0, random_mask(10), np.linspace( 1, 127, 10, dtype=np.float64), 10 ]"
      - "[np.linspace( -3e38, 3e38, 32, dtype=np.float32), 0, random_mask(32), np.linspace( 1, 127, 32, dtype=np.float64), 32 ]" 
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 