_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  _templates: &_templates
    test_basic_without_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li t0, {frm};
          fsrm t1, t0; 
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {name} v2, v1 ; 
          la a3, test_{num}_data; 
          {stins} v2, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits}/8), 0; 
          .popsection     
    test_special_without_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li t0, {frm};
          fsrm t1, t0; 
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {name} v2, v1 ; 
          la a3, test_{num}_data; 
          {stins} v2, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits}/8), 0; 
          .popsection
    test_dest_eq_vs2_without_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li t0, {frm};
          fsrm t1, t0; 
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs2_data} ; 
          {ldins} v1, (a1) ; 
          {name} v1, v1 ; 
          la a3, test_{num}_data; 
          {stins} v1, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits}/8), 0; 
          .popsection
    test_basic_with_mask: |
      test_{num}: 
          li TESTNUM, {num};
          li t0, {frm};
          fsrm t1, t0;            
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a1, {vs2_data} ; 
          la a0, {mask_data} ; 
          la a3, {orig_data} ; 
          {ldins} v1, (a1) ; 
          vle1.v v0, (a0) ; 
          {ldins} v3, (a3) ; 
          {name} v3, v1, v0.t ; 
          la a3, test_{num}_data ; 
          {stins} v3, (a3); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits}/8), 0; 
          .popsection

  templates: 
    <<: *_templates
    test_basic_without_mask @ vs2, frm @ ebits=32, ldins='vle32.v', stins='vse32.v': |
      {inherit}
    test_special_without_mask @ vs2, frm @ ebits=32, ldins='vle32.v', stins='vse32.v': |
      {inherit}
    test_dest_eq_vs2_without_mask @ vs2, frm @ ebits=32, ldins='vle32.v', stins='vse32.v': |
      {inherit}
    test_basic_with_mask @ vs2, frm, mask, orig, vlen @ ebits=32, ldins='vle32.v', stins='vse32.v': |
      {inherit}

vfrec7_v:
  <<: *default
  cases:
    test_basic_without_mask:
      - "[np.linspace( -1e10, 1e10, 1, dtype=np.float32), 0]"
      - "[np.linspace( -1e10, 1e10, 10, dtype=np.float32), 0]"
      - "[np.linspace( -1e10, 1e10, 32, dtype=np.float32), 0]"                      
    test_special_without_mask:
      - "[ np.array( [np.float32('-inf')]*32 ), 0 ] "
      - "[ np.linspace( -np.power(2, 128, dtype=np.float32), -np.power(2, 127, dtype=np.float32), 32, dtype=np.float32), 0]"   
      - "[ np.linspace( -np.power(2, 127, dtype=np.float32), -np.power(2, 126, dtype=np.float32), 32, dtype=np.float32), 0]"  
      - "[ np.linspace( -np.power(2, 126, dtype=np.float32), -1/np.power(2, 126, dtype=np.float32), 32, dtype=np.float32), 0]" 
      - "[ np.linspace( -1/np.power(2, 126, dtype=np.float32), -1/np.power(2, 127, dtype=np.float32), 32, dtype=np.float32), 0]"   
      - "[ np.linspace( -1/np.power(2, 127, dtype=np.float32), -1/np.power(2, 128, dtype=np.float32), 32, dtype=np.float32), 0]" 
      - "[ np.linspace( -1/np.power(2, 128, dtype=np.float32), 0, 32, dtype=np.float32), 0]"  
      - "[ np.linspace( -1/np.power(2, 128, dtype=np.float32), 0, 32, dtype=np.float32), 1]"
      - "[ np.linspace( -1/np.power(2, 128, dtype=np.float32), 0, 32, dtype=np.float32), 2]"
      - "[ np.linspace( -1/np.power(2, 128, dtype=np.float32), 0, 32, dtype=np.float32), 3]"
      - "[ np.linspace( -1/np.power(2, 128, dtype=np.float32), 0, 32, dtype=np.float32), 4]"                                                         
      - "[ np.array( [np.float32('-0')]*32 ), 0 ] "
      - "[ np.array( [np.float32('+0')]*32 ), 0 ] "
      - "[ np.linspace( 0, 1/np.power(2, 128, dtype=np.float32), 32, dtype=np.float32), 0]" 
      - "[ np.linspace( 0, 1/np.power(2, 128, dtype=np.float32), 32, dtype=np.float32), 1]" 
      - "[ np.linspace( 0, 1/np.power(2, 128, dtype=np.float32), 32, dtype=np.float32), 2]" 
      - "[ np.linspace( 0, 1/np.power(2, 128, dtype=np.float32), 32, dtype=np.float32), 3]" 
      - "[ np.linspace( 0, 1/np.power(2, 128, dtype=np.float32), 32, dtype=np.float32), 4]" 
      - "[ np.linspace( 1/np.power(2, 128, dtype=np.float32), 1/np.power(2, 127, dtype=np.float32), 32, dtype=np.float32), 0]"
      - "[ np.linspace( 1/np.power(2, 127, dtype=np.float32), 1/np.power(2, 126, dtype=np.float32), 2, dtype=np.float32), 0]" 
      - "[ np.linspace( 1/np.power(2, 126, dtype=np.float32), np.power(2, 126, dtype=np.float32), 32, dtype=np.float32), 0]"                                                 
      - "[ np.linspace( np.power(2, 126, dtype=np.float32), np.power(2, 127, dtype=np.float32), 32, dtype=np.float32), 0]" 
      - "[ np.linspace( np.power(2, 127, dtype=np.float32), np.power(2, 128, dtype=np.float32), 32, dtype=np.float32), 0]"                                 
      - "[ np.array( [np.float32('+inf')]*32 ), 0]"
      - "[ np.frombuffer( struct.pack('I', 0x7F800001), dtype=np.float32 ), 0 ] "  
      - "[ np.frombuffer( struct.pack('I', 0x7FC00000), dtype=np.float32 ), 0 ] "                                   
    test_dest_eq_vs2_without_mask:
      - "[np.linspace( -1e10, 1e10, 1, dtype=np.float32), 0]"
      - "[np.linspace( -1e10, 1e10, 10, dtype=np.float32), 0]"
      - "[np.linspace( -1e10, 1e10, 32, dtype=np.float32), 0]"     
    test_basic_with_mask:
      - "[np.linspace( -1e10, 1e10, 1, dtype=np.float32), 0, random_mask(1), np.linspace( 100, 127, 1, dtype=np.float32), 1 ]"
      - "[np.linspace( -1e10, 1e10, 10, dtype=np.float32), 0, random_mask(10), np.linspace( 100, 127, 10, dtype=np.float32), 10 ]"
      - "[np.linspace( -1e10, 1e10, 32, dtype=np.float32), 0, random_mask(32), np.linspace( 100, 127, 32, dtype=np.float32), 32 ]" 
                            
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_dest_eq_vs2_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)


