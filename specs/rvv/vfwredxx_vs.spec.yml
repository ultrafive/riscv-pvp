_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  _templates: &_templates
    test_basic_without_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, 1 ; 
          vsetvli t0, a0, e{ebits_vd},m1,tu,mu; 
          la a1, {vs1_data} ; 
          {ldins_vd} v1, (a1) ;                     
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu; 
          la a2, {vs2_data};
          {ldins} v2, (a2) ;           
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;           
          la a3, {orig_data} ; 
          {ldins_vd} v4, (a3) ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;            
          {name} v4, v2, v1 ;
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;           
          la a4, test_{num}_data ; 
          {stins} v4, (a4); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits_vd}/8), 0; 
          .popsection   
    test_special_without_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, 1 ; 
          vsetvli t0, a0, e{ebits_vd},m1,tu,mu; 
          la a1, {vs1_data} ; 
          {ldins_vd} v1, (a1) ;                     
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu; 
          la a2, {vs2_data};
          {ldins} v2, (a2) ;           
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;           
          la a3, {orig_data} ; 
          {ldins_vd} v4, (a3) ;
          vsetvli t0, a0, e{ebits},m1,tu,mu;            
          {name} v4, v2, v1 ;
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;           
          la a4, test_{num}_data ; 
          {stins} v4, (a4); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits_vd}/8), 0; 
          .popsection 
    test_dest_eq_vs1_without_mask: |
      test_{num}: 
          li TESTNUM, {num};                    
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;  
          la a1, {vs1_data} ;
          {ldins_vd} v2, (a1) ;                             
          vsetvli t0, a0, e{ebits},m1,tu,mu;
          la a2, {vs2_data}; 
          {ldins} v1, (a2) ; 
          {name} v2, v1, v2 ; 
          la a4, test_{num}_data ; 
          {stins} v2, (a4); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits_vd}/8), 0; 
          .popsection           
    test_basic_with_mask: |
      test_{num}: 
          li TESTNUM, {num}; 
          li a0, 1 ; 
          vsetvli t0, a0, e{ebits_vd},m1,tu,mu; 
          la a1, {vs1_data} ; 
          {ldins_vd} v1, (a1) ;                     
          li a0, {vs2_shape[0]} ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu; 
          la a2, {vs2_data}; 
          la a0, {mask_data};  
          {ldins} v2, (a2) ;
          vle1.v v0, (a0) ;                              
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;           
          la a3, {orig_data}; 
          {ldins_vd} v4, (a3) ; 
          vsetvli t0, a0, e{ebits},m1,tu,mu;          
          {name} v4, v2, v1, v0.t ; 
          vsetvli t0, a0, e{ebits_vd},m2,tu,mu;            
          la a4, test_{num}_data ; 
          {stins} v4, (a4); 
          .pushsection .data, 1; 
      test_{num}_data: 
          .fill {vs2_shape[0]}, ({ebits_vd}/8), 0; 
          .popsection 

  templates: 
    <<: *_templates
    test_basic_without_mask @orig, vs1, vs2 @ ebits=32, ebits_vd=64, ldins='vle32.v', ldins_vd='vle64.v', stins='vse64.v': |
      {inherit}
    test_special_without_mask @orig, vs1, vs2 @ ebits=32, ebits_vd=64, ldins='vle32.v', ldins_vd='vle64.v', stins='vse64.v': |
      {inherit}
    test_dest_eq_vs1_without_mask @ vs1, vs2 @ orig=vs1, ebits=32, ebits_vd=64, ldins='vle32.v', ldins_vd='vle64.v', stins='vse64.v': |
      {inherit}
    test_basic_with_mask @ orig, vs1, vs2, mask @ ebits=32, ebits_vd=64, ldins='vle32.v', ldins_vd='vle64.v', stins='vse64.v': |
      {inherit}
  cases:
    test_basic_without_mask:
      - linspace_rvv_vvv_wred(np.float32, 1)
      - linspace_rvv_vvv_wred(np.float32, 4)
      - linspace_rvv_vvv_wred(np.float32, 10)      
      - linspace_rvv_vvv_wred(np.float32, 32)
    test_special_without_mask:
      - "[ linspace_rvv_v_special(np.float64, 0, 32), np.array([np.float64('nan')]), linspace_rvv_v_special(np.float32, 2, 32) ]"
      - "[ linspace_rvv_v_special(np.float64, 0, 32), np.array([np.float64('inf')]), linspace_rvv_v_special(np.float32, 2, 32) ]"
      - "[ linspace_rvv_v_special(np.float64, 0, 32), np.array([np.float64('-inf')]), linspace_rvv_v_special(np.float32, 2, 32) ]" 
      - "[ np.array([0, 0], dtype=np.float64), np.array([random.random()], dtype=np.float64), np.array([np.float32('nan'), 0], dtype=np.float32) ]"       
      - "[ np.array([0, 0], dtype=np.float64), np.array([random.random()], dtype=np.float64), np.array([np.float32('inf'), 0], dtype=np.float32) ]"      
      - "[ np.array([0, 0], dtype=np.float64), np.array([random.random()], dtype=np.float64), np.array([np.float32('-inf'), 0], dtype=np.float32) ]"                   
    test_dest_eq_vs1_without_mask:
      - linspace_rvv_vv_wred(np.float32, 1)
      - linspace_rvv_vv_wred(np.float32, 4)
      - linspace_rvv_vv_wred(np.float32, 10)
      - linspace_rvv_vv_wred(np.float32, 32)  
    test_basic_with_mask:
      - linspace_rvv_wred_with_mask(np.float32, 1)
      - linspace_rvv_wred_with_mask(np.float32, 4)
      - linspace_rvv_wred_with_mask(np.float32, 10)
      - linspace_rvv_wred_with_mask(np.float32, 32)
  check:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_special_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True) 
    test_vs1_eq_vs2_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)
    test_basic_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True)

vfwredosum_vs:
  <<: *default

vfwredsum_vs:
  <<: *default


